{"version":3,"sources":["src/services/database.ts","src/redux/slices/passwordSlice.ts","src/services/encrypt.ts","src/utils/constants.ts","App.tsx","src/redux/sagas/passwordGeneratorSaga.ts","src/redux/sagas/getPasswordsSaga.ts","src/redux/sagas/getSocialMediaSaga.ts","src/redux/sagas/savePasswordSaga.ts","src/redux/sagas/deletePasswordSaga.ts","src/redux/sagas/updatePasswordSaga.ts","src/redux/slices/rootReducer.ts","src/redux/store/index.ts","src/redux/sagas/index.ts","src/services/decrypt.ts","src/redux/slices/uiElementsSlice.ts","src/components/LoadingIndicator/tailwindStyles.ts","src/components/LoadingIndicator/loadingIndicator.tsx","src/components/OnBoarding/OnBoardingItem/tailwindStyles.ts","src/components/OnBoarding/OnBoardingItem/onBoardingItem.tsx","src/components/OnBoarding/Paginator/tailwindStyles.ts","src/components/OnBoarding/Paginator/paginator.tsx","src/components/OnBoarding/NextButton/styles.ts","src/components/OnBoarding/NextButton/tailwindStyles.ts","src/components/OnBoarding/NextButton/nextButton.tsx","src/components/OnBoarding/NextButton/nextButtonContainer.tsx","src/screens/OnBoarding/tailwindStyles.ts","src/screens/OnBoarding/onBoarding.tsx","src/screens/OnBoarding/slides.tsx","src/utils/getTranslations.ts","src/languages/passwordListTranslations.ts","src/languages/modalTranslations.ts","src/languages/sidebarTranslations.ts","src/languages/infoMessagesTranslations.ts","src/languages/drawerTranslations.ts","src/languages/loginSignupTranslations.ts","src/languages/onBoardingTranslations.ts","src/languages/passwordGenTranslations.ts","src/contexts/translationsContext.ts","src/screens/OnBoarding/onBoardingContainer.tsx","src/services/authFirebase.ts","src/utils/infoMessages.ts","src/components/Popover/popover.tsx","src/components/CustomSnackbar/customSnackbar.tsx","src/components/SVGs/SVGProps.ts","src/components/SVGs/Icons.ts","src/components/SVGs/components/PassvaultLogoIcon.tsx","src/components/SVGs/Icon.tsx","src/screens/Auth/styles.ts","src/screens/Auth/tailwindStyles.ts","src/utils/commonStyles.ts","src/screens/Auth/Login/login.tsx","src/hooks/useLogin.tsx","src/screens/Auth/Login/loginContainer.tsx","src/screens/Auth/SignUp/signup.tsx","src/screens/Auth/SignUp/signupContainer.tsx","src/screens/PasswordGenerator/tailwindStyles.ts","src/components/CreateEditPasswordConfigurator/styles.ts","src/components/CreateEditPasswordConfigurator/tailwindStyles.ts","src/components/CreateEditPasswordConfigurator/createEditPasswordConfigurator.tsx","src/hooks/usePasswordDescription.tsx","src/hooks/useSocialMediaPicked.tsx","src/utils/handleCreateEditPassword.ts","src/components/CreateEditPasswordConfigurator/createEditPwdConfigurationContainer.tsx","src/components/PasswordConfigurator/CustomCheckBox/customCheckBox.tsx","src/utils/configuratorUtils.ts","src/components/PasswordConfigurator/passwordConfigurator.tsx","src/components/SliderContainer/tailwindStyles.ts","src/components/SliderContainer/sliderContainer.tsx","src/screens/PasswordGenerator/passwordGenerator.tsx","src/hooks/useGeneratorMessage.ts","src/hooks/useGeneratorPageTitle.ts","src/screens/PasswordGenerator/passwordGeneratorContainer.tsx","src/components/SocialMediaIcon/socialMediaIcon.tsx","src/utils/imageDataRetriever.ts","src/components/MenuList/tailwindStyles.ts","src/components/MenuList/index.tsx","src/components/PasswordItem/tailwindStyles.ts","src/components/PasswordIcons/passwordIcons.tsx","src/components/PasswordIcons/PasswordIconsContainer.tsx","src/components/PasswordItem/passwordItem.tsx","src/components/CustomModal/tailwindStyles.ts","src/components/CustomModal/customModal.tsx","src/screens/PasswordList/styles.ts","src/screens/PasswordList/tailwindStyles.ts","src/screens/PasswordList/passwordList.tsx","src/hooks/useSocialMediaFromFirebase.tsx","src/hooks/usePasswordsFromFirebase.tsx","src/screens/PasswordList/passwordListContainer.tsx","src/components/CustomSidebar/styles.ts","src/components/CustomSidebar/tailwindStyles.ts","src/components/CustomSidebar/customSidebar.tsx","src/components/CustomSidebar/customSidebarContainer.tsx","src/screens/Drawer/drawer.tsx","src/components/CustomStatusbar/customStatusbar.tsx","src/root/root.tsx","src/root/rootContainer.tsx","index.js","assets/amazon.png","assets/discord.png","assets/google.png","assets/slack.png","assets/okta.png","assets/outlook.png","assets/twitch.png","assets/img/sidebar-banner.png","src/redux/slices/applicationStatusSlice.ts","src/utils/localStorageFuncs.ts","src/redux/slices/userSlice.ts","src/redux/slices/socialMediaSlice.ts","src/redux/slices/configuratorSlice.ts","src/services/firebase.ts"],"names":["log","logger","createLogger","getPasswordsByUserId","userId","passwordsCollection","where","get","then","querySnapshot","docs","map","doc","id","passwordGenerated","data","password_generated","socialMedia","social_media","description","defaultEmptyPasswordDescription","createdAt","sort","x","y","obj1","obj2","field","kind","Platform","OS","sortBy","catch","error","sendPassword2Firebase","password","add","Date","getTime","uid","info","deletePasswordById","passwordId","delete","updatePasswordByIdFromFirebase","update","getSocialMedia","socialMediaCollection","name","initialState","passwordIdPicked","passwordPicked","passwordDescriptionPicked","passwordPickedWasEncrypted","length","isCreateMode","isEditMode","isDeleteMode","passwords","passwordSlice","createSlice","reducers","setPassword","state","payload","setPasswordPicked","setPasswordIdPicked","resetPasswordPicked","setPasswordDescriptionPicked","setPasswordPickedWasEncrypted","setLength","setIsCreateMode","setIsEditMode","setIsDeleteMode","setPasswords","resetPasswordGeneratorState","resetPasswordState","unsetPasswords","generatePassword","getPasswordsFromFirebase","savePassword2Firebase","deletePasswordFromFirebase","editPasswordFromFirebase","actions","selectPassword","selectPasswordIdPicked","selectPasswordPicked","selectPasswordDescriptionPicked","selectPasswordPickedWasEncrypted","selectIsCreateMode","selectIsEditMode","selectIsDeleteMode","selectPasswordLength","selectPasswords","encrypt","apiURL","process","axios","post","headers","lower","upper","number","symbols","devWarnings","popoverMessage","FIREBASE_STORAGE_URL","FIREBASE_STORAGE_BUCKET","imagesTokens","FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_EASY_SIGNUP_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_INITIAL_PASSWORD_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN","appColors","textTint","maximumTintColorSlider","disabledColorSlider","greyColor","activeTint","primary","primaryDark","red","isLocalAPI","passvaultAPI","LogBox","ignoreLogs","window","store","App","style","flex","passwordGeneratorSaga","takeLeading","type","select","isUpperCase","selectIsUpperCase","isLowerCase","selectIsLowerCase","isNumbers","selectIsNumbers","isSymbols","selectIsSymbols","all","i","charAt","Math","floor","random","setPasswordGenerated","put","exception","message","getPasswordsSaga","selectUserId","passwordsFromLocalStorage","call","getPasswordList","result","decryptMany","response","index","isCorrectlyEncrypted","pwdWasCorrectlyEncrypted","setPasswordList","unsetIsRequest","getSocialMediaSaga","getSocialMediaListFromFirebase","socialMediaListFromLocalStorage","getSocialMediaList","socialMediaList","setSocialMediaListToLocalStorage","setSocialMediaList","savePasswordSaga","encryptedPassword","deletePasswordSaga","setIsRequest","updatePasswordSaga","selectSocialMediaPicked","createRootReducer","combineReducers","user","userSlice","reducer","configurator","configuratorSlice","applicationStatus","applicationStatusSlice","socialMediaSlice","uiElements","uiElementsSlice","sagaMiddleware","createSagaMiddleware","middleware","configureStore","run","initialSnackbarState","snackbarMessage","snackbarVisible","initialModalState","modalTitle","modalMessage","modalVisible","setSnackbarMessage","setSnackbarVisible","resetSnackbar","setModalTitle","setModalMessage","setModalVisible","resetModal","selectSnackbarMessage","selectSnackbarVisible","selectModalTitle","selectModalMessage","selectModalVisible","LoadingIndicator","className","styles","ActivityIndicator","size","color","OnBoardingItem","item","title","image","width","useWindowDimensions","source","uri","resizeMode","Paginator","scrollX","_","inputRange","dotWidth","interpolate","outputRange","extrapolate","opacity","StyleSheet","create","button","position","backgroundColor","borderRadius","padding","NextButton","strokeWidth","center","radius","circumference","progressRef","scrollTo","height","rotation","origin","stroke","cx","cy","r","ref","strokeDasharray","TouchableOpacity","stylesRN","activeOpacity","onPress","AntDesign","NextButtonContainer","percentage","children","PI","progressAnimation","useRef","Animated","Value","current","useEffect","toValue","timing","duration","useNativeDriver","start","addListener","value","strokeDashoffset","setNativeProps","removeAllListeners","renderProps","root","OnBoarding","slides","currentIndex","slidesRef","viewableItemsChanged","viewConfig","FlatList","renderItem","horizontal","showsHorizontalScrollIndicator","pagingEnabled","bounces","keyExtractor","onScroll","event","nativeEvent","contentOffset","onViewableItemsChanged","viewabilityConfig","View","FIREBASE_STORAGE_FINAL_URL","translation","locale","i18n","I18n","enableFallback","en","searchInputPlaceholder","noPasswords","es","noLabel","yesLabel","deleteModalTitle","deleteModalMessage","editModalTitle","editModalMessage","editNonEncryptedModalMessage","encryptPwdMessage","welcome","pages","passwordGenerator","checkTutorial","signOut","copied2Clipboard","newPassword","about2CreatePassword","usernamePlaceholder","loginButton","signupButton","tooltip","goBack2Login","editTitle","generatorTitle","isEdit","heading","placeOwnPassword","passwordLength","checkboxEasy2Read","checkboxAllChar","checkboxUppercase","checkboxLowercase","checkboxNumbers","checkboxSymbols","descriptionPlaceholder","createButton","editButton","TranslationsContext","createContext","drawerTranslations","getTranslations","infoMessagesTranslations","loginSignupTranslations","modalTranslations","onBoardingTranslations","passwordGenTranslations","passwordListTranslations","sidebarTranslations","OnBoardingContainer","useState","setCurrentIndex","viewAreaCoveragePercentThreshold","navigation","useNavigation","dispatch","useDispatch","translations","useContext","translatedSlides","slide","viewableItems","scrollToIndex","setOnBoardingViewed","replace","showInfoMessage","ToastAndroid","show","SHORT","CustomPopover","touchableRef","useCallback","Feather","CustomSnackbar","isSnackbarVisible","onDismiss","Snackbar","visible","Variant","byDefault","fillColor","bgFillColor","Icons","PassvaultLogoIcon","variant","viewBox","fill","d","Icon","rest","IconComponent","rowGap","input","outlineStyle","buttonContainer","justifyContent","alignItems","marginTop","buttonOutLine","borderColor","borderWidth","loginImage","marginBottom","link","marginRight","rootWeb","inputContainer","buttonText","buttonOutlineText","linkContainer","linkText","outline","shadow","box","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","Login","username","isRequesting","handlers","handleOnChangeText","handleLogin","handleOnKeyPress","handleOnDismiss","join","container","testID","placeholder","t","commonStyles","onChangeText","onKeyPress","navigate","useLogin","handleBackAction","canGoBack","goBack","BackHandler","exitApp","subscription","addEventListener","auth","onAuthStateChanged","setUserData","email","unsetUserData","remove","LoginContainer","setUsername","useSelector","selectRequest","signInWithEmailAndPassword","toLowerCase","userCredentials","setUserData2LS","signIn","text","key","SignUp","handleSignUp","SignupContainer","createUserWithEmailAndPassword","signUp","cardView","icons","configuration","textContainer","textHeader","switchToggle","passwordLengthContainer","textLabel","lengthSliderContainer","inputLength","checkbox","section","leftSection","rightSection","dropdown","paddingHorizontal","paddingVertical","fontWeight","userInputContainer","textInput","descriptionLengthIndicator","CreateEditPasswordConfigurator","passwordDescriptionMaxLen","socialMediaPicked","createEditButtonLabel","handleOnPress","setDescription","handleOnPickerChange","stylesShared","selectedValue","onValueChange","label","toUpperCase","slice","Item","maxLength","Entypo","Button","usePasswordDescription","useSocialMediaPicked","selectSocialMediaList","setSocialMediaPicked","handleCreateEditPassword","CreateEditPwdConfigurationContainer","itemValue","CustomCheckBox","isChecked","disabled","flexDirection","Checkbox","margin","undefined","Text","fontSize","defaultProps","handleLeftCheckboxes","setCheck1","setCheck2","selector1","selector2","handleOtherCheckboxes","payloadString1","payloadString2","payload1","JSON","parse","payload2","handleRightCheckboxes","checkbox1","checkbox2","checkbox3","configuratorAction","PasswordConfigurator","switchEnabled","isEasy2Read","selectIsEasy2Read","isAllChar","selectIsAllChar","handleRightCheckboxesGivenLeftCheckboxes","setIsUpperCaseAndIsLowerCase","setIsNumbersAndIsSymbols","leftCheckboxes","setIsEasy2Read","setIsAllChar","rightCheckboxes","setIsUpperCase","setIsLowerCase","setIsNumbers","setIsSymbols","updateConfiguratorStateAndGeneratePassword","SliderContainer","defaultValue","setValue","Number","isNaN","step","minimumValue","maximumValue","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","PasswordGenerator","scrollViewRef","mPassword","snackbarObj","passwordFromState","handleCopyButton","handleRefreshButton","handleOnDismissSnackbar","handleOnChangePassword","handleOnBlurPassword","handleSwitch","ScrollView","showSoftInputOnFocus","caretHidden","onBlur","MaterialCommunityIcons","Ionicons","Divider","Switch","keyboardType","toString","useGeneratorMessage","isCreatedMode","showAuthenticatedMessage","unsetSocialMediaPicked","resetConfigurationState","useGeneratorPageTitle","screenTitle","useLayoutEffect","setOptions","PasswordGeneratorContainer","setSwitchEnabled","mSetPassword","alert","Clipboard","setString","SocialMediaIcon","includes","imageSource","amazon","require","discord","google","slack","okta","outlook","twitch","imageSourceRetriever","facebook","linkedin","other","socialMediaIcon","socialMediaColor","twitter","socialMediaIconColor","MenuItem","setVisible","onOutsidePress","Pressable","socialIconAndPasswordInfo","passwordAndDescription","passwordTitleWithCryptIcon","descriptionTextLabel","passwordInput","PasswordIcons","passwordVisible","handleShowHidePassword","handleEditButton","handleDeleteButton","MenuList","FontAwesome","PasswordIconsContainer","setPasswordVisible","mSocialMedia","props","PasswordItem","MaterialIcons","secureTextEntry","CustomModal","toggle","onSubmit","isVisible","onBackdropPress","onBackButtonPress","searchInput","fab","right","wrapper","passwordList","passwordItems","noPasswordsContainer","noPasswordsText","PasswordList","modalObj","scrollIsClose2Bottom","hasPasswordsStored","passwordsFiltered","searchText","refreshControl","handleScrollIsClose2Bottom","handleOnPressFAB","handleModalToggle","handleModalOnSubmit","handleSearch","handleClearSearch","EvilIcons","scrollEventThrottle","keyboardShouldPersistTaps","fadingEdgeLength","colors","FAB","bottom","icon","useSocialMediaFromFirebase","unsubscribeSocialMediaCollection","onSnapshot","usePasswordsFromFirebase","unsubscribePasswordsCollection","snapshot","docChanges","some","change","PasswordListContainer","setScrollIsClose2Bottom","refreshing","setRefreshing","setSearchText","passwordsFromState","setPasswordsFiltered","filtered","filter","layoutMeasurement","contentSize","paddingToBottom","onRefresh","setTimeout","imageBackground","paddingTop","paddingBottom","textShadowColor","textShadowOffset","textShadowRadius","CustomSidebar","sidebarProps","userName","handleSignOut","onPressInPasswordGenerator","onPressInCheckTutorial","ImageBackground","expo","version","Section","DrawerItemList","DrawerItem","CustomSidebarContainer","userEmail","selectUserEmail","substring","indexOf","stackNavigation","firebaseSignOut","clearUserDataFromLS","closeDrawer","CustomDrawer","createDrawerNavigator","Drawer","Navigator","initialRouteName","screenOptions","headerLeft","tintColor","toggleDrawer","marginLeft","drawerStyle","Dimensions","drawerActiveBackgroundColor","drawerActiveTintColor","drawerItemStyle","drawerContent","Screen","component","options","headerStyle","headerTintColor","drawerIcon","CustomStatusbar","StatusBar","animated","barStyle","Stack","createNativeStackNavigator","Root","loading","onBoardingViewed","selectLocale","translationsContextValue","Provider","NavigationContainer","headerShown","navigationKey","RootContainer","setLoading","isRequest","setLocale","Localization","getOnBoardingViewed","err","finally","createRoot","document","getElementById","render","createElement","registerRootComponent","module","exports","extraReducers","builder","addCase","appName","isObject","storeData","finalValue","stringify","AsyncStorage","setItem","e","asyncStorageException","getData","getItem","removeItem","getPasswordGenerated","empty","getUserDataFromLS","res","firstLaunchFlag","resetPasswordConfiguratorState","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","app","firebase","apps","initializeApp","database","firestore","getAuth","collection"],"mappings":"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","file":"static/js/app.ad716545.chunk.js","sourcesContent":["/* eslint-disable no-undef */\nimport { Platform } from 'react-native';\nimport { logger } from 'react-native-logs';\n\nimport { passwordsCollection, socialMediaCollection } from 'services/firebase';\nimport { defaultEmptyPasswordDescription } from 'utils/constants';\n\nconst log = logger.createLogger();\n\nconst sortBy = (obj1: any, obj2: any, field: string, kind = 'asc') => {\n  const x = kind === 'asc' && Platform.OS !== 'ios' ? 1 : -1;\n  return obj1[field] < obj2[field] ? -1 * x : obj1[field] > obj2[field] ? 1 * x : 0;\n};\n\nexport const getPasswordsByUserId = (userId: any) =>\n  passwordsCollection\n    .where('uid', '==', userId)\n    .get()\n    .then((querySnapshot) =>\n      querySnapshot.docs\n        .map((doc) => ({\n          id: doc.id,\n          passwordGenerated: doc.data().password_generated,\n          socialMedia: doc.data().social_media,\n          description: doc.data().description || defaultEmptyPasswordDescription,\n          createdAt: doc.data().createdAt,\n        }))\n        .sort((x, y) => sortBy(x, y, 'createdAt', process.env.PASSWORD_LIST_ORDER_TYPE))\n    )\n    .catch((error) => {\n      log.error('Error getting documents: ', error);\n    });\n\nexport const sendPassword2Firebase = async (\n  userId: string,\n  password: string,\n  description: string,\n  socialMedia: string\n) => {\n  await passwordsCollection\n    .add({\n      createdAt: new Date().getTime(),\n      password_generated: password,\n      social_media: socialMedia,\n      description,\n      uid: userId,\n    })\n    .then(() => {\n      log.info('A new password was added in database.');\n    })\n    .catch((error) => {\n      log.error('Something went wrong trying to add a new password in database: ', error);\n    });\n};\n\nexport const deletePasswordById = async (passwordId: string) => {\n  await passwordsCollection\n    .doc(passwordId)\n    .delete()\n    .then(() => {\n      log.info('A password was deleted from database.');\n    })\n    .catch((error) => {\n      log.error('Something went wrong trying to delete a password from database: ', error);\n    });\n};\n\nexport const updatePasswordByIdFromFirebase = async (\n  passwordId: string,\n  passwordGenerated: string,\n  description: string,\n  socialMedia: string\n) => {\n  await passwordsCollection\n    .doc(passwordId)\n    .update({\n      password_generated: passwordGenerated,\n      description,\n      social_media: socialMedia,\n    })\n    .then(() => {\n      log.info('A password was updated from database.');\n    })\n    .catch((error) => {\n      log.error('Something went wrong trying to update a password from database: ', error);\n    });\n};\n\nexport const getSocialMedia = () =>\n  socialMediaCollection\n    .get()\n    .then((querySnapshot) =>\n      querySnapshot.docs.map((doc) => ({\n        id: doc.id,\n        name: doc.data().name,\n      }))\n    )\n    .catch((error) => {\n      log.error('Something went wrong trying to get social media list: ', error);\n    });\n","import { createSlice } from '@reduxjs/toolkit';\nimport { PasswordI } from 'utils/constants';\n\nexport const initialState: {\n  password: string;\n  passwordIdPicked: string;\n  passwordPicked: string;\n  passwordDescriptionPicked: string;\n  passwordPickedWasEncrypted: boolean;\n  length: number;\n  isCreateMode: boolean;\n  isEditMode: boolean;\n  isDeleteMode: boolean;\n  passwords: Array<PasswordI>;\n} = {\n  password: '',\n  passwordIdPicked: '',\n  passwordPicked: '',\n  passwordDescriptionPicked: '',\n  passwordPickedWasEncrypted: false,\n  length: 6,\n  isCreateMode: false,\n  isEditMode: false,\n  isDeleteMode: false,\n  passwords: [],\n};\n\nconst resetPasswordState = (state: any) => ({\n  ...state,\n  password: '',\n  passwordIdPicked: '',\n  passwordPicked: '',\n  passwordDescriptionPicked: '',\n  passwordPickedWasEncrypted: false,\n  length: 6,\n  isCreateMode: false,\n  isEditMode: false,\n  isDeleteMode: false,\n});\n\nexport const passwordSlice = createSlice({\n  name: 'password',\n  initialState,\n  reducers: {\n    setPassword: (state, { payload }) => ({\n      ...state,\n      password: payload.password,\n    }),\n    setPasswordPicked: (state, { payload }) => ({\n      ...state,\n      passwordPicked: payload.passwordPicked,\n    }),\n    setPasswordIdPicked: (state, { payload }) => ({\n      ...state,\n      passwordIdPicked: payload.passwordIdPicked,\n    }),\n    resetPasswordPicked: (state) => ({\n      ...state,\n      passwordPicked: '',\n    }),\n    setPasswordDescriptionPicked: (state, { payload }) => ({\n      ...state,\n      passwordDescriptionPicked: payload.passwordDescriptionPicked,\n    }),\n    setPasswordPickedWasEncrypted: (state, { payload }) => ({\n      ...state,\n      passwordPickedWasEncrypted: payload.passwordPickedWasEncrypted,\n    }),\n    setLength: (state, { payload }) => ({\n      ...state,\n      length: payload.length,\n    }),\n    setIsCreateMode: (state, { payload }) => ({\n      ...state,\n      isCreateMode: payload.isCreateMode,\n    }),\n    setIsEditMode: (state, { payload }) => ({\n      ...state,\n      isEditMode: payload.isEditMode,\n    }),\n    setIsDeleteMode: (state, { payload }) => ({\n      ...state,\n      isDeleteMode: payload.isDeleteMode,\n    }),\n    setPasswords: (state, { payload }) => ({\n      ...state,\n      passwords: payload.passwords,\n    }),\n    resetPasswordGeneratorState: (state) => resetPasswordState(state),\n    unsetPasswords: () => ({ ...initialState }),\n    generatePassword: () => {},\n    getPasswordsFromFirebase: () => {},\n    savePassword2Firebase: (state, { payload }) => {},\n    deletePasswordFromFirebase: () => {},\n    editPasswordFromFirebase: () => {},\n  },\n});\n\nexport const {\n  setPassword,\n  setPasswordPicked,\n  setPasswordIdPicked,\n  resetPasswordPicked,\n  setPasswordDescriptionPicked,\n  setPasswordPickedWasEncrypted,\n  setLength,\n  setIsCreateMode,\n  setIsEditMode,\n  setIsDeleteMode,\n  setPasswords,\n  resetPasswordGeneratorState,\n  unsetPasswords,\n  generatePassword,\n  getPasswordsFromFirebase,\n  savePassword2Firebase,\n  deletePasswordFromFirebase,\n  editPasswordFromFirebase,\n} = passwordSlice.actions;\n\nexport const selectPassword = (state: { password: { password: string } }) =>\n  state.password.password;\nexport const selectPasswordIdPicked = (state: { password: { passwordIdPicked: string } }) =>\n  state.password.passwordIdPicked;\nexport const selectPasswordPicked = (state: { password: { passwordPicked: string } }) =>\n  state.password.passwordPicked;\nexport const selectPasswordDescriptionPicked = (state: {\n  password: { passwordDescriptionPicked: string };\n}) => state.password.passwordDescriptionPicked;\nexport const selectPasswordPickedWasEncrypted = (state: {\n  password: { passwordPickedWasEncrypted: boolean };\n}) => state.password.passwordPickedWasEncrypted;\nexport const selectIsCreateMode = (state: { password: { isCreateMode: boolean } }) =>\n  state.password.isCreateMode;\nexport const selectIsEditMode = (state: { password: { isEditMode: boolean } }) =>\n  state.password.isEditMode;\nexport const selectIsDeleteMode = (state: { password: { isDeleteMode: boolean } }) =>\n  state.password.isDeleteMode;\nexport const selectPasswordLength = (state: { password: { length: number } }) =>\n  state.password.length;\nexport const selectPasswords = (state: { password: { passwords: Array<PasswordI> } }) =>\n  state.password.passwords;\n","/* eslint-disable no-undef */\nimport axios from 'axios';\n\nconst encrypt = (password: string, userId: string) => {\n  const isLocalAPI = process.env.AWS_LOCAL_API_ENABLED === 'true';\n  const apiURL = isLocalAPI ? process.env.AWS_LOCAL_API_URL : process.env.AWS_API_URL;\n\n  return axios.post(\n    `${apiURL}/encrypt`,\n    {\n      userId,\n      password,\n    },\n    {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n};\n\nexport default encrypt;\n","/* eslint-disable no-undef */\nconst lower = 'abcdefghijklmñopqrstuvwxyz';\nconst upper = 'ABCDEFGHIJKLMNÑOPQRSTUVWXYZ';\nconst number = '0123456789';\nconst symbols = '[]{}<>\":|!@#$%^&*()_+`~/';\n\nconst devWarnings = [\n  'Clipboard has been extracted from react-native core',\n  'AsyncStorage has been extracted from react-native core',\n  'Setting a timer for a long period of time, i.e. multiple minutes',\n  'Picker has been extracted from react-native core and will be removed',\n];\n\nconst popoverMessage = 'You can generate passwords without store them.';\n\nconst defaultEmptyPasswordDescription = 'This password has no description. Please update it.';\n\nconst FIREBASE_STORAGE_URL = 'https://firebasestorage.googleapis.com';\nconst { FIREBASE_STORAGE_BUCKET } = process.env;\n\nconst imagesTokens = {\n  FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN: '9a72b084-fbf7-4ec0-bfc7-4c0c4fe923c7',\n  FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN: '48ac40a8-14ac-4b31-8246-1b9a64efc19e',\n  FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN: '9a4c9252-2f1e-4580-868c-e5d6fd383cd9',\n  FIREBASE_FIRESTORAGE_EASY_SIGNUP_IMAGE_TOKEN: '65edc2f3-657d-43f9-89b1-a2e1be19e41f',\n  FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN: '287fce56-7f18-4d06-a85b-24b6fbc42171',\n  FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN: '79295f0a-cf45-4ed2-aa1d-0e7c29cafea3',\n  FIREBASE_FIRESTORAGE_INITIAL_PASSWORD_IMAGE_TOKEN: 'daa4acf7-8be3-4210-aae0-e9de589b846d',\n  FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN: '5f6da2b8-26cc-48ca-8352-30afd0cb3dd3',\n  FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN: '5cf416cc-0f22-4ca6-be38-fc816742a76e',\n};\n\nconst appColors = {\n  textTint: '#FFF',\n  maximumTintColorSlider: '#d3d3d3',\n  disabledColorSlider: '#D3D3D3',\n  greyColor: '#9d9d9d',\n  activeTint: '#9ac8fc',\n  primary: '#3091e0',\n  primaryDark: '#236daa',\n  red: '#DB4437',\n};\n\nexport interface PasswordI {\n  id: string;\n  description: string;\n  passwordGenerated: string;\n  socialMedia: string;\n  pwdWasCorrectlyEncrypted: boolean;\n}\n\nexport interface SocialMediaI {\n  id: string;\n  name: string;\n}\n\nexport {\n  devWarnings,\n  lower,\n  upper,\n  number,\n  symbols,\n  popoverMessage,\n  defaultEmptyPasswordDescription,\n  appColors,\n  FIREBASE_STORAGE_URL,\n  FIREBASE_STORAGE_BUCKET,\n  imagesTokens,\n};\n","/* eslint-disable no-undef */\nimport React from 'react';\n\nimport { LogBox } from 'react-native';\nimport { logger } from 'react-native-logs';\nimport { Provider } from 'react-redux';\nimport { TailwindProvider } from 'tailwindcss-react-native';\nimport { EventProvider } from 'react-native-outside-press';\n\nimport store from 'reduxStore/store';\nimport { devWarnings } from 'utils/constants';\nimport Root from './src/root/rootContainer';\n\nif (process.env.ENV === 'dev') {\n  const log = logger.createLogger();\n  const isLocalAPI = process.env.AWS_LOCAL_API_ENABLED === 'true';\n  const passvaultAPI = isLocalAPI ? process.env.AWS_LOCAL_API_URL : process.env.AWS_API_URL;\n\n  LogBox.ignoreLogs(devWarnings);\n  log.info(`Is local API: ${isLocalAPI}`);\n  log.info(`Using Passvault-API at ${passvaultAPI}`);\n}\n\ndeclare global {\n  // eslint-disable-next-line no-unused-vars\n  interface Window {\n    store: any;\n  }\n}\n\nwindow.store = store;\n\nconst App = () => (\n  <Provider store={store}>\n    <TailwindProvider>\n      <EventProvider style={{ flex: 1 }}>\n        <Root />\n      </EventProvider>\n    </TailwindProvider>\n  </Provider>\n);\n\nexport default App;\n","import { select, put, takeLeading } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport {\n  generatePassword,\n  selectIsEditMode,\n  selectPasswordLength,\n  selectPasswordPicked,\n  setPassword,\n} from 'reduxStore/slices/passwordSlice';\nimport { lower, upper, number, symbols } from 'utils/constants';\nimport { setPasswordGenerated } from 'utils/localStorageFuncs';\n\nimport {\n  selectIsLowerCase,\n  selectIsNumbers,\n  selectIsSymbols,\n  selectIsUpperCase,\n} from 'reduxStore/slices/configuratorSlice';\n\nconst log = logger.createLogger();\n\nfunction* getPasswordGeneratorFlow(): Generator {\n  try {\n    const length = yield select(selectPasswordLength);\n    const isUpperCase = yield select(selectIsUpperCase);\n    const isLowerCase = yield select(selectIsLowerCase);\n    const isNumbers = yield select(selectIsNumbers);\n    const isSymbols = yield select(selectIsSymbols);\n\n    const isEditMode = yield select(selectIsEditMode);\n    const passwordPicked = yield select(selectPasswordPicked);\n\n    const isUpper: string = isUpperCase ? upper : '';\n    const isLower: string = isLowerCase ? lower : '';\n    const isNumber: string = isNumbers ? number : '';\n    const isSymbol: string = isSymbols ? symbols : '';\n\n    const all = isUpper + isLower + isNumber + isSymbol;\n    let password = '';\n\n    // @ts-ignore\n    for (let i = 0; i < length; i++) {\n      password += all.charAt(Math.floor(Math.random() * all.length));\n    }\n\n    setPasswordGenerated(password);\n\n    if (isEditMode) {\n      if (passwordPicked) {\n        // TODO: This flow needs to be updated in future\n        /* This condition will only be applied at the first time the user\n         * click in edit password, the password picked will be set as\n         * a generated password, and then will be deleted from the state.\n         * */\n        // @ts-ignore\n        password = passwordPicked;\n      }\n    }\n    yield put(setPassword({ password }));\n  } catch (exception) {\n    log.error('PasswordGeneratorSaga: ', { exception: exception.message });\n  }\n}\n\nexport const passwordGeneratorSaga = [takeLeading(generatePassword.type, getPasswordGeneratorFlow)];\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport { put, select, call, takeLeading } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport { getPasswordsFromFirebase, setPasswords } from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { unsetIsRequest } from 'reduxStore/slices/applicationStatusSlice';\nimport { getPasswordsByUserId } from 'services/database';\nimport decryptMany from 'services/decrypt';\nimport { PasswordI } from 'utils/constants';\nimport { getPasswordList, setPasswordList } from 'utils/localStorageFuncs';\n\nconst log = logger.createLogger();\n\n// Generator<any, void, SelectEffect | CallEffect>\nfunction* getPasswordsFlow(): Generator {\n  try {\n    log.info('GetPasswordSaga called');\n    const userId: string = yield select(selectUserId);\n    const passwordsFromLocalStorage: Array<PasswordI> = yield call(getPasswordList);\n\n    if (passwordsFromLocalStorage.length === 0) {\n      const result: Array<PasswordI> = yield call(getPasswordsByUserId, userId);\n      const decryptedServiceResult = yield call(\n        decryptMany,\n        result.map(({ passwordGenerated }) => ({ password: passwordGenerated })),\n        userId\n      );\n\n      const passwordsDecrypted: Array<{\n        password: string;\n        isCorrectlyEncrypted: boolean;\n      }> = decryptedServiceResult.data.response;\n\n      const passwords: Array<PasswordI> = passwordsDecrypted.map(\n        ({ password, isCorrectlyEncrypted }, index) => ({\n          id: result[index].id,\n          description: result[index].description,\n          socialMedia: result[index].socialMedia,\n          passwordGenerated: password,\n          pwdWasCorrectlyEncrypted: isCorrectlyEncrypted,\n        })\n      );\n\n      yield call(setPasswordList, passwords);\n      yield put(setPasswords({ passwords }));\n      yield put(unsetIsRequest());\n\n      return yield;\n    }\n\n    yield put(setPasswords({ passwords: passwordsFromLocalStorage }));\n    yield put(unsetIsRequest());\n  } catch (exception) {\n    log.error('GetPasswordSaga: ', { exception: exception.message });\n  }\n}\n\nexport const getPasswordsSaga = [takeLeading(getPasswordsFromFirebase.type, getPasswordsFlow)];\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport { call, put, takeLeading } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport {\n  getSocialMediaListFromFirebase,\n  setSocialMediaList,\n} from 'reduxStore/slices/socialMediaSlice';\nimport { getSocialMedia } from 'services/database';\nimport { getSocialMediaList, setSocialMediaListToLocalStorage } from 'utils/localStorageFuncs';\nimport { SocialMediaI } from 'utils/constants';\n\nconst log = logger.createLogger();\n\nfunction* getSocialMediaFlow(): Generator {\n  try {\n    const socialMediaListFromLocalStorage: Array<SocialMediaI> = yield call(getSocialMediaList);\n\n    if (socialMediaListFromLocalStorage.length === 0) {\n      const socialMediaList = yield call(getSocialMedia);\n\n      yield call(setSocialMediaListToLocalStorage, socialMediaList);\n      yield put(setSocialMediaList({ socialMediaList }));\n    }\n\n    yield put(setSocialMediaList({ socialMediaList: socialMediaListFromLocalStorage }));\n  } catch (exception) {\n    log.error('GetSocialMediaSaga: ', { exception: exception.message });\n  }\n}\n\nexport const getSocialMediaSaga = [\n  takeLeading(getSocialMediaListFromFirebase.type, getSocialMediaFlow),\n];\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport { select, call, takeLeading } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport { savePassword2Firebase } from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { sendPassword2Firebase } from 'services/database';\nimport encrypt from 'services/encrypt';\nimport { setPasswordList } from 'utils/localStorageFuncs';\n\nconst log = logger.createLogger();\n\nfunction* savePasswordFlow({ payload }: Params): Generator {\n  try {\n    log.info('SavePasswordSaga called');\n    const userId: string = yield select(selectUserId);\n    const { socialMedia, password, description } = payload;\n    const encryptServiceResult = yield call(encrypt, password, userId);\n    const encryptedPassword = encryptServiceResult.data.response.password;\n\n    yield call(setPasswordList, []);\n    yield call(sendPassword2Firebase, userId, encryptedPassword, description, socialMedia);\n  } catch (exception) {\n    log.error('SavePasswordSaga: ', { exception: exception.message });\n  }\n}\n\nexport const savePasswordSaga = [takeLeading(savePassword2Firebase.type, savePasswordFlow)];\n\ninterface Params {\n  payload: {\n    socialMedia: string;\n    password: string;\n    description: string;\n  };\n}\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport { put, select, call, takeLeading } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport {\n  deletePasswordFromFirebase,\n  selectPasswordIdPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { deletePasswordById } from 'services/database';\nimport { setIsRequest, unsetIsRequest } from 'reduxStore/slices/applicationStatusSlice';\nimport { setPasswordList } from 'utils/localStorageFuncs';\n\nconst log = logger.createLogger();\n\nfunction* deletePasswordFlow(): Generator {\n  try {\n    log.info('DeletePasswordSaga called');\n    const passwordId = yield select(selectPasswordIdPicked);\n\n    yield call(setPasswordList, []);\n    yield put(setIsRequest());\n\n    yield call(deletePasswordById, passwordId);\n\n    yield put(unsetIsRequest());\n  } catch (exception) {\n    log.error('DeletePasswordSaga: ', { exception: exception.message });\n  }\n}\n\nexport const deletePasswordSaga = [\n  takeLeading(deletePasswordFromFirebase.type, deletePasswordFlow),\n];\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport { select, call, takeLeading, put } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport {\n  editPasswordFromFirebase,\n  selectPassword,\n  selectPasswordDescriptionPicked,\n  selectPasswordIdPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { updatePasswordByIdFromFirebase } from 'services/database';\nimport { selectSocialMediaPicked } from 'reduxStore/slices/socialMediaSlice';\nimport { setIsRequest, unsetIsRequest } from 'reduxStore/slices/applicationStatusSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport encrypt from 'services/encrypt';\nimport { setPasswordList } from 'utils/localStorageFuncs';\n\nconst log = logger.createLogger();\n\nfunction* updatePasswordFlow(): Generator {\n  try {\n    log.info('UpdatePasswordSaga called');\n    const userId: string = yield select(selectUserId);\n    const passwordId: string = yield select(selectPasswordIdPicked);\n    const socialMedia: string = yield select(selectSocialMediaPicked);\n    const password: string = yield select(selectPassword);\n    const description: string = yield select(selectPasswordDescriptionPicked);\n\n    const encryptServiceResult = yield call(encrypt, password, userId);\n    const encryptedPassword = encryptServiceResult.data.response.password;\n\n    yield call(setPasswordList, []);\n    yield put(setIsRequest());\n    yield call(\n      updatePasswordByIdFromFirebase,\n      passwordId,\n      encryptedPassword,\n      description,\n      socialMedia\n    );\n    yield put(unsetIsRequest());\n  } catch (exception) {\n    log.error('UpdatePasswordSaga: ', { exception: exception.message });\n  }\n}\n\nexport const updatePasswordSaga = [takeLeading(editPasswordFromFirebase.type, updatePasswordFlow)];\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport { userSlice } from './userSlice';\nimport { passwordSlice } from './passwordSlice';\nimport { configuratorSlice } from 'reduxStore/slices/configuratorSlice';\nimport { applicationStatusSlice } from 'reduxStore/slices/applicationStatusSlice';\nimport { socialMediaSlice } from 'reduxStore/slices/socialMediaSlice';\nimport { uiElementsSlice } from 'reduxStore/slices/uiElementsSlice';\n\nconst createRootReducer = () =>\n  combineReducers({\n    user: userSlice.reducer,\n    password: passwordSlice.reducer,\n    configurator: configuratorSlice.reducer,\n    applicationStatus: applicationStatusSlice.reducer,\n    socialMedia: socialMediaSlice.reducer,\n    uiElements: uiElementsSlice.reducer,\n  });\n\nexport default createRootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport IndexSagas from 'reduxStore/sagas/index';\nimport createSagaMiddleware from 'redux-saga';\nimport createRootReducer from 'reduxStore/slices/rootReducer';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [sagaMiddleware];\n\nconst store = configureStore({\n  reducer: createRootReducer(),\n  middleware,\n});\n\nsagaMiddleware.run(IndexSagas);\n\nexport default store;\n","import { all } from 'redux-saga/effects';\nimport { passwordGeneratorSaga } from 'reduxStore/sagas/passwordGeneratorSaga';\nimport { getPasswordsSaga } from 'reduxStore/sagas/getPasswordsSaga';\nimport { getSocialMediaSaga } from 'reduxStore/sagas/getSocialMediaSaga';\nimport { savePasswordSaga } from 'reduxStore/sagas/savePasswordSaga';\nimport { deletePasswordSaga } from 'reduxStore/sagas/deletePasswordSaga';\nimport { updatePasswordSaga } from 'reduxStore/sagas/updatePasswordSaga';\n\nexport default function* IndexSagas() {\n  yield all([\n    ...passwordGeneratorSaga,\n    ...getPasswordsSaga,\n    ...getSocialMediaSaga,\n    ...savePasswordSaga,\n    ...deletePasswordSaga,\n    ...updatePasswordSaga,\n  ]);\n}\n","/* eslint-disable no-undef */\nimport axios from 'axios';\n\nconst decryptMany = (passwords: Array<{ password: string }>, userId: string) => {\n  const isLocalAPI = process.env.AWS_LOCAL_API_ENABLED === 'true';\n  const apiURL = isLocalAPI ? process.env.AWS_LOCAL_API_URL : process.env.AWS_API_URL;\n\n  return axios.post(\n    `${apiURL}/decryptMany`,\n    {\n      userId,\n      passwords,\n    },\n    {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n};\n\nexport default decryptMany;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  snackbarMessage: '',\n  snackbarVisible: false,\n  modalTitle: '',\n  modalMessage: '',\n  modalVisible: false,\n};\n\nconst initialSnackbarState = {\n  snackbarMessage: '',\n  snackbarVisible: false,\n};\n\nconst initialModalState = {\n  modalTitle: '',\n  modalMessage: '',\n  modalVisible: false,\n};\n\nexport const uiElementsSlice = createSlice({\n  name: 'uiElements',\n  initialState,\n  reducers: {\n    // snackbar actions\n    setSnackbarMessage: (state, { payload }) => ({\n      ...state,\n      snackbarMessage: payload.snackbarMessage,\n    }),\n    setSnackbarVisible: (state, { payload }) => ({\n      ...state,\n      snackbarVisible: payload.snackbarVisible,\n    }),\n    resetSnackbar: (state) => ({\n      ...state,\n      ...initialSnackbarState,\n    }),\n\n    // modal actions\n    setModalTitle: (state, { payload }) => ({\n      ...state,\n      modalTitle: payload.modalTitle,\n    }),\n    setModalMessage: (state, { payload }) => ({\n      ...state,\n      modalMessage: payload.modalMessage,\n    }),\n    setModalVisible: (state, { payload }) => ({\n      ...state,\n      modalVisible: payload.modalVisible,\n    }),\n    resetModal: (state) => ({\n      ...state,\n      ...initialModalState,\n    }),\n  },\n});\n\nexport const {\n  setSnackbarMessage,\n  setSnackbarVisible,\n  resetSnackbar,\n  setModalTitle,\n  setModalMessage,\n  setModalVisible,\n  resetModal,\n} = uiElementsSlice.actions;\n\n// snackbar select\nexport const selectSnackbarMessage = (state: { uiElements: { snackbarMessage: any } }) =>\n  state.uiElements.snackbarMessage;\nexport const selectSnackbarVisible = (state: { uiElements: { snackbarVisible: any } }) =>\n  state.uiElements.snackbarVisible;\n\n// modal select\nexport const selectModalTitle = (state: { uiElements: { modalTitle: any } }) =>\n  state.uiElements.modalTitle;\nexport const selectModalMessage = (state: { uiElements: { modalMessage: any } }) =>\n  state.uiElements.modalMessage;\nexport const selectModalVisible = (state: { uiElements: { modalVisible: any } }) =>\n  state.uiElements.modalVisible;\n","const root = `flex\n  flex-row\n  flex-1\n  justify-center\n  p-2.5`;\n\nexport default {\n  root,\n};\n","import React from 'react';\nimport { View, ActivityIndicator } from 'react-native';\n\nimport styles from './tailwindStyles';\n\nexport const LoadingIndicator = () => (\n  <View className={styles.root}>\n    <ActivityIndicator size='large' color='#3091e0' />\n  </View>\n);\n","const root = `flex\n  justify-center\n  items-center\n  mt-2.5`;\n\nconst image = `rounded-[3px]\n  justify-center`;\n\nconst textContainer = `mt-[15px]\n  pt-[15px]\n  px-2`;\n\nconst title = `font-bold\n  text-[25px]\n  mb-[5px]\n  text-pblue-400\n  text-center`;\n\nconst description = `text-[14px]\n  text-[#808080]\n  text-center\n  px-[64px]`;\n\nexport default {\n  root,\n  image,\n  textContainer,\n  title,\n  description,\n};\n","import { Image, Text, useWindowDimensions, View } from 'react-native';\nimport React from 'react';\n\nimport styles from './tailwindStyles';\n\nexport const OnBoardingItem = ({ item }: Props) => {\n  const { title, description, image } = item;\n  const { width } = useWindowDimensions();\n\n  return (\n    <View className={styles.root} style={[{ width }]}>\n      <Image\n        source={{\n          uri: image,\n        }}\n        className={styles.image}\n        style={[{ flex: 0.7 }, { width, resizeMode: 'contain' }]}\n      />\n\n      <View className={styles.textContainer} style={{ flex: 0.3 }}>\n        <Text className={styles.title}>{title}</Text>\n        <Text className={styles.description}>{description}</Text>\n      </View>\n    </View>\n  );\n};\n\ninterface Props {\n  item: {\n    id: number;\n    title: string;\n    description: string;\n    image: string;\n  };\n}\n","const root = `flex\n  flex-row\n  items-center\n  h-[15px]`;\n\nconst dot = `h-2.5\n  rounded-[10px]\n  bg-pblue-400\n  mx-2`;\n\nexport default {\n  root,\n  dot,\n};\n","import React from 'react';\nimport { View, Animated, useWindowDimensions } from 'react-native';\n\nimport styles from './tailwindStyles';\n\nexport function Paginator({ data, scrollX }: Props) {\n  const { width } = useWindowDimensions();\n\n  return (\n    <View className={styles.root}>\n      {data.map((_: any, i: number) => {\n        const inputRange = [(i - 1) * width, i * width, (i + 1) * width];\n        const dotWidth = scrollX.interpolate({\n          inputRange,\n          outputRange: [10, 20, 10],\n          extrapolate: 'clamp',\n        });\n        const opacity = scrollX.interpolate({\n          inputRange,\n          outputRange: [0.3, 1, 0.3],\n          extrapolate: 'clamp',\n        });\n\n        return (\n          <Animated.View key={i} className={styles.dot} style={[{ width: dotWidth, opacity }]} />\n        );\n      })}\n    </View>\n  );\n}\n\ninterface Props {\n  data: any;\n  scrollX: any;\n}\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nexport const styles = StyleSheet.create({\n  button: {\n    position: 'absolute',\n    backgroundColor: appColors.primary,\n    borderRadius: 100,\n    padding: 15,\n  },\n});\n","const root = `flex\n  justify-center\n  items-center\n  mb-2.5`;\n\nexport default {\n  root,\n};\n","import React from 'react';\nimport { View, TouchableOpacity } from 'react-native';\nimport Svg, { G, Circle } from 'react-native-svg';\nimport { AntDesign } from '@expo/vector-icons';\nimport { appColors } from 'utils/constants';\n\nimport { styles as stylesRN } from './styles';\nimport styles from './tailwindStyles';\n\nexport const NextButton = ({\n  size,\n  strokeWidth,\n  center,\n  radius,\n  circumference,\n  progressRef,\n  scrollTo,\n}: Props) => (\n  <View className={styles.root}>\n    <Svg width={size} height={size}>\n      {/* eslint-disable-next-line @typescript-eslint/ban-ts-comment */}\n      {/* @ts-ignore */}\n      <G rotation='-90' origin={center}>\n        <Circle\n          stroke={appColors.maximumTintColorSlider}\n          cx={center}\n          cy={center}\n          r={radius}\n          strokeWidth={strokeWidth}\n        />\n        <Circle\n          ref={progressRef}\n          stroke={appColors.primaryDark}\n          cx={center}\n          cy={center}\n          r={radius}\n          strokeWidth={strokeWidth}\n          strokeDasharray={circumference}\n          // strokeDashoffset={circumference - (circumference * 100) / 100}\n        />\n      </G>\n    </Svg>\n    <TouchableOpacity style={stylesRN.button} activeOpacity={0.6} onPress={scrollTo}>\n      <AntDesign name='arrowright' size={20} color='#FFF' />\n    </TouchableOpacity>\n  </View>\n);\n\nexport interface Props {\n  size: number;\n  strokeWidth: number;\n  center: number;\n  radius: number;\n  circumference: number;\n  progressRef: React.RefObject<View>;\n  scrollTo: () => void;\n}\n","import React, { useEffect, useRef } from 'react';\nimport { Animated, View } from 'react-native';\nimport { NextButton, Props as RenderProps } from 'components/OnBoarding/NextButton/nextButton';\n\nconst NextButtonContainer = ({ scrollTo, percentage, children }: ContainerProps) => {\n  const size = 80;\n  const strokeWidth = 2;\n  const center: number = size / 2;\n  const radius: number = size / 2 - strokeWidth / 2;\n  const circumference: number = 2 * Math.PI * radius;\n\n  const progressAnimation = useRef(new Animated.Value(0)).current;\n  const progressRef = useRef<View>(null);\n\n  const animation = (toValue: any) =>\n    Animated.timing(progressAnimation, {\n      toValue,\n      duration: 250,\n      useNativeDriver: true,\n    }).start();\n\n  useEffect(() => {\n    animation(percentage);\n  }, [percentage]);\n\n  useEffect(() => {\n    progressAnimation.addListener(\n      (value) => {\n        const strokeDashoffset = circumference - (circumference * value.value) / 100;\n\n        if (progressRef?.current) {\n          progressRef.current.setNativeProps({\n            strokeDashoffset,\n          });\n        }\n      },\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      [percentage]\n    );\n\n    return () => {\n      progressAnimation.removeAllListeners();\n    };\n  }, []);\n\n  return children({\n    size,\n    strokeWidth,\n    center,\n    radius,\n    circumference,\n    progressRef,\n    scrollTo,\n  });\n};\n\ninterface ContainerProps {\n  scrollTo: () => void;\n  percentage: number;\n  children: typeof NextButton;\n}\n\nexport default ({ scrollTo, percentage }: { scrollTo: () => void; percentage: number }) => (\n  <NextButtonContainer scrollTo={scrollTo} percentage={percentage}>\n    {(renderProps: RenderProps) => <NextButton {...renderProps} />}\n  </NextButtonContainer>\n);\n","import { Platform } from 'react-native';\n\nconst root = `flex\n  flex-1\n  flex-col\n  gap-6\n  justify-around\n  items-center\n  ${Platform.OS === 'ios' ? 'py-[30px]' : 'py-[15px]'}`;\n\nexport default {\n  root,\n};\n","import React from 'react';\nimport { View, FlatList, Animated } from 'react-native';\nimport { OnBoardingItem } from 'components/OnBoarding/OnBoardingItem/onBoardingItem';\nimport { Paginator } from 'components/OnBoarding/Paginator/paginator';\nimport NextButton from 'components/OnBoarding/NextButton/nextButtonContainer';\nimport { Slide } from 'screens/OnBoarding/slides';\n\nimport styles from './tailwindStyles';\n\nexport const OnBoarding = ({\n  slides,\n  currentIndex,\n  scrollX,\n  slidesRef,\n  viewableItemsChanged,\n  viewConfig,\n  scrollTo,\n}: Props) => (\n  <View className={styles.root}>\n    <FlatList\n      ref={slidesRef}\n      data={slides}\n      renderItem={({ item }) => <OnBoardingItem item={item} />}\n      horizontal\n      showsHorizontalScrollIndicator={false}\n      pagingEnabled\n      bounces={false}\n      keyExtractor={(item) => `${item.id}`}\n      onScroll={Animated.event([{ nativeEvent: { contentOffset: { x: scrollX } } }], {\n        useNativeDriver: false,\n      })}\n      onViewableItemsChanged={viewableItemsChanged}\n      viewabilityConfig={viewConfig}\n    />\n    <View>\n      <Paginator data={slides} scrollX={scrollX} />\n    </View>\n    <View>\n      <NextButton scrollTo={scrollTo} percentage={(currentIndex + 1) * (100 / slides.length)} />\n    </View>\n  </View>\n);\n\nexport interface Props {\n  slides: Array<Slide>;\n  currentIndex: number;\n  scrollX: Animated.Value;\n  slidesRef: React.RefObject<FlatList>;\n  viewableItemsChanged: (item: { viewableItems: any }) => void;\n  viewConfig: any;\n  scrollTo: () => void;\n}\n","import { FIREBASE_STORAGE_BUCKET, FIREBASE_STORAGE_URL, imagesTokens } from 'utils/constants';\n\nconst {\n  FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_EASY_SIGNUP_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_INITIAL_PASSWORD_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN,\n} = imagesTokens;\nconst FIREBASE_STORAGE_FINAL_URL = `${FIREBASE_STORAGE_URL}/v0/b/${FIREBASE_STORAGE_BUCKET}/o`;\n\nexport type Slide = {\n  id: number;\n  title: string;\n  description: string;\n  image: string;\n};\n\nexport const slides = [\n  {\n    id: 1,\n    image: `${FIREBASE_STORAGE_FINAL_URL}/welcome.png?alt=media&token=${FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN}`,\n  },\n  {\n    id: 2,\n    image: `${FIREBASE_STORAGE_FINAL_URL}/password_generator.gif?alt=media&token=${FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN}`,\n  },\n  {\n    id: 3,\n    image: `${FIREBASE_STORAGE_FINAL_URL}/sign-up.png?alt=media&token=${FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN}`,\n  },\n  {\n    id: 4,\n    image: `${FIREBASE_STORAGE_FINAL_URL}/easy-signup.gif?alt=media&token=${FIREBASE_FIRESTORAGE_EASY_SIGNUP_IMAGE_TOKEN}`,\n  },\n  {\n    id: 5,\n    image: `${FIREBASE_STORAGE_FINAL_URL}/free-to-use.png?alt=media&token=${FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN}`,\n  },\n  {\n    id: 6,\n    image: `${FIREBASE_STORAGE_FINAL_URL}/passwords-listed.png?alt=media&token=${FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN}`,\n  },\n  {\n    id: 7,\n    image: `${FIREBASE_STORAGE_FINAL_URL}/initial-password.gif?alt=media&token=${FIREBASE_FIRESTORAGE_INITIAL_PASSWORD_IMAGE_TOKEN}`,\n  },\n  {\n    id: 8,\n    image: `${FIREBASE_STORAGE_FINAL_URL}/password-edit.gif?alt=media&token=${FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN}`,\n  },\n  {\n    id: 9,\n    image: `${FIREBASE_STORAGE_FINAL_URL}/onboarding-completed.png?alt=media&token=${FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN}`,\n  },\n];\n","import { I18n, Dict } from 'i18n-js';\n\n// eslint-disable-next-line\nexport default (translation: Dict, locale: string) => {\n  const i18n = new I18n(translation);\n  i18n.locale = locale;\n  i18n.enableFallback = true;\n\n  return i18n;\n};\n","export default {\n  en: {\n    searchInputPlaceholder: 'Search a password',\n    noPasswords: 'No passwords found :(',\n  },\n  es: {\n    searchInputPlaceholder: 'Busca una contraseña',\n    noPasswords: 'No se encontraron contraseñas :(',\n  },\n};\n","export default {\n  en: {\n    noLabel: 'No',\n    yesLabel: 'Yes',\n    deleteModalTitle: 'Delete password warning!',\n    deleteModalMessage: \"Are you sure you want to delete this PLATFORM's password?\",\n    editModalTitle: 'Edit password warning!',\n    editModalMessage:\n      \"If you update this password, you won't be able to recover it.\\nDo you want to update it?\",\n    editNonEncryptedModalMessage:\n      'This password will be updated and encrypted.\\nIt will be the same unless you changed it in the configurator.',\n    encryptPwdMessage:\n      'This password was not encrypted.\\nWe highly recommend you to update it, this new one will be encrypted for your security.',\n    modalTitle: 'Encryption suggestion',\n    modalMessage:\n      'There is(are) some password(s) not encrypted, please click edit on any password to double check.',\n  },\n  es: {\n    noLabel: 'No',\n    yesLabel: 'Sí',\n    deleteModalTitle: 'Advertencia de borrado de contraseña!',\n    deleteModalMessage: 'Estás seguro que deseas borrar la contraseña de PLATFORM?',\n    editModalTitle: 'Advertencia de actualización de contraseña',\n    editModalMessage: 'Si actualizas esta contraseña, no podrás recuperarla.\\nDeseas actualizarla?',\n    editNonEncryptedModalMessage:\n      'Esta contraseña será actualizada y encriptada.\\nSeguirá siendo la misma a menos que lo hayas cambiado en el configurador.',\n    encryptPwdMessage:\n      'Esta contraseña no ha sido encriptada.\\nTe sugerimos actualizarla por una nueva que será encriptada para tu mayor seguridad.',\n    modalTitle: 'Sugerencia de encriptación',\n    modalMessage:\n      'Hay algún(a) contraseña(s) que no está(n) encriptada(s), porfavor da click en editar en cualquier contraseña para estar seguro(a). ',\n  },\n};\n","export default {\n  en: {\n    welcome: 'Hey there',\n    pages: 'Pages',\n    passwordGenerator: 'Password generator',\n    checkTutorial: 'Check tutorial',\n    signOut: 'Sign out',\n  },\n  es: {\n    welcome: 'Hola',\n    pages: 'Páginas',\n    passwordGenerator: 'Generador de contraseñas',\n    checkTutorial: 'Revisar tutorial',\n    signOut: 'Cerrar sesión',\n  },\n};\n","export default {\n  en: {\n    copied2Clipboard: 'The password was copied to clipboard',\n    newPassword: 'New password generated',\n    about2CreatePassword: \"You're about to generate a new password\",\n  },\n  es: {\n    copied2Clipboard: 'La contraseña fue copiada en el portapeles',\n    newPassword: 'Nueva contraseña generada',\n    about2CreatePassword: 'Estas a punto de generar una contraseña',\n  },\n};\n","export default {\n  es: { title: 'Lista de contraseñas' },\n  en: { title: 'Password list' },\n};\n","export default {\n  en: {\n    usernamePlaceholder: 'Username',\n    loginButton: 'Login',\n    signupButton: 'Sign up',\n    tooltip: 'Use it without an account',\n    goBack2Login: 'Go to login if you have an account',\n  },\n  es: {\n    usernamePlaceholder: 'Nombre de usuario',\n    loginButton: 'Iniciar sesión',\n    signupButton: 'Regristrarse',\n    tooltip: 'Usar sin cuenta',\n    goBack2Login: 'Si ya tienes una cuenta, inicia sesión aquí',\n  },\n};\n","export default {\n  en: {\n    slides: [\n      {\n        id: 1,\n        title: 'Welcome to Passvault!',\n        description: 'The main goal of this app is to generate secure and configurable passwords',\n      },\n      {\n        id: 2,\n        title: 'Password Generator',\n        description: 'Configure and generate a password is very simple!',\n      },\n      {\n        id: 3,\n        title: 'Storing Generated Passwords',\n        description: 'Optionally you can enroll up and store many generated passwords',\n      },\n      {\n        id: 4,\n        title: 'Signup is very easy!',\n        description:\n          \"No passwords required, duh! you only need a username with more than 6 characters for signup and login. That's it!\",\n      },\n      {\n        id: 5,\n        title: 'Free to use',\n        description:\n          \"If you don't feel comfortable creating an account, you can still generate passwords but those wont't be stored\",\n      },\n      {\n        id: 6,\n        title: 'Check your Generated Passwords listed',\n        description:\n          \"If you're an authenticated user all your passwords will be listed (latest listed first), and navigate with a sidebar menu\",\n      },\n      {\n        id: 7,\n        title: 'Place your initial password',\n        description:\n          \"If you prefer, you can place an initial password when you're creating a new entry, otherwise generate a password\",\n      },\n      {\n        id: 8,\n        title: 'Update your existing passwords',\n        description:\n          'In order to avoid to create more entries, you can update an existing password and save the changes',\n      },\n      {\n        id: 9,\n        title: \"Let's go with it!\",\n        description: \"Now we're ready to start to use Passvault!\",\n      },\n    ],\n  },\n  es: {\n    slides: [\n      {\n        id: 1,\n        title: 'Bienvenido(a) a Passvault!',\n        description:\n          'El principal objetivo de esta app es generar contraseñas seguras y configurables',\n      },\n      {\n        id: 2,\n        title: 'Generador de contraseñas',\n        description: 'Generar y configurar una contraseña es muy simple!',\n      },\n      {\n        id: 3,\n        title: 'Almacena tus contraseñas generadas',\n        description: 'Opcionalmente puedes registrarte para guardar tus contraseñas generadas',\n      },\n      {\n        id: 4,\n        title: 'Registrarte es muy fácil!',\n        description:\n          'No necesitas ninguna contraseña, obvio! sólo necesitas un nombre de usuario de más de 6 caractéres para registrarte e iniciar sesión. Eso es todo!',\n      },\n      {\n        id: 5,\n        title: 'Gratis de usar',\n        description:\n          'Si no deseas registrarte, aún puedes generar contraseñas pero estas no serán almacenadas',\n      },\n      {\n        id: 6,\n        title: 'Revisa la lista de tus contraseñas generadas',\n        description:\n          'Si eres un usuario(a) autenticado(a), todas tus contraseñas serán listadas (la más reciente estará al inicio) y navega con el menu lateral',\n      },\n      {\n        id: 7,\n        title: 'Ingresa tu contraseña inicial',\n        description:\n          'Si lo prefieres, puedes ingresar una contraseña inicial cuando estés creando un nuevo registro, de lo contrarario genera una contraseña',\n      },\n      {\n        id: 8,\n        title: 'Actualiza tus contraseñas existentes',\n        description:\n          'Para evitar crear nuevos registros, puedes actualizar/editar un constraseña ya existente y guardar los cambios',\n      },\n      {\n        id: 9,\n        title: 'Comenzemos!!',\n        description: 'Ahora ya estás listo(a) para usar Passvault!',\n      },\n    ],\n  },\n};\n","export default {\n  en: {\n    editTitle: 'Password Edit',\n    generatorTitle: 'Password Generator',\n    isEdit: '(Only)',\n    heading: 'Configure your password',\n    placeOwnPassword: 'Place your own password',\n    passwordLength: 'Password length',\n    checkboxEasy2Read: 'Easy to read',\n    checkboxAllChar: 'All characters',\n    checkboxUppercase: 'Uppercase',\n    checkboxLowercase: 'Lowercase',\n    checkboxNumbers: 'Numbers',\n    checkboxSymbols: 'Symbols',\n    socialMedia: 'Social media',\n    description: 'Description',\n    descriptionPlaceholder: 'Type here...',\n    createButton: 'Save',\n    editButton: 'Edit',\n  },\n  es: {\n    editTitle: 'Editor de contraseña',\n    generatorTitle: 'Generador de contraseñas',\n    isEdit: '(Únicamente)',\n    heading: 'Configura tu contraseña',\n    placeOwnPassword: 'Ingresa tu propia contraseña',\n    passwordLength: 'Tamaño de la contraseña',\n    checkboxEasy2Read: 'Fácil de leer',\n    checkboxAllChar: 'Todos los caracteres',\n    checkboxUppercase: 'Mayúsculas',\n    checkboxLowercase: 'Minúsculas',\n    checkboxNumbers: 'Números',\n    checkboxSymbols: 'Símbolos',\n    socialMedia: 'Plataforma web',\n    description: 'Descripción',\n    descriptionPlaceholder: 'Ingresa tu descripción...',\n    createButton: 'Guardar',\n    editButton: 'Editar',\n  },\n};\n","import { createContext } from 'react';\nimport { I18n } from 'i18n-js';\nimport getTranslations from 'utils/getTranslations';\nimport passwordListTranslations from 'languages/passwordListTranslations';\nimport modalTranslations from 'languages/modalTranslations';\nimport sidebarTranslations from 'languages/sidebarTranslations';\nimport infoMessagesTranslations from 'languages/infoMessagesTranslations';\nimport drawerTranslations from 'languages/drawerTranslations';\nimport loginSignupTranslations from 'languages/loginSignupTranslations';\nimport onBoardingTranslations from 'languages/onBoardingTranslations';\nimport passwordGenTranslations from 'languages/passwordGenTranslations';\n\nexport const TranslationsContext = createContext<{\n  drawerTranslations: I18n;\n  infoMessagesTranslations: I18n;\n  loginSignupTranslations: I18n;\n  modalTranslations: I18n;\n  onBoardingTranslations: I18n;\n  passwordGenTranslations: I18n;\n  passwordListTranslations: I18n;\n  sidebarTranslations: I18n;\n}>({\n  drawerTranslations: getTranslations(drawerTranslations, 'en'),\n  infoMessagesTranslations: getTranslations(infoMessagesTranslations, 'en'),\n  loginSignupTranslations: getTranslations(loginSignupTranslations, 'en'),\n  modalTranslations: getTranslations(modalTranslations, 'en'),\n  onBoardingTranslations: getTranslations(onBoardingTranslations, 'en'),\n  passwordGenTranslations: getTranslations(passwordGenTranslations, 'en'),\n  passwordListTranslations: getTranslations(passwordListTranslations, 'en'),\n  sidebarTranslations: getTranslations(sidebarTranslations, 'en'),\n});\n","import React, { Dispatch, useContext, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { Animated, FlatList } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { setIsRequest } from 'reduxStore/slices/applicationStatusSlice';\nimport { OnBoarding, Props as RenderProps } from 'screens/OnBoarding/onBoarding';\nimport { Slide, slides } from 'screens/OnBoarding/slides';\nimport { setOnBoardingViewed } from 'utils/localStorageFuncs';\nimport { TranslationsContext } from 'contexts/translationsContext';\n\nconst OnBoardingContainer = ({ children }: { children: typeof OnBoarding }) => {\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\n  const scrollX = useRef<Animated.Value>(new Animated.Value(0)).current;\n  const slidesRef = useRef<FlatList>(null);\n  const viewConfig = useRef({ viewAreaCoveragePercentThreshold: 50 }).current;\n  const navigation: NativeStackNavigationProp<any> = useNavigation();\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n  const { onBoardingTranslations } = useContext(TranslationsContext);\n\n  const translations: {\n    id: number;\n    title: string;\n    description: string;\n  }[] = onBoardingTranslations.get('slides');\n\n  const translatedSlides: Array<Slide> = slides.map((slide, index) => ({\n    ...slide,\n    title: translations[index].title,\n    description: translations[index].description,\n  }));\n\n  const viewableItemsChanged = useRef((item: { viewableItems: any }) => {\n    const { viewableItems } = item;\n    setCurrentIndex(viewableItems[0].index);\n  }).current;\n\n  const scrollTo = () => {\n    if (currentIndex < slides.length - 1) {\n      slidesRef.current?.scrollToIndex({ index: currentIndex + 1 });\n    } else {\n      setOnBoardingViewed('true');\n      dispatch(setIsRequest());\n      navigation.replace('Login');\n    }\n  };\n\n  return children({\n    slides: translatedSlides,\n    currentIndex,\n    scrollX,\n    slidesRef,\n    viewableItemsChanged,\n    viewConfig,\n    scrollTo,\n  });\n};\n\nexport default () => (\n  <OnBoardingContainer>\n    {(renderProps: RenderProps) => <OnBoarding {...renderProps} />}\n  </OnBoardingContainer>\n);\n","import { createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth';\nimport { clearUserDataFromLS, setUserData2LS } from 'utils/localStorageFuncs';\nimport { signOut as firebaseSignOut } from '@firebase/auth';\nimport { auth } from 'services/firebase';\n\nimport { logger } from 'react-native-logs';\n\nconst log = logger.createLogger();\n\nexport const signIn = (username: string) => {\n  signInWithEmailAndPassword(auth, `${username}@example.com`, username.toLowerCase())\n    .then((userCredentials) => {\n      const { user } = userCredentials;\n\n      setUserData2LS(user?.uid, user?.email);\n    })\n    .catch((error) => {\n      log.error({ exception: error.message });\n    });\n};\n\nexport const signOut = () =>\n  firebaseSignOut(auth)\n    .then(() => {\n      clearUserDataFromLS();\n    })\n    .catch((error) => {\n      log.error({ exception: error.message });\n    });\n\nexport const signUp = (username: string) => {\n  createUserWithEmailAndPassword(auth, `${username}@example.com`, username.toLowerCase())\n    .then((userCredentials) => {\n      const { user } = userCredentials;\n      log.info('User signed up: ', user?.uid);\n    })\n    .catch((error) => {\n      log.error({ exception: error.message });\n    });\n};\n","import { ToastAndroid } from 'react-native';\n\nexport const showInfoMessage = (message: string) => {\n  ToastAndroid.show(message, ToastAndroid.SHORT);\n};\n","import React, { useCallback } from 'react';\nimport { Platform, TouchableOpacity } from 'react-native';\nimport { Feather } from '@expo/vector-icons';\n\nimport { popoverMessage } from 'utils/constants';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport { useDispatch } from 'react-redux';\nimport { setSnackbarMessage, setSnackbarVisible } from 'reduxStore/slices/uiElementsSlice';\n\nexport const CustomPopover = ({ touchableRef }: Props) => {\n  const dispatch = useDispatch();\n\n  const onPress = useCallback(() => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(popoverMessage);\n    } else {\n      dispatch(setSnackbarMessage({ snackbarMessage: popoverMessage }));\n      dispatch(setSnackbarVisible({ snackbarVisible: true }));\n    }\n  }, []);\n\n  return (\n    <TouchableOpacity ref={touchableRef} onPress={onPress}>\n      <Feather name='info' size={20} color='black' />\n    </TouchableOpacity>\n  );\n};\n\ninterface Props {\n  touchableRef: any;\n}\n","import React from 'react';\nimport { Snackbar } from 'react-native-paper';\n\n// Reference for Icons usage: https://icons.expo.fyi/\n\nexport const CustomSnackbar = ({ message, isSnackbarVisible, onDismiss }: Props) => (\n  <Snackbar visible={isSnackbarVisible} onDismiss={onDismiss} duration={1500}>\n    {message}\n  </Snackbar>\n);\n\ninterface Props {\n  message: string;\n  isSnackbarVisible: boolean;\n  onDismiss: any;\n}\n","export type SVGProps = Readonly<{\n  width?: number;\n  height?: number;\n  fillOpacity?: number;\n  variant?: SVGVariant;\n}>;\n\nexport type SVGVariant = Readonly<{\n  fillColor: string;\n  bgFillColor?: string;\n}>;\n\nconst byDefault: SVGVariant = {\n  fillColor: '#000',\n  bgFillColor: '#FFF',\n};\n\nexport const Variant = {\n  byDefault,\n};\n","import React from 'react';\nimport PassvaultLogoIcon from './components/PassvaultLogoIcon';\n\nconst Icons: { [key: string]: React.ElementType } = {\n  PassvaultLogoIcon,\n};\n\nexport default Icons;\n","import React from 'react';\nimport { SVGProps, Variant } from 'components/SVGs/SVGProps';\nimport Svg, { Path } from 'react-native-svg';\n\nconst PassvaultLogoIcon = ({\n  width = 1024,\n  height = 1024,\n  variant = Variant.byDefault,\n}: SVGProps) => (\n  <Svg viewBox='0 0 261.48 261.49' width={width} height={height} fill='none'>\n    <Path\n      fill={variant?.fillColor}\n      d='M204,0H57.46A57.46,57.46,0,0,0,0,57.46V204a57.45,57.45,0,0,0,57.46,57.46H204A57.45,57.45,0,0,0,261.48,204V57.46A57.46,57.46,0,0,0,204,0ZM188.34,118.45a38.86,38.86,0,0,1-15.79,15.69q-10.23,5.56-24.2,5.57h-33v71.57H88V196H67.57v-17H88v-17H67.57v-17H88V50.22h61.14q15.39,0,25.21,5.87a36.9,36.9,0,0,1,14.68,16,52.73,52.73,0,0,1,4.86,23.09A47.54,47.54,0,0,1,188.34,118.45Z'\n    />\n    <Path\n      fill={variant?.fillColor}\n      d='M166.37,95.17q0,10.53-6,16.7t-17.72,6.18H115.35V71.88H143.7q11.33,0,17,6T166.37,95.17Z'\n    />\n  </Svg>\n);\n\nexport default PassvaultLogoIcon;\n","import React from 'react';\nimport { IDENTS } from 'components/SVGs/Idents';\nimport { SVGVariant } from 'components/SVGs/SVGProps';\nimport Icons from 'components/SVGs/Icons';\n\nexport type IdentValue = typeof IDENTS[number];\n\ntype Props = Readonly<{\n  name: IdentValue;\n  width?: number;\n  height?: number;\n  fillOpacity?: number;\n  variant?: SVGVariant;\n}>;\n\nconst Icon = ({ name, ...rest }: Props) => {\n  const IconComponent = Icons[name];\n\n  return <IconComponent {...rest} />;\n};\n\nexport default Icon;\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nconst styles = StyleSheet.create({\n  root: {\n    rowGap: 5,\n  },\n\n  input: {\n    outlineStyle: 'none',\n  },\n\n  buttonContainer: {\n    width: '80%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n  },\n\n  button: {\n    backgroundColor: appColors.primary,\n    width: '70%',\n    padding: 10,\n    borderRadius: 40,\n    alignItems: 'center',\n  },\n\n  buttonOutLine: {\n    backgroundColor: 'white',\n    borderColor: appColors.primary,\n    borderWidth: 2,\n  },\n\n  loginImage: {\n    width: 200,\n    height: 200,\n    marginBottom: 20,\n  },\n\n  link: {\n    marginRight: 3,\n  },\n});\n\nexport default styles;\n","import { Platform } from 'react-native';\n\nconst rootWeb =\n  Platform.OS === 'web' &&\n  `self-center\n    w-full\n    sm:w-11/12\n    md:w-1/2\n    lg:w-5/12\n    xl:w-[28%]`;\n\nconst root = `flex-1\n  flex-col\n  p-10\n  justify-center\n  items-center`;\n\nconst inputContainer = `mt-[30px]\n  items-center\n  w-full`;\n\nconst input = `w-10/12\n  bg-white\n  px-[15px]\n  py-2.5\n  rounded-full\n  mt-2.5`;\n\nconst buttonContainer = `w-[80%]\n  flex-col\n  gap-2\n  justify-center\n  items-center\n  mt-5`;\n\nconst buttonText = `text-white\n  font-bold\n  text-base`;\n\nconst buttonOutlineText = `text-pgrey-900\n  font-bold\n  text-base`;\n\nconst linkContainer = `w-[70%]\n  flex-row\n  justify-center\n  items-center\n  mt-5`;\n\nconst linkText = `text-[15px]]`;\n\nexport default {\n  root,\n  rootWeb,\n  inputContainer,\n  input,\n  buttonContainer,\n  buttonText,\n  buttonOutlineText,\n  linkContainer,\n  linkText,\n};\n","import { StyleSheet } from 'react-native';\n\nconst input = StyleSheet.create({\n  outline: {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    outlineStyle: 'none',\n  },\n});\n\nconst shadow = StyleSheet.create({\n  box: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n\n    elevation: 5,\n  },\n});\n\nexport default {\n  input,\n  shadow,\n};\n","import React, { useContext } from 'react';\nimport { Text, TextInput, View, TouchableOpacity, TextInputKeyPressEventData } from 'react-native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { TranslationsContext } from 'contexts/translationsContext';\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport { CustomPopover } from 'components/Popover/popover';\nimport { CustomSnackbar } from 'components/CustomSnackbar/customSnackbar';\nimport { appColors, popoverMessage } from 'utils/constants';\nimport Icon from 'components/SVGs/Icon';\n\nimport stylesRN from 'screens/Auth/styles';\nimport styles from 'screens/Auth/tailwindStyles';\nimport commonStyles from 'utils/commonStyles';\n\nexport const Login = ({\n  navigation,\n  username,\n  isRequesting,\n  snackbarVisible,\n  touchableRef,\n  handlers,\n}: Props) => {\n  const { loginSignupTranslations } = useContext(TranslationsContext);\n  const { handleOnChangeText, handleLogin, handleOnKeyPress, handleOnDismiss } = handlers;\n\n  if (isRequesting) return <LoadingIndicator />;\n\n  return (\n    <View className={[styles.rootWeb, styles.root].join(' ')} style={stylesRN.container}>\n      <Icon\n        name='PassvaultLogoIcon'\n        width={130}\n        height={130}\n        variant={{ fillColor: appColors.primary }}\n      />\n      <View className={styles.inputContainer}>\n        <TextInput\n          className={styles.input}\n          testID='username-login-input'\n          placeholder={loginSignupTranslations.t('usernamePlaceholder')}\n          value={username}\n          style={[stylesRN.input, commonStyles.shadow.box]}\n          onChangeText={handleOnChangeText}\n          onKeyPress={handleOnKeyPress}\n        />\n      </View>\n\n      <View className={styles.buttonContainer}>\n        <TouchableOpacity style={stylesRN.button} testID='login-button' onPress={handleLogin}>\n          <Text className={styles.buttonText}>{loginSignupTranslations.t('loginButton')}</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          testID='signup-button'\n          onPress={() => {\n            navigation.navigate('SignUp');\n          }}\n          style={[stylesRN.button, stylesRN.buttonOutLine]}\n        >\n          <Text className={styles.buttonOutlineText}>\n            {loginSignupTranslations.t('signupButton')}\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      <View className={styles.linkContainer}>\n        <TouchableOpacity\n          style={stylesRN.link}\n          testID='tooltip-item'\n          onPress={() => {\n            navigation.navigate('PasswordGenerator');\n          }}\n        >\n          <Text className={styles.linkText}>{loginSignupTranslations.t('tooltip')} </Text>\n        </TouchableOpacity>\n\n        <CustomPopover touchableRef={touchableRef} />\n      </View>\n\n      <CustomSnackbar\n        message={popoverMessage}\n        isSnackbarVisible={snackbarVisible}\n        onDismiss={handleOnDismiss}\n      />\n    </View>\n  );\n};\n\nexport interface Props {\n  navigation: DrawerNavigationProp<any>;\n  username: string;\n  isRequesting: boolean;\n  snackbarVisible: boolean;\n  touchableRef: any;\n  handlers: {\n    handleOnChangeText: (text: string) => void;\n    handleLogin: () => void;\n    handleOnKeyPress: ({ nativeEvent }: { nativeEvent: TextInputKeyPressEventData }) => void;\n    handleOnDismiss: () => void;\n  };\n}\n","import React, { useEffect } from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport { BackHandler } from 'react-native';\nimport { auth } from 'services/firebase';\nimport { setUserData, unsetUserData } from 'reduxStore/slices/userSlice';\nimport { useDispatch } from 'react-redux';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\n\nconst useLogin = () => {\n  const dispatch = useDispatch();\n  const navigation = useNavigation<NativeStackNavigationProp<any>>();\n\n  const handleBackAction = () => {\n    if (navigation.canGoBack()) {\n      navigation.goBack();\n    } else {\n      BackHandler.exitApp();\n    }\n    return true;\n  };\n\n  useEffect(() => {\n    const subscription = BackHandler.addEventListener('hardwareBackPress', handleBackAction);\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        dispatch(setUserData({ id: user.uid, email: user.email }));\n        navigation.replace('Drawer');\n      } else {\n        dispatch(unsetUserData());\n      }\n    });\n\n    return () => {\n      subscription.remove();\n    };\n  }, [navigation]);\n};\n\nexport default useLogin;\n","import React, { Dispatch, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { TextInputKeyPressEventData } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { selectRequest, setIsRequest } from 'reduxStore/slices/applicationStatusSlice';\nimport { resetSnackbar, selectSnackbarVisible } from 'reduxStore/slices/uiElementsSlice';\nimport { signIn } from 'services/authFirebase';\nimport { Login, Props as RenderProps } from 'screens/Auth/Login/login';\nimport useLogin from 'hooks/useLogin';\n\nconst LoginContainer = ({ children }: { children: typeof Login }) => {\n  const [username, setUsername] = useState<string>('');\n  const navigation: DrawerNavigationProp<any> = useNavigation();\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n\n  const isRequesting: boolean = useSelector(selectRequest);\n  const snackbarVisible: boolean = useSelector(selectSnackbarVisible);\n  const touchableRef = useRef(null);\n\n  useEffect(() => {\n    dispatch(setIsRequest());\n  }, []);\n\n  useLogin();\n\n  const handleLogin = () => {\n    dispatch(setIsRequest());\n    signIn(username);\n  };\n\n  const handleOnKeyPress = ({ nativeEvent }: { nativeEvent: TextInputKeyPressEventData }) => {\n    if (nativeEvent.key === 'Enter') handleLogin();\n  };\n\n  const handleOnChangeText = (text: string) => setUsername(text);\n  const handleOnDismiss = () => dispatch(resetSnackbar());\n\n  const handlers = {\n    handleOnChangeText,\n    handleLogin,\n    handleOnKeyPress,\n    handleOnDismiss,\n  };\n\n  return children({\n    navigation,\n    username,\n    isRequesting,\n    snackbarVisible,\n    touchableRef,\n    handlers,\n  });\n};\n\nexport default () => (\n  <LoginContainer>{(renderProps: RenderProps) => <Login {...renderProps} />}</LoginContainer>\n);\n","import React, { useContext } from 'react';\nimport { View, Text, TextInput, TouchableOpacity, TextInputKeyPressEventData } from 'react-native';\nimport { NavigationProp } from '@react-navigation/native';\nimport { TranslationsContext } from 'contexts/translationsContext';\nimport Icon from 'components/SVGs/Icon';\n\nimport { appColors } from 'utils/constants';\nimport stylesRN from 'screens/Auth/styles';\nimport styles from 'screens/Auth/tailwindStyles';\nimport commonStyles from 'utils/commonStyles';\n\nexport const SignUp = ({ navigation, username, handlers }: Props) => {\n  const { loginSignupTranslations } = useContext(TranslationsContext);\n  const { handleSignUp, handleOnChangeText, handleOnKeyPress } = handlers;\n\n  return (\n    <View className={[styles.rootWeb, styles.root].join(' ')} style={stylesRN.container}>\n      <Icon\n        name='PassvaultLogoIcon'\n        width={130}\n        height={130}\n        variant={{ fillColor: appColors.primary }}\n      />\n      <View className={styles.inputContainer}>\n        <TextInput\n          className={styles.input}\n          placeholder={loginSignupTranslations.t('usernamePlaceholder')}\n          value={username}\n          style={[stylesRN.input, commonStyles.shadow.box]}\n          onChangeText={handleOnChangeText}\n          onKeyPress={handleOnKeyPress}\n        />\n      </View>\n\n      <View style={stylesRN.buttonContainer}>\n        <TouchableOpacity onPress={handleSignUp} style={stylesRN.button}>\n          <Text className={styles.buttonText}>{loginSignupTranslations.t('signupButton')}</Text>\n        </TouchableOpacity>\n      </View>\n\n      <View className={styles.linkContainer}>\n        <TouchableOpacity onPress={() => navigation.navigate('Login')} style={stylesRN.link}>\n          <Text className={styles.linkText}>{loginSignupTranslations.t('goBack2Login')}</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nexport interface Props {\n  navigation: NavigationProp<any>;\n  username: string;\n  handlers: {\n    handleSignUp: () => void;\n    handleOnChangeText: (text: string) => void;\n    handleOnKeyPress: ({ nativeEvent }: { nativeEvent: TextInputKeyPressEventData }) => void;\n  };\n}\n","import React, { Dispatch, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { TextInputKeyPressEventData } from 'react-native';\nimport { NavigationProp, useNavigation } from '@react-navigation/native';\nimport { setUserData, unsetUserData } from 'reduxStore/slices/userSlice';\nimport { auth } from 'services/firebase';\nimport { signUp } from 'services/authFirebase';\nimport { SignUp, Props as RenderProps } from 'screens/Auth/SignUp/signup';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { setIsRequest } from 'reduxStore/slices/applicationStatusSlice';\n\nconst SignupContainer = ({ children }: { children: typeof SignUp }) => {\n  const [username, setUsername] = useState<string>('');\n  const navigation = useNavigation<NavigationProp<any>>();\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n\n  useEffect(\n    () =>\n      auth.onAuthStateChanged((user) => {\n        if (user) {\n          dispatch(setUserData({ id: user.uid, email: user.email }));\n          navigation.navigate('Drawer');\n        } else {\n          dispatch(unsetUserData());\n        }\n      }),\n    [navigation]\n  );\n\n  const handleSignUp = () => {\n    dispatch(setIsRequest());\n    signUp(username);\n  };\n  const handleOnChangeText = (text: string) => setUsername(text);\n  const handleOnKeyPress = ({ nativeEvent }: { nativeEvent: TextInputKeyPressEventData }) => {\n    if (nativeEvent.key === 'Enter') handleSignUp();\n  };\n  const handlers = {\n    handleSignUp,\n    handleOnChangeText,\n    handleOnKeyPress,\n  };\n\n  return children({\n    navigation,\n    username,\n    handlers,\n  });\n};\n\nexport default () => (\n  <SignupContainer>{(renderProps: RenderProps) => <SignUp {...renderProps} />}</SignupContainer>\n);\n","import { Platform } from 'react-native';\n\nconst rootWeb =\n  (Platform.OS === 'web' &&\n    `self-center\n    h-full\n    w-full\n    sm:border-l-2\n    sm:border-r-2\n    sm:border-[#3091e0]\n    sm:w-11/12\n    md:w-1/2\n    lg:w-5/12\n    xl:w-[28%]`) ||\n  '';\n\nconst container = `flex-1\n  flex-col\n  justify-center\n  items-center\n  mt-5\n  mb-[5px]`;\n\nconst cardView = {\n  root: `w-[90%]\n    p-[10px]\n    bg-white\n    rounded-[5px]\n    mb-[15px]\n    justify-center`,\n};\n\nconst password = {\n  root: `flex-col`,\n  inputContainer: `flex\n    flex-row\n    m-[10px]\n    justify-around`,\n  input: `${Platform.OS === 'web' ? 'w-[85%]' : 'w-[75%]'}\n    border-[1px]\n    border-black\n    bg-white\n    px-[15px]\n    ${Platform.OS === 'web' ? 'py-3' : 'py-[7px]'}\n    rounded-[10px]\n    text-left\n    ${Platform.OS === 'ios' ? 'font-courierNew' : 'font-monospace'}\n    font-bold\n    ${Platform.OS === 'web' ? 'text-[16px]' : 'text-[20px]'}`,\n  icons: `ml-[15px]\n    flex\n    flex-row\n    items-center`,\n};\n\nconst configuration = {\n  root: `flex\n    flex-col`,\n  textContainer: `px-2.5\n    ${Platform.OS === 'web' ? 'py-6' : 'py-4'}\n    flex\n    justify-start`,\n  textHeader: `text-[30px]\n    font-bold`,\n  switchToggle: `flex\n    flex-row\n    px-2.5\n    ${Platform.OS === 'web' ? 'py-6' : 'py-1'}\n    items-center`,\n  passwordLengthContainer: `flex\n    flex-col\n    items-start\n    px-2.5\n    ${Platform.OS === 'web' ? 'py-6' : 'py-4'}`,\n  textLabel: `text-[17px]\n    mr-2.5`,\n  lengthSliderContainer: `w-full\n    p-2.5\n    flex\n    flex-row\n    justify-start\n    items-center`,\n  inputLength: `${Platform.OS === 'web' ? 'w-[15%]' : 'w-[20%]'}\n    border-[1px]\n    border-black\n    bg-white\n    px-[7px]\n    ${Platform.OS === 'web' ? 'py-4' : 'py-2.5'}\n    mr-[5px]\n    rounded-[10px]\n    text-center\n    font-bold`,\n};\n\nconst checkbox = {\n  root: `flex\n    flex-row\n    ${Platform.OS === 'web' ? 'py-6' : 'py-2'}\n    justify-around`,\n  section: `flex\n    flex-row\n    items-center`,\n  leftSection: `flex\n    flex-col\n    -ml-5`,\n  rightSection: `flex\n    flex-col`,\n};\n\nexport default {\n  rootWeb,\n  container,\n  cardView,\n  password,\n  configuration,\n  checkbox,\n};\n","import { Platform, StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n  dropdown: {\n    borderRadius: 10,\n    backgroundColor: 'white',\n    paddingHorizontal: 15,\n    paddingVertical: Platform.OS === 'web' ? 12 : 7,\n    outlineStyle: 'none',\n  },\n\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontWeight: 'bold',\n  },\n});\n","import { Platform } from 'react-native';\n\nconst root = `p-2.5`;\n\nconst userInputContainer = `flex\n  flex-col\n  justify-start\n  p-2.5\n  mb-[5px]`;\n\nconst textLabel = `text-[17px]\n  mr-[5px]\n  mb-[5px]`;\n\nconst textInput = `border-[1px]\n  rounded-[10px]\n  px-[15px]\n  ${Platform.OS === 'web' ? 'py-3' : 'py-[7px]'}\n  mb-[5px]`;\n\nconst descriptionLengthIndicator = `text-[12px]\n  self-end`;\n\nexport default {\n  root,\n  userInputContainer,\n  textLabel,\n  textInput,\n  descriptionLengthIndicator,\n};\n","import React, { useContext } from 'react';\nimport { Text, TextInput, View } from 'react-native';\nimport { Picker } from '@react-native-picker/picker';\nimport { Entypo } from '@expo/vector-icons';\n\nimport { TranslationsContext } from 'contexts/translationsContext';\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport { appColors } from 'utils/constants';\n\nimport stylesShared from 'screens/PasswordGenerator/tailwindStyles';\nimport stylesRN from './styles';\nimport styles from './tailwindStyles';\nimport commonStyles from 'utils/commonStyles';\n\nexport const CreateEditPasswordConfigurator = ({\n  description,\n  passwordDescriptionMaxLen,\n  socialMediaPicked,\n  socialMediaList,\n  isCreateMode,\n  createEditButtonLabel,\n  handlers,\n}: Props) => {\n  const { passwordGenTranslations } = useContext(TranslationsContext);\n  const { handleOnPress, setDescription, handleOnPickerChange } = handlers;\n\n  if (socialMediaList.length < 1) return <LoadingIndicator />;\n\n  return (\n    <View\n      className={[stylesShared.cardView.root, styles.root].join(' ')}\n      style={[commonStyles.shadow.box]}\n    >\n      <View className={styles.userInputContainer}>\n        <Text className={styles.textLabel}>{passwordGenTranslations.t('socialMedia')}</Text>\n        <Picker\n          style={stylesRN.dropdown}\n          selectedValue={socialMediaPicked}\n          onValueChange={handleOnPickerChange}\n        >\n          {socialMediaList.map((item: { id: string; name: string }) => {\n            const label = item.name.charAt(0).toUpperCase() + item.name.slice(1);\n            return <Picker.Item key={item.id} label={label} value={item.name} />;\n          })}\n        </Picker>\n      </View>\n\n      <View className={styles.userInputContainer}>\n        <Text className={styles.textLabel}>{passwordGenTranslations.t('description')}:</Text>\n        <TextInput\n          className={styles.textInput}\n          style={commonStyles.input.outline}\n          placeholder={passwordGenTranslations.t('descriptionPlaceholder')}\n          maxLength={passwordDescriptionMaxLen}\n          value={description}\n          onChangeText={setDescription}\n        />\n        <Text className={styles.descriptionLengthIndicator}>\n          {description.length}/{passwordDescriptionMaxLen}\n        </Text>\n      </View>\n\n      <Entypo.Button\n        style={stylesRN.button}\n        name={isCreateMode ? 'save' : 'edit'}\n        size={24}\n        color={appColors.textTint}\n        backgroundColor={appColors.primary}\n        onPress={handleOnPress}\n      >\n        {createEditButtonLabel}\n      </Entypo.Button>\n    </View>\n  );\n};\n\nexport interface Props {\n  description: string;\n  passwordDescriptionMaxLen: number;\n  socialMediaPicked: string;\n  socialMediaList: any;\n  isCreateMode: boolean;\n  createEditButtonLabel: string;\n  handlers: {\n    handleOnPress: () => void;\n    // eslint-disable-next-line no-unused-vars\n    setDescription: (text: string) => void;\n    // eslint-disable-next-line no-unused-vars\n    handleOnPickerChange: (itemValue: string) => void;\n  };\n}\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectIsEditMode, selectPasswordDescriptionPicked } from 'reduxStore/slices/passwordSlice';\nimport { defaultEmptyPasswordDescription } from 'utils/constants';\n\nconst usePasswordDescription = () => {\n  const [description, setDescription] = useState<string>('');\n  const isEditMode = useSelector(selectIsEditMode);\n  const passwordDescriptionPicked = useSelector(selectPasswordDescriptionPicked);\n\n  useEffect(() => {\n    if (isEditMode) {\n      setDescription(\n        passwordDescriptionPicked !== defaultEmptyPasswordDescription\n          ? passwordDescriptionPicked\n          : ''\n      );\n    }\n  }, []);\n\n  return description;\n};\n\nexport default usePasswordDescription;\n","import React, { useEffect } from 'react';\nimport {\n  selectSocialMediaList,\n  selectSocialMediaPicked,\n  setSocialMediaPicked,\n} from 'reduxStore/slices/socialMediaSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsCreateMode } from 'reduxStore/slices/passwordSlice';\n\nconst useSocialMediaPicked = () => {\n  const dispatch = useDispatch();\n  const isCreateMode = useSelector(selectIsCreateMode);\n  const socialMediaList = useSelector(selectSocialMediaList);\n  const socialMediaPicked = useSelector(selectSocialMediaPicked);\n\n  useEffect(() => {\n    if (isCreateMode) {\n      dispatch(setSocialMediaPicked({ socialMediaPicked: socialMediaList[0].name || '' }));\n    }\n  }, []);\n\n  return socialMediaPicked;\n};\n\nexport default useSocialMediaPicked;\n","import {\n  savePassword2Firebase,\n  setPasswordDescriptionPicked,\n  setPasswordIdPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { setModalMessage, setModalTitle, setModalVisible } from 'reduxStore/slices/uiElementsSlice';\n\nconst handleCreateEditPassword = ({\n  dispatch,\n  navigation,\n  data,\n  modalTitle,\n  modalMessage,\n}: Params) => {\n  const { isEditMode, isCreateMode, password, passwordIdPicked, description, socialMedia } = data;\n\n  const payload = {\n    password,\n    description,\n    socialMedia,\n  };\n\n  if (isEditMode) {\n    dispatch(setPasswordDescriptionPicked({ passwordDescriptionPicked: description }));\n    dispatch(setPasswordIdPicked({ passwordIdPicked }));\n    dispatch(setModalTitle({ modalTitle }));\n    dispatch(setModalMessage({ modalMessage }));\n    dispatch(setModalVisible({ modalVisible: true }));\n  } else if (isCreateMode) {\n    dispatch(savePassword2Firebase(payload));\n    navigation.navigate('PasswordList');\n  }\n\n  return true;\n};\n\ninterface Params {\n  // eslint-disable-next-line no-unused-vars\n  dispatch: (arg0: { payload: any; type: string }) => void;\n  // eslint-disable-next-line no-unused-vars\n  navigation: { navigate: (arg0: string) => void };\n  data: {\n    isEditMode: boolean;\n    isCreateMode: boolean;\n    password: string;\n    passwordIdPicked: any;\n    description: string;\n    socialMedia: string;\n  };\n  modalTitle: string;\n  modalMessage: string;\n}\n\nexport default handleCreateEditPassword;\n","import React, { Dispatch, useContext, useEffect, useState } from 'react';\nimport {\n  CreateEditPasswordConfigurator,\n  Props as RenderProps,\n} from 'components/CreateEditPasswordConfigurator/createEditPasswordConfigurator';\nimport { useNavigation } from '@react-navigation/native';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { selectSocialMediaList, setSocialMediaPicked } from 'reduxStore/slices/socialMediaSlice';\nimport {\n  selectIsCreateMode,\n  selectIsEditMode,\n  selectPassword,\n  selectPasswordIdPicked,\n  selectPasswordPickedWasEncrypted,\n} from 'reduxStore/slices/passwordSlice';\nimport usePasswordDescription from 'hooks/usePasswordDescription';\nimport useSocialMediaPicked from 'hooks/useSocialMediaPicked';\nimport handleCreateEditPassword from 'utils/handleCreateEditPassword';\nimport { TranslationsContext } from 'contexts/translationsContext';\n\nconst CreateEditPwdConfigurationContainer = ({ children }: ContainerProps) => {\n  const navigation = useNavigation<DrawerNavigationProp<any> | NativeStackNavigationProp<any>>();\n  const [description, setDescription] = useState<string>('');\n  const { passwordGenTranslations, modalTranslations } = useContext(TranslationsContext);\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n  const passwordDescriptionMaxLen = 60;\n\n  const socialMediaPicked: string = useSocialMediaPicked();\n  const passwordDescriptionPicked: string = usePasswordDescription();\n  const passwordPickedWasEncrypted: boolean = useSelector(selectPasswordPickedWasEncrypted);\n\n  const socialMediaList = useSelector(selectSocialMediaList);\n  const isCreateMode: boolean = useSelector(selectIsCreateMode);\n  const isEditMode: boolean = useSelector(selectIsEditMode);\n  const passwordIdPicked: string = useSelector(selectPasswordIdPicked);\n  const password: string = useSelector(selectPassword);\n\n  const createEditButtonLabel = passwordGenTranslations.t(\n    isCreateMode ? 'createButton' : 'editButton'\n  );\n\n  useEffect(() => {\n    setDescription(passwordDescriptionPicked);\n  }, [passwordDescriptionPicked]);\n\n  const handleOnPress = () => {\n    handleCreateEditPassword({\n      dispatch,\n      navigation,\n      data: {\n        isEditMode,\n        isCreateMode,\n        password,\n        passwordIdPicked,\n        description,\n        socialMedia: socialMediaPicked,\n      },\n      modalTitle: modalTranslations.t('editModalTitle'),\n      modalMessage: modalTranslations.t(\n        !passwordPickedWasEncrypted ? 'editNonEncryptedModalMessage' : 'editModalMessage'\n      ),\n    });\n  };\n\n  const handleOnPickerChange = (itemValue: string) => {\n    dispatch(setSocialMediaPicked({ socialMediaPicked: itemValue }));\n  };\n\n  const handlers = {\n    handleOnPress,\n    setDescription,\n    handleOnPickerChange,\n  };\n\n  return children({\n    description,\n    passwordDescriptionMaxLen,\n    socialMediaPicked,\n    socialMediaList,\n    isCreateMode,\n    createEditButtonLabel,\n    handlers,\n  });\n};\n\ninterface ContainerProps {\n  children: typeof CreateEditPasswordConfigurator;\n}\n\nexport default () => (\n  <CreateEditPwdConfigurationContainer>\n    {(renderProps: RenderProps) => <CreateEditPasswordConfigurator {...renderProps} />}\n  </CreateEditPwdConfigurationContainer>\n);\n","import React from 'react';\n\nimport { Text, TouchableOpacity } from 'react-native';\nimport Checkbox from 'expo-checkbox';\n\nexport const CustomCheckBox = ({ label, isChecked, disabled, color, onPress }: Props) => (\n  <TouchableOpacity\n    disabled={disabled}\n    style={{ flexDirection: 'row', alignItems: 'center' }}\n    onPress={onPress}\n  >\n    <Checkbox\n      style={{ margin: 8 }}\n      value={isChecked}\n      disabled={disabled}\n      color={isChecked ? color : undefined}\n      onValueChange={onPress}\n    />\n    <Text style={{ fontSize: 14, opacity: !disabled ? 1 : 0.3 }}>{label}</Text>\n  </TouchableOpacity>\n);\n\nconst defaultProps = {\n  disabled: false,\n};\n\ninterface Props {\n  label: string;\n  isChecked: boolean;\n  disabled?: boolean;\n  color: string;\n  onPress: any;\n}\n\nCustomCheckBox.defaultProps = defaultProps;\n","import { generatePassword, resetPasswordGeneratorState } from 'reduxStore/slices/passwordSlice';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport { unsetSocialMediaPicked } from 'reduxStore/slices/socialMediaSlice';\n\n/* Password Generator utils */\nexport const resetConfigurationState = (dispatch: any) => {\n  dispatch(resetPasswordGeneratorState());\n  dispatch(unsetSocialMediaPicked());\n};\n\nexport const handleGeneratePassword = (passwordFromState: string, dispatch: any) => {\n  if (!passwordFromState) {\n    dispatch(generatePassword());\n  }\n};\n\nexport const showAuthenticatedMessage = (\n  userId: string,\n  isCreatedMode: boolean,\n  message: string\n) => {\n  if (userId && isCreatedMode) {\n    showInfoMessage(message);\n  }\n};\n\n/* Password Generator Configurator utils */\nexport const handleLeftCheckboxes = (\n  dispatch: any,\n  setCheck1: any,\n  setCheck2: any,\n  selector1: string,\n  selector2: string,\n  value: boolean,\n  handleOtherCheckboxes: any\n) => {\n  const payloadString1 = `{ \"${selector1}\": ${value} }`;\n  const payloadString2 = `{ \"${selector2}\": ${!value} }`;\n  const payload1 = JSON.parse(payloadString1);\n  const payload2 = JSON.parse(payloadString2);\n\n  dispatch(setCheck1(payload1));\n  dispatch(setCheck2(payload2));\n\n  handleOtherCheckboxes();\n};\n\nexport const handleRightCheckboxes = (\n  value: boolean,\n  checkbox1: boolean,\n  checkbox2: boolean,\n  checkbox3: boolean,\n  dispatch: any,\n  configuratorAction: any,\n  payload: object\n) => {\n  if (checkbox1 || checkbox2 || checkbox3) {\n    dispatch(configuratorAction(payload));\n  }\n};\n\nexport const updateConfiguratorStateAndGeneratePassword = (dispatch: any) => {\n  dispatch(generatePassword());\n};\n","import React, { Dispatch, useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { View } from 'react-native';\n\nimport { TranslationsContext } from 'contexts/translationsContext';\nimport { CustomCheckBox } from 'components/PasswordConfigurator/CustomCheckBox/customCheckBox';\nimport {\n  setIsEasy2Read,\n  setIsAllChar,\n  setIsUpperCase,\n  setIsLowerCase,\n  setIsNumbers,\n  setIsSymbols,\n  setIsUpperCaseAndIsLowerCase,\n  setIsNumbersAndIsSymbols,\n  selectIsEasy2Read,\n  selectIsAllChar,\n  selectIsUpperCase,\n  selectIsLowerCase,\n  selectIsNumbers,\n  selectIsSymbols,\n} from 'reduxStore/slices/configuratorSlice';\nimport { generatePassword } from 'reduxStore/slices/passwordSlice';\n\nimport {\n  handleLeftCheckboxes,\n  handleRightCheckboxes,\n  updateConfiguratorStateAndGeneratePassword,\n} from 'utils/configuratorUtils';\nimport { appColors } from 'utils/constants';\n\nimport styles from 'screens/PasswordGenerator/tailwindStyles';\n\n/* Reference for checkbox usage: [\n  https://docs.expo.dev/versions/latest/sdk/checkbox/,\n  https://snack.expo.dev/\n]\n */\n\ninterface Props {\n  switchEnabled: boolean;\n}\n\ninterface Checkbox {\n  label: string;\n  isChecked: boolean;\n  disabled?: boolean;\n  onPress: () => void;\n}\n\nexport const PasswordConfigurator = ({ switchEnabled }: Props) => {\n  const { passwordGenTranslations } = useContext(TranslationsContext);\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n\n  const isEasy2Read: boolean = useSelector(selectIsEasy2Read);\n  const isAllChar: boolean = useSelector(selectIsAllChar);\n\n  const isUpperCase: boolean = useSelector(selectIsUpperCase);\n  const isLowerCase: boolean = useSelector(selectIsLowerCase);\n  const isNumbers: boolean = useSelector(selectIsNumbers);\n  const isSymbols: boolean = useSelector(selectIsSymbols);\n\n  const handleRightCheckboxesGivenLeftCheckboxes = () => {\n    dispatch(setIsUpperCaseAndIsLowerCase({ isUpperCase: true, isLowerCase: true }));\n\n    if (!isEasy2Read || isAllChar) {\n      dispatch(setIsNumbersAndIsSymbols({ isNumbers: false, isSymbols: false }));\n    } else {\n      dispatch(setIsNumbersAndIsSymbols({ isNumbers: true, isSymbols: true }));\n    }\n\n    dispatch(generatePassword());\n  };\n\n  const leftCheckboxes: Array<Checkbox> = [\n    {\n      label: passwordGenTranslations.t('checkboxEasy2Read'),\n      isChecked: isEasy2Read,\n      onPress: () => {\n        handleLeftCheckboxes(\n          dispatch,\n          setIsEasy2Read,\n          setIsAllChar,\n          'isEasy2Read',\n          'isAllChar',\n          !isEasy2Read,\n          handleRightCheckboxesGivenLeftCheckboxes\n        );\n      },\n    },\n    {\n      label: passwordGenTranslations.t('checkboxAllChar'),\n      isChecked: isAllChar,\n      onPress: () => {\n        handleLeftCheckboxes(\n          dispatch,\n          setIsAllChar,\n          setIsEasy2Read,\n          'isAllChar',\n          'isEasy2Read',\n          !isAllChar,\n          handleRightCheckboxesGivenLeftCheckboxes\n        );\n      },\n    },\n  ];\n\n  const rightCheckboxes: Array<Checkbox> = [\n    {\n      label: passwordGenTranslations.t('checkboxUppercase'),\n      isChecked: isUpperCase,\n      onPress: () => {\n        handleRightCheckboxes(\n          !isUpperCase,\n          isLowerCase,\n          isNumbers,\n          isSymbols,\n          dispatch,\n          setIsUpperCase,\n          { isUpperCase: !isUpperCase }\n        );\n      },\n    },\n    {\n      label: passwordGenTranslations.t('checkboxLowercase'),\n      isChecked: isLowerCase,\n      onPress: () => {\n        handleRightCheckboxes(\n          !isLowerCase,\n          isUpperCase,\n          isNumbers,\n          isSymbols,\n          dispatch,\n          setIsLowerCase,\n          { isLowerCase: !isLowerCase }\n        );\n      },\n    },\n    {\n      label: passwordGenTranslations.t('checkboxNumbers'),\n      isChecked: isNumbers,\n      disabled: !isAllChar || switchEnabled,\n      onPress: () => {\n        handleRightCheckboxes(\n          !isNumbers,\n          isUpperCase,\n          isLowerCase,\n          isSymbols,\n          dispatch,\n          setIsNumbers,\n          {\n            isNumbers: !isNumbers,\n          }\n        );\n      },\n    },\n    {\n      label: passwordGenTranslations.t('checkboxSymbols'),\n      isChecked: isSymbols,\n      disabled: !isAllChar || switchEnabled,\n      onPress: () => {\n        handleRightCheckboxes(\n          !isSymbols,\n          isUpperCase,\n          isLowerCase,\n          isNumbers,\n          dispatch,\n          setIsSymbols,\n          {\n            isSymbols: !isSymbols,\n          }\n        );\n      },\n    },\n  ];\n\n  return (\n    <View className={styles.checkbox.root}>\n      {/* Left checkboxes */}\n      {/*<View>*/}\n      <View className={styles.checkbox.leftSection}>\n        {leftCheckboxes.map(({ label, isChecked, onPress }, index) => (\n          <View key={index} className={styles.checkbox.section}>\n            <CustomCheckBox\n              label={label}\n              isChecked={isChecked}\n              disabled={switchEnabled}\n              color={appColors.primary}\n              onPress={onPress}\n            />\n          </View>\n        ))}\n      </View>\n\n      {/* Right checkboxes */}\n      {/*<View>*/}\n      <View className={styles.checkbox.rightSection}>\n        {rightCheckboxes.map(({ label, isChecked, disabled, onPress }, index) => (\n          <View key={index} className={styles.checkbox.section}>\n            <CustomCheckBox\n              label={label}\n              isChecked={isChecked}\n              disabled={disabled || switchEnabled}\n              color={appColors.primary}\n              onPress={() => {\n                onPress();\n                updateConfiguratorStateAndGeneratePassword(dispatch);\n              }}\n            />\n          </View>\n        ))}\n      </View>\n    </View>\n  );\n};\n","import { Platform } from 'react-native';\n\nconst root = `flex\n  flex-col\n  ${Platform.OS === 'web' ? 'w-[85%]' : 'w-[80%]'}\n  p-2.5`;\n\nexport default {\n  root,\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { generatePassword, selectPasswordPicked, setLength } from 'reduxStore/slices/passwordSlice';\n\nimport { View } from 'react-native';\nimport Slider from '@react-native-community/slider';\n\nimport { appColors } from 'utils/constants';\nimport styles from './tailwindStyles';\n\n// Reference: https://youtu.be/MwSudWtT7ps?t=271\n\nconst SliderContainer = ({ switchEnabled, defaultValue }: Props) => {\n  const [value, setValue] = useState(defaultValue);\n  const passwordPicked = useSelector(selectPasswordPicked);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!Number.isNaN(value) && !passwordPicked && !switchEnabled) {\n      // TODO: This flow needs to be updated in future\n      /* If there was a password picked for the edit flow\n       * a new password won't be generated.\n       * */\n      dispatch(setLength({ length: value }));\n      dispatch(generatePassword());\n    }\n  }, [value]);\n\n  return (\n    <View className={styles.root}>\n      <Slider\n        disabled={switchEnabled}\n        step={1}\n        value={switchEnabled ? 0 : defaultValue}\n        minimumValue={switchEnabled ? 0 : 6}\n        maximumValue={switchEnabled ? 1 : 50}\n        minimumTrackTintColor={switchEnabled ? appColors.disabledColorSlider : appColors.primary}\n        maximumTrackTintColor={\n          switchEnabled ? appColors.disabledColorSlider : appColors.maximumTintColorSlider\n        }\n        thumbTintColor={switchEnabled ? appColors.disabledColorSlider : appColors.primary}\n        onValueChange={setValue}\n      />\n    </View>\n  );\n};\n\nexport default SliderContainer;\n\ninterface Props {\n  switchEnabled: boolean;\n  defaultValue: number;\n}\n","import React, { useContext } from 'react';\nimport { View, Text, TextInput, TouchableOpacity, ScrollView } from 'react-native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { Divider, Switch } from 'react-native-paper';\nimport { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\nimport { TranslationsContext } from 'contexts/translationsContext';\nimport CreateEditPasswordConfigurator from 'components/CreateEditPasswordConfigurator/createEditPwdConfigurationContainer';\nimport { PasswordConfigurator } from 'components/PasswordConfigurator/passwordConfigurator';\nimport { CustomSnackbar } from 'components/CustomSnackbar/customSnackbar';\nimport SliderContainer from 'components/SliderContainer/sliderContainer';\nimport { appColors } from 'utils/constants';\n\nimport commonStyles from 'utils/commonStyles';\nimport styles from './tailwindStyles';\n\nexport const PasswordGenerator = ({\n  navigation,\n  scrollViewRef,\n  switchEnabled,\n  mPassword,\n  snackbarObj,\n  passwordFromState,\n  isCreateMode,\n  isEditMode,\n  handlers,\n}: Props) => {\n  const { passwordGenTranslations } = useContext(TranslationsContext);\n  const { snackbarMessage, snackbarVisible } = snackbarObj;\n  const {\n    handleCopyButton,\n    handleRefreshButton,\n    handleOnDismissSnackbar,\n    handleOnChangePassword,\n    handleOnBlurPassword,\n    handleSwitch,\n  } = handlers;\n\n  return (\n    <View className={styles.rootWeb}>\n      <ScrollView ref={scrollViewRef}>\n        <View className={styles.container}>\n          <View\n            className={[styles.cardView.root, styles.password.root].join(' ')}\n            style={[commonStyles.shadow.box]}\n          >\n            <View className={styles.password.inputContainer}>\n              <TextInput\n                className={styles.password.input}\n                style={commonStyles.input.outline}\n                showSoftInputOnFocus={switchEnabled}\n                caretHidden={!switchEnabled}\n                value={switchEnabled ? mPassword : passwordFromState}\n                onChangeText={handleOnChangePassword}\n                onBlur={handleOnBlurPassword}\n              />\n              <View className={styles.password.icons}>\n                <TouchableOpacity onPress={handleCopyButton}>\n                  <MaterialCommunityIcons\n                    style={{ marginRight: 10 }}\n                    name='content-copy'\n                    size={24}\n                    color='grey'\n                  />\n                </TouchableOpacity>\n                <TouchableOpacity onPress={handleRefreshButton}>\n                  <Ionicons name='reload' size={24} color='grey' />\n                </TouchableOpacity>\n              </View>\n            </View>\n          </View>\n\n          <View\n            className={[styles.cardView.root, styles.configuration.root].join(' ')}\n            style={commonStyles.shadow.box}\n          >\n            <View className={styles.configuration.textContainer}>\n              <Text className={styles.configuration.textHeader}>\n                {passwordGenTranslations.t('heading')}\n              </Text>\n            </View>\n\n            <Divider style={{ backgroundColor: 'grey' }} />\n\n            {isCreateMode && (\n              <>\n                <View className={styles.configuration.switchToggle}>\n                  <Text className={styles.configuration.textLabel}>\n                    {passwordGenTranslations.t('placeOwnPassword')}\n                  </Text>\n                  <Switch\n                    value={switchEnabled}\n                    onValueChange={handleSwitch}\n                    color={appColors.primary}\n                  />\n                </View>\n\n                <Divider style={{ backgroundColor: 'grey' }} />\n              </>\n            )}\n\n            <View className={styles.configuration.passwordLengthContainer}>\n              <Text className={styles.configuration.textLabel}>\n                {passwordGenTranslations.t('passwordLength')}\n              </Text>\n              <View className={styles.configuration.lengthSliderContainer}>\n                <TextInput\n                  className={styles.configuration.inputLength}\n                  style={commonStyles.input.outline}\n                  showSoftInputOnFocus={false}\n                  caretHidden\n                  keyboardType='numeric'\n                  value={passwordFromState.length.toString()}\n                />\n                <SliderContainer\n                  switchEnabled={switchEnabled}\n                  defaultValue={isEditMode ? passwordFromState.length : 10}\n                />\n              </View>\n            </View>\n\n            <Divider style={{ backgroundColor: 'grey' }} />\n\n            <PasswordConfigurator switchEnabled={switchEnabled} />\n          </View>\n\n          {(isCreateMode || isEditMode) && <CreateEditPasswordConfigurator />}\n        </View>\n      </ScrollView>\n\n      <CustomSnackbar\n        message={snackbarMessage}\n        isSnackbarVisible={snackbarVisible}\n        onDismiss={handleOnDismissSnackbar}\n      />\n    </View>\n  );\n};\n\nexport interface Props {\n  navigation: DrawerNavigationProp<any> | NativeStackNavigationProp<any>;\n  scrollViewRef: React.RefObject<ScrollView>;\n  switchEnabled: boolean;\n  mPassword: string;\n  snackbarObj: {\n    snackbarMessage: string;\n    snackbarVisible: boolean;\n  };\n  passwordFromState: string;\n  isCreateMode: boolean;\n  isEditMode: boolean;\n  handlers: {\n    handleCopyButton: () => void;\n    handleRefreshButton: () => void;\n    handleOnDismissSnackbar: () => void;\n    handleOnChangePassword: (text: string) => void;\n    handleOnBlurPassword: () => void;\n    handleSwitch: () => void;\n  };\n}\n","import React, { Dispatch, useContext, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { Platform } from 'react-native';\nimport { resetConfigurationState, showAuthenticatedMessage } from 'utils/configuratorUtils';\nimport { setSnackbarMessage, setSnackbarVisible } from 'reduxStore/slices/uiElementsSlice';\nimport {\n  resetPasswordPicked,\n  selectIsCreateMode,\n  selectIsEditMode,\n} from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { TranslationsContext } from 'contexts/translationsContext';\n\nconst useGeneratorMessage = () => {\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n  const userId: string = useSelector(selectUserId);\n  const isCreateMode: boolean = useSelector(selectIsCreateMode);\n  const isEditMode: boolean = useSelector(selectIsEditMode);\n  const { infoMessagesTranslations } = useContext(TranslationsContext);\n\n  useEffect(() => {\n    if (Platform.OS === 'android') {\n      showAuthenticatedMessage(\n        userId,\n        isCreateMode,\n        infoMessagesTranslations.t('about2CreatePassword')\n      );\n    } else {\n      dispatch(\n        setSnackbarMessage({ snackbarMessage: infoMessagesTranslations.t('about2CreatePassword') })\n      );\n      dispatch(setSnackbarVisible({ snackbarVisible: true }));\n    }\n\n    (() => isEditMode && dispatch(resetPasswordPicked()))();\n\n    return () => {\n      resetConfigurationState(dispatch);\n    };\n  }, []);\n\n  return true;\n};\n\nexport default useGeneratorMessage;\n","import React, { useContext, useLayoutEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectIsEditMode } from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { useNavigation } from '@react-navigation/native';\nimport { TranslationsContext } from '../contexts/translationsContext';\n\nconst useGeneratorPageTitle = () => {\n  const navigation = useNavigation();\n  const userId: string = useSelector(selectUserId);\n  const isEditMode: boolean = useSelector(selectIsEditMode);\n  const { passwordGenTranslations } = useContext(TranslationsContext);\n\n  const screenTitle = isEditMode\n    ? passwordGenTranslations.t('editTitle')\n    : `${passwordGenTranslations.t('generatorTitle')} ${\n        !userId ? passwordGenTranslations.t('isEdit') : ''\n      }`;\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      title: screenTitle,\n    });\n  });\n\n  return true;\n};\n\nexport default useGeneratorPageTitle;\n","import React, { Dispatch, useContext, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { Clipboard, Platform, ScrollView } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport {\n  resetSnackbar,\n  selectSnackbarMessage,\n  selectSnackbarVisible,\n  setModalMessage,\n  setModalTitle,\n  setModalVisible,\n  setSnackbarMessage,\n  setSnackbarVisible,\n} from 'reduxStore/slices/uiElementsSlice';\nimport {\n  generatePassword,\n  selectIsCreateMode,\n  selectIsEditMode,\n  selectPassword,\n  selectPasswordIdPicked,\n  selectPasswordPickedWasEncrypted,\n  setPassword,\n} from 'reduxStore/slices/passwordSlice';\nimport {\n  PasswordGenerator,\n  Props as RenderProps,\n} from 'screens/PasswordGenerator/passwordGenerator';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport useGeneratorMessage from 'hooks/useGeneratorMessage';\nimport useGeneratorPageTitle from 'hooks/useGeneratorPageTitle';\nimport { TranslationsContext } from 'contexts/translationsContext';\n\nconst PasswordGeneratorContainer = ({ children }: { children: typeof PasswordGenerator }) => {\n  const scrollViewRef = useRef<ScrollView>(null);\n  const [switchEnabled, setSwitchEnabled] = useState<boolean>(false);\n  const [mPassword, mSetPassword] = useState<string>('');\n  const { infoMessagesTranslations, modalTranslations } = useContext(TranslationsContext);\n  const navigation: DrawerNavigationProp<any> | NativeStackNavigationProp<any> = useNavigation();\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n\n  const snackbarMessage: string = useSelector(selectSnackbarMessage);\n  const snackbarVisible: boolean = useSelector(selectSnackbarVisible);\n  const passwordIdPicked: string = useSelector(selectPasswordIdPicked);\n  const passwordFromState: string = useSelector(selectPassword);\n  const passwordPickedWasEncrypted: boolean = useSelector(selectPasswordPickedWasEncrypted);\n  const isCreateMode: boolean = useSelector(selectIsCreateMode);\n  const isEditMode: boolean = useSelector(selectIsEditMode);\n\n  const handleCopyButton = () => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(infoMessagesTranslations.t('copied2Clipboard'));\n    } else {\n      dispatch(\n        setSnackbarMessage({ snackbarMessage: infoMessagesTranslations.t('copied2Clipboard') })\n      );\n      dispatch(setSnackbarVisible({ snackbarVisible: true }));\n    }\n\n    Clipboard.setString(passwordFromState);\n  };\n\n  const handleRefreshButton = () => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(infoMessagesTranslations.t('newPassword'));\n    } else {\n      dispatch(setSnackbarMessage({ snackbarMessage: infoMessagesTranslations.t('newPassword') }));\n      dispatch(setSnackbarVisible({ snackbarVisible: true }));\n    }\n\n    dispatch(generatePassword());\n  };\n\n  const handleOnDismissSnackbar = () => {\n    dispatch(resetSnackbar());\n  };\n\n  const handleOnChangePassword = (text: string) => {\n    if (switchEnabled) {\n      mSetPassword(text);\n    }\n  };\n\n  const handleOnBlurPassword = () => {\n    if (switchEnabled) {\n      dispatch(setPassword({ password: mPassword }));\n    }\n  };\n\n  const handleSwitch = () => {\n    setSwitchEnabled(!switchEnabled);\n    if (switchEnabled) {\n      mSetPassword('');\n      dispatch(generatePassword());\n    }\n  };\n\n  useEffect(() => {\n    if (!passwordPickedWasEncrypted && isEditMode) {\n      if (Platform.OS === 'android') {\n        alert(modalTranslations.t('encryptPwdMessage'));\n      } else {\n        dispatch(setModalTitle({ modalTitle: modalTranslations.t('modalTitle') }));\n        dispatch(setModalMessage({ modalMessage: modalTranslations.t('encryptPwdMessage') }));\n        dispatch(setModalVisible({ modalVisible: true }));\n      }\n    }\n  }, []);\n\n  useGeneratorMessage();\n  useGeneratorPageTitle();\n\n  const snackbarObj = { snackbarMessage, snackbarVisible };\n  const handlers = {\n    handleCopyButton,\n    handleRefreshButton,\n    handleOnDismissSnackbar,\n    handleOnChangePassword,\n    handleOnBlurPassword,\n    handleSwitch,\n  };\n\n  return children({\n    navigation,\n    scrollViewRef,\n    switchEnabled,\n    mPassword,\n    snackbarObj,\n    passwordFromState,\n    isCreateMode,\n    isEditMode,\n    handlers,\n  });\n};\n\nexport default () => (\n  <PasswordGeneratorContainer>\n    {(renderProps: RenderProps) => <PasswordGenerator {...renderProps} />}\n  </PasswordGeneratorContainer>\n);\n","import React from 'react';\nimport { Image, ImageSourcePropType, StyleProp } from 'react-native';\n\nimport { AntDesign } from '@expo/vector-icons';\n\nimport {\n  imageSourceRetriever,\n  socialMediaIcon,\n  socialMediaIconColor,\n} from 'utils/imageDataRetriever';\n\nexport const SocialMediaIcon = ({ className, style, socialMedia }: Props) => {\n  if (['amazon', 'discord', 'google', 'slack', 'okta', 'outlook', 'twitch'].includes(socialMedia)) {\n    const imageSource = imageSourceRetriever(socialMedia);\n\n    return (\n      <Image className={className} style={style} source={imageSource as ImageSourcePropType} />\n    );\n  }\n  const getSocialMedia: any = socialMediaIcon(socialMedia);\n  const socialMediaColor = socialMediaIconColor(socialMedia);\n\n  return (\n    <AntDesign\n      className={className}\n      style={style}\n      name={getSocialMedia}\n      size={24}\n      color={socialMediaColor}\n    />\n  );\n};\n\ninterface Props {\n  className: string;\n  style?: StyleProp<never>;\n  socialMedia: string;\n}\n","interface ObjectCondition {\n  [key: string]: string;\n}\n\nexport const imageSourceRetriever = (socialMedia: string) => {\n  const images: ObjectCondition = {\n    amazon: require('assets/amazon.png'),\n    discord: require('assets/discord.png'),\n    google: require('assets/google.png'),\n    slack: require('assets/slack.png'),\n    okta: require('assets/okta.png'),\n    outlook: require('assets/outlook.png'),\n    twitch: require('assets/twitch.png'),\n    '': '',\n  };\n\n  return images[socialMedia];\n};\n\nexport const socialMediaIcon = (socialMedia: string) => {\n  const images: ObjectCondition = {\n    facebook: 'facebook-square',\n    linkedin: 'linkedin-square',\n    other: 'questioncircle',\n    '': socialMedia,\n  };\n\n  return images[socialMedia] || socialMedia;\n};\n\nexport const socialMediaIconColor = (socialMedia: string) => {\n  const colors: ObjectCondition = {\n    facebook: '#4267B2',\n    twitter: '#00ACEE',\n    linkedin: '#2867B2',\n  };\n\n  return colors[socialMedia] || 'black';\n};\n","const menuItemRoot = `absolute\n  flex\n  flex-col\n  w-24\n  px-4\n  py-2\n  -top-7\n  right-8\n  bg-white`;\n\nconst menuItem = `w-full\n  flex\n  flex-row\n  m-1\n  justify-between\n  items-center`;\n\nexport default {\n  menuItemRoot,\n  menuItem,\n};\n","import React, { useRef, useState } from 'react';\nimport { Pressable, TouchableOpacity, View } from 'react-native';\nimport OutsidePressHandler from 'react-native-outside-press';\nimport { Entypo } from '@expo/vector-icons';\n\nimport commonStyles from 'utils/commonStyles';\nimport styles from './tailwindStyles';\n\nexport const MenuItem = ({ onPress, children }: MenuItemsProps) => (\n  <TouchableOpacity onPress={onPress}>\n    <View className={styles.menuItem}>{children}</View>\n  </TouchableOpacity>\n);\n\ninterface MenuItemsProps {\n  onPress: () => void;\n  children: React.ReactNode;\n}\n\nexport default ({ children }: Props) => {\n  const [visible, setVisible] = useState(false);\n  const ref = useRef(null);\n\n  const handleOnOutsidePress = () => visible && setVisible(false);\n\n  return (\n    <OutsidePressHandler onOutsidePress={handleOnOutsidePress} disabled={!visible}>\n      <Pressable\n        style={{\n          position: 'relative',\n        }}\n        onPress={() => setVisible(!visible)}\n      >\n        <Entypo name='dots-three-vertical' size={18} color='grey' />\n        {visible && (\n          <View ref={ref} className={styles.menuItemRoot} style={commonStyles.shadow.box}>\n            {children}\n          </View>\n        )}\n      </Pressable>\n    </OutsidePressHandler>\n  );\n};\n\ninterface Props {\n  children: React.ReactNode;\n}\n","import { Platform } from 'react-native';\n\nconst item = {\n  root: `flex\n    flex-row\n    bg-white\n    p-2.5\n    rounded-[5px]\n    items-center\n    justify-between\n    mx-[3px]\n    mb-2.5`,\n  socialIconAndPasswordInfo: `flex\n    flex-row\n    flex-1\n    w-1/2\n    items-center`,\n  passwordAndDescription: `flex\n    flex-col\n    w-[81%]\n    px-[5px]`,\n  passwordTitleWithCryptIcon: `flex\n    flex-row\n    gap-2\n    items-center\n    mb-1`,\n  descriptionTextLabel: `text-[13px]\n    mb-[5px]`,\n  passwordInput: `${Platform.OS === 'ios' ? 'font-courierNew' : 'font-monospace'}\n    font-bold\n    ${Platform.OS === 'web' ? 'text-[15px]' : 'text-[14px]'}`,\n};\n\nconst icons = {\n  root: `flex\n    flex-row\n    gap-2.5\n    items-center\n    justify-around`,\n  socialMedia: `w-6\n    h-6\n    mr-2.5`,\n};\n\nexport default { item, icons };\n","import React from 'react';\nimport { TouchableOpacity, View, Text } from 'react-native';\nimport { Entypo, FontAwesome, Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\nimport MenuList, { MenuItem } from 'components/MenuList';\nimport { appColors } from 'utils/constants';\nimport styles from 'components/PasswordItem/tailwindStyles';\n\nexport const PasswordIcons = ({ passwordVisible, handlers }: Props) => {\n  const { handleShowHidePassword, handleCopyButton, handleEditButton, handleDeleteButton } =\n    handlers;\n\n  return (\n    <View className={styles.icons.root}>\n      <TouchableOpacity onPress={handleShowHidePassword}>\n        <Entypo name={passwordVisible ? 'eye' : 'eye-with-line'} size={18} color='grey' />\n      </TouchableOpacity>\n\n      <TouchableOpacity onPress={handleCopyButton}>\n        <MaterialCommunityIcons name='content-copy' size={18} color='grey' />\n      </TouchableOpacity>\n\n      <MenuList>\n        <MenuItem onPress={handleEditButton}>\n          <Text>Edit </Text>\n          <FontAwesome name='edit' size={18} color='grey' />\n        </MenuItem>\n        <MenuItem onPress={handleDeleteButton}>\n          <Text>Delete</Text>\n          <Ionicons name='trash' size={18} color={appColors.red} />\n        </MenuItem>\n      </MenuList>\n    </View>\n  );\n};\n\nexport interface Props {\n  passwordVisible: boolean;\n  handlers: {\n    handleShowHidePassword: () => void;\n    handleCopyButton: () => void;\n    handleEditButton: () => void;\n    handleDeleteButton: () => void;\n  };\n}\n","import React, { Dispatch, useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { Clipboard, Platform } from 'react-native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\n\nimport { TranslationsContext } from 'contexts/translationsContext';\nimport {\n  selectPasswords,\n  setIsDeleteMode,\n  setIsEditMode,\n  setPassword,\n  setPasswordDescriptionPicked,\n  setPasswordIdPicked,\n  setPasswordPicked,\n  setPasswordPickedWasEncrypted,\n} from 'reduxStore/slices/passwordSlice';\nimport {\n  setModalMessage,\n  setModalTitle,\n  setModalVisible,\n  setSnackbarMessage,\n  setSnackbarVisible,\n} from 'reduxStore/slices/uiElementsSlice';\nimport { setSocialMediaPicked } from 'reduxStore/slices/socialMediaSlice';\nimport { PasswordI } from 'utils/constants';\nimport { showInfoMessage } from 'utils/infoMessages';\n\nimport { PasswordIcons } from './passwordIcons';\nimport { Props as RenderProps } from './passwordIcons';\n\nconst PasswordIconsContainer = ({\n  passwordId,\n  socialMedia,\n  description,\n  passwordGenerated,\n  passwordVisible,\n  setPasswordVisible,\n  navigation,\n  children,\n}: ContainerProps) => {\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n  const { infoMessagesTranslations, modalTranslations } = useContext(TranslationsContext);\n  const mSocialMedia: string = socialMedia.charAt(0).toUpperCase() + socialMedia.slice(1);\n  const passwords: Array<PasswordI> = useSelector(selectPasswords);\n\n  const handleShowHidePassword = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  const handleCopyButton = () => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(infoMessagesTranslations.t('copied2Clipboard'));\n    } else {\n      dispatch(\n        setSnackbarMessage({ snackbarMessage: infoMessagesTranslations.t('copied2Clipboard') })\n      );\n      dispatch(setSnackbarVisible({ snackbarVisible: true }));\n    }\n\n    Clipboard.setString(passwordGenerated);\n  };\n\n  const handleEditButton = () => {\n    passwords.map(({ id, pwdWasCorrectlyEncrypted }) => {\n      if (id === passwordId) {\n        dispatch(\n          setPasswordPickedWasEncrypted({ passwordPickedWasEncrypted: pwdWasCorrectlyEncrypted })\n        );\n      }\n    });\n\n    dispatch(setIsEditMode({ isEditMode: true }));\n    dispatch(setPasswordIdPicked({ passwordIdPicked: passwordId }));\n    dispatch(setPasswordPicked({ passwordPicked: passwordGenerated }));\n    dispatch(setPassword({ password: passwordGenerated }));\n    dispatch(setPasswordDescriptionPicked({ passwordDescriptionPicked: description }));\n    dispatch(setSocialMediaPicked({ socialMediaPicked: socialMedia }));\n    navigation.navigate('PasswordGenerator');\n  };\n\n  const handleDeleteButton = () => {\n    dispatch(setIsDeleteMode({ isDeleteMode: true }));\n    dispatch(setPasswordIdPicked({ passwordIdPicked: passwordId }));\n    dispatch(setModalTitle({ modalTitle: modalTranslations.t('deleteModalTitle') }));\n    dispatch(\n      setModalMessage({\n        modalMessage: modalTranslations.t('deleteModalMessage').replace('PLATFORM', mSocialMedia),\n      })\n    );\n    dispatch(setModalVisible({ modalVisible: true }));\n  };\n\n  return children({\n    passwordVisible,\n    handlers: { handleShowHidePassword, handleCopyButton, handleEditButton, handleDeleteButton },\n  });\n};\n\nexport default (props: InitialProps) => (\n  <PasswordIconsContainer {...props}>\n    {(renderProps: RenderProps) => <PasswordIcons {...renderProps} />}\n  </PasswordIconsContainer>\n);\n\ninterface InitialProps {\n  passwordId: string;\n  socialMedia: string;\n  description: string;\n  passwordGenerated: string;\n  passwordVisible: boolean;\n  setPasswordVisible: any;\n  navigation: DrawerNavigationProp<any>;\n}\n\ninterface ContainerProps extends InitialProps {\n  children: typeof PasswordIcons;\n}\n","import React, { useState } from 'react';\nimport { View, Text, TextInput } from 'react-native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nimport { SocialMediaIcon } from 'components/SocialMediaIcon/socialMediaIcon';\nimport PasswordIcons from 'components/PasswordIcons/PasswordIconsContainer';\nimport { appColors } from 'utils/constants';\n\nimport commonStyles from 'utils/commonStyles';\nimport styles from './tailwindStyles';\n\nexport const PasswordItem = ({\n  passwordId,\n  passwordGenerated,\n  socialMedia,\n  description,\n  pwdWasCorrectlyEncrypted,\n  navigation,\n}: Props) => {\n  const [passwordVisible, setPasswordVisible] = useState(false);\n\n  return (\n    <View className={styles.item.root} style={commonStyles.shadow.box}>\n      <View className={styles.item.socialIconAndPasswordInfo}>\n        <SocialMediaIcon className={styles.icons.socialMedia} socialMedia={socialMedia} />\n        <View className={styles.item.passwordAndDescription}>\n          <View className={styles.item.passwordTitleWithCryptIcon}>\n            <MaterialIcons\n              name={pwdWasCorrectlyEncrypted ? 'enhanced-encryption' : 'no-encryption'}\n              size={17}\n              color={appColors.greyColor}\n            />\n            <Text className={styles.item.descriptionTextLabel}>{description}</Text>\n          </View>\n          <TextInput\n            className={styles.item.passwordInput}\n            style={commonStyles.input.outline}\n            showSoftInputOnFocus={false}\n            caretHidden\n            value={passwordGenerated}\n            secureTextEntry={!passwordVisible}\n          />\n        </View>\n      </View>\n      <PasswordIcons\n        passwordId={passwordId}\n        socialMedia={socialMedia}\n        description={description}\n        passwordGenerated={passwordGenerated}\n        passwordVisible={passwordVisible}\n        setPasswordVisible={setPasswordVisible}\n        navigation={navigation}\n      />\n    </View>\n  );\n};\n\ninterface Props {\n  passwordId: string;\n  passwordGenerated: string;\n  socialMedia: string;\n  description: string;\n  pwdWasCorrectlyEncrypted: boolean;\n  navigation: DrawerNavigationProp<any>;\n}\n","const root = ` w-full\n  sm:w-10/12\n  md:w-9/12\n  lg:w-7/12\n  xl:w-5/12\n  2xl:w-3/12\n  \n  self-center\n  flex\n  flex-col\n  bg-white\n  p-6\n  justify-center\n  items-center\n  rounded\n  border-pblack-700\n  `;\n\nconst modalTitle = `self-start\n  text-xl\n  font-bold\n  mb-4\n  `;\n\nconst modalMessage = `self-start\n  mb-4`;\n\nconst buttonsContainer = `flex flex-row\n  gap-x-0.5\n  self-end`;\n\nconst button = `px-2`;\n\nexport default {\n  root,\n  modalTitle,\n  modalMessage,\n  buttonsContainer,\n  button,\n};\n","import React from 'react';\nimport { Text, View } from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport Modal from 'react-native-modal';\nimport { appColors } from 'utils/constants';\n\nimport styles from './tailwindStyles';\n\nexport const CustomModal = (props: {\n  visible: boolean;\n  toggle: any;\n  onSubmit: any;\n  title: string;\n  message: string;\n  noLabel: string;\n  yesLabel: string;\n}) => {\n  const { visible, toggle, onSubmit, title, message, noLabel, yesLabel } = props;\n\n  return (\n    <Modal\n      testID='modal-window'\n      isVisible={visible}\n      onBackdropPress={toggle}\n      onBackButtonPress={toggle}\n    >\n      <View className={styles.root}>\n        <Text className={styles.modalTitle}>{title}</Text>\n        <Text className={styles.modalMessage}>{message}</Text>\n        <View className={styles.buttonsContainer}>\n          <View className={styles.button}>\n            <MaterialIcons.Button\n              testID='modal-no-button'\n              name='close'\n              onPress={toggle}\n              backgroundColor={appColors.red}\n            >\n              {noLabel}\n            </MaterialIcons.Button>\n          </View>\n          <View className={styles.button}>\n            <MaterialIcons.Button\n              testID='modal-yes-button'\n              name='check'\n              onPress={onSubmit}\n              backgroundColor={appColors.primary}\n            >\n              {yesLabel}\n            </MaterialIcons.Button>\n          </View>\n        </View>\n      </View>\n    </Modal>\n  );\n};\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nconst styles = StyleSheet.create({\n  searchInput: {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    outlineStyle: 'none',\n  },\n\n  fab: {\n    position: 'absolute',\n    margin: 26,\n    right: 0,\n    backgroundColor: appColors.primary,\n  },\n});\n\nexport default styles;\n","import { Platform } from 'react-native';\n\nconst rootWeb =\n  Platform.OS === 'web' &&\n  `self-center\n    \n    sm:border-l-2\n    sm:border-r-2\n    sm:border-[#3091e0]\n    \n    w-full\n    sm:w-11/12\n    md:w-7/12\n    lg:w-5/12\n    xl:w-2/6`;\n\nconst root = 'flex-1 bg-pgrey-300';\n\nconst searchInput = {\n  root: `flex\n    flex-row\n    justify-between\n    items-center\n    mt-6\n    mx-6\n    ${Platform.OS === 'web' ? 'mb-2' : 'mb-4'}\n    px-4\n    bg-white\n    rounded-3xl`,\n\n  wrapper: `w-5/6\n    md:w-11/12\n    flex\n    flex-row\n    items-center`,\n\n  input: `w-full\n    ${Platform.OS === 'web' ? 'p-3' : 'p-2'}\n    outline-0`,\n};\n\nconst passwordList = `flex\n  grow\n  pt-2`;\n\nconst passwordItems = `m-5`;\n\nconst noPasswordsContainer = `flex\n  flex-1\n  items-center\n  justify-center`;\n\nconst noPasswordsText = `text-md`;\n\nexport default {\n  root,\n  rootWeb,\n  searchInput,\n  passwordList,\n  passwordItems,\n  noPasswordsContainer,\n  noPasswordsText,\n};\n","import React, { useContext } from 'react';\nimport {\n  View,\n  ScrollView,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  NativeSyntheticEvent,\n  NativeScrollEvent,\n} from 'react-native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { EvilIcons, Entypo } from '@expo/vector-icons';\nimport { FAB } from 'react-native-paper';\nimport { RefreshControl } from 'react-native-web-refresh-control';\n\nimport { TranslationsContext } from 'contexts/translationsContext';\nimport { PasswordItem } from 'components/PasswordItem/passwordItem';\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport { CustomSnackbar } from 'components/CustomSnackbar/customSnackbar';\nimport { CustomModal as Modal } from 'components/CustomModal/customModal';\nimport { appColors, PasswordI } from 'utils/constants';\n\nimport stylesRN from './styles';\nimport styles from './tailwindStyles';\n\nexport const PasswordList = ({\n  navigation,\n  snackbarObj,\n  modalObj,\n  scrollIsClose2Bottom,\n  hasPasswordsStored,\n  passwordsFiltered,\n  searchText,\n  isRequesting,\n  handlers,\n  refreshControl,\n}: Props) => {\n  const { passwordListTranslations, modalTranslations } = useContext(TranslationsContext);\n  const { snackbarVisible, snackbarMessage } = snackbarObj;\n  const { modalTitle, modalMessage, modalVisible } = modalObj;\n  const {\n    handleScrollIsClose2Bottom,\n    handleOnDismissSnackbar,\n    handleOnPressFAB,\n    handleModalToggle,\n    handleModalOnSubmit,\n    handleSearch,\n    handleClearSearch,\n  } = handlers;\n\n  if (isRequesting) return <LoadingIndicator />;\n\n  return (\n    <View className={`${[styles.rootWeb, styles.root].join(' ')}`}>\n      {passwordsFiltered.length === 0 ? (\n        <View className={styles.noPasswordsContainer}>\n          <Text className={styles.noPasswordsText}>\n            {passwordListTranslations.t('noPasswords')}\n          </Text>\n        </View>\n      ) : (\n        <>\n          {hasPasswordsStored && (\n            <View className={styles.searchInput.root}>\n              <View className={styles.searchInput.wrapper}>\n                <EvilIcons name='search' size={24} color={appColors.disabledColorSlider} />\n                <TextInput\n                  className={styles.searchInput.input}\n                  style={stylesRN.searchInput}\n                  value={searchText}\n                  placeholder={passwordListTranslations.t('searchInputPlaceholder')}\n                  onChangeText={handleSearch}\n                />\n              </View>\n              <TouchableOpacity onPress={handleClearSearch}>\n                <Entypo name='circle-with-cross' size={20} color={appColors.disabledColorSlider} />\n              </TouchableOpacity>\n            </View>\n          )}\n          <ScrollView\n            className={styles.passwordList}\n            scrollEventThrottle={16}\n            onScroll={handleScrollIsClose2Bottom}\n            keyboardShouldPersistTaps='handled'\n            fadingEdgeLength={150}\n            refreshControl={<RefreshControl colors={[appColors.primary]} {...refreshControl} />}\n          >\n            <View\n              className={styles.passwordItems}\n              style={[{ marginTop: passwordsFiltered.length > 4 ? 0 : 20 }]}\n            >\n              {passwordsFiltered.map(\n                ({\n                  id,\n                  description,\n                  passwordGenerated,\n                  socialMedia,\n                  pwdWasCorrectlyEncrypted,\n                }: PasswordI) => (\n                  <PasswordItem\n                    key={id}\n                    passwordId={id}\n                    passwordGenerated={passwordGenerated}\n                    socialMedia={socialMedia}\n                    description={description}\n                    pwdWasCorrectlyEncrypted={pwdWasCorrectlyEncrypted}\n                    navigation={navigation}\n                  />\n                )\n              )}\n            </View>\n          </ScrollView>\n        </>\n      )}\n\n      <FAB\n        style={[stylesRN.fab, { bottom: snackbarVisible ? 40 : 0 }]}\n        color={appColors.textTint}\n        visible={!scrollIsClose2Bottom}\n        icon='plus'\n        onPress={handleOnPressFAB}\n      />\n      <CustomSnackbar\n        message={snackbarMessage}\n        isSnackbarVisible={snackbarVisible}\n        onDismiss={handleOnDismissSnackbar}\n      />\n      <Modal\n        visible={modalVisible}\n        toggle={handleModalToggle}\n        onSubmit={handleModalOnSubmit}\n        title={modalTitle}\n        message={modalMessage}\n        noLabel={modalTranslations?.t('noLabel')}\n        yesLabel={modalTranslations?.t('yesLabel')}\n      />\n    </View>\n  );\n};\n\nexport interface Props {\n  navigation: DrawerNavigationProp<any>;\n  snackbarObj: {\n    snackbarVisible: boolean;\n    snackbarMessage: string;\n  };\n  modalObj: {\n    modalTitle: string;\n    modalMessage: string;\n    modalVisible: boolean;\n  };\n  scrollIsClose2Bottom: boolean;\n  hasPasswordsStored: boolean;\n  passwordsFiltered: Array<PasswordI>;\n  searchText: string;\n  isRequesting: boolean;\n  handlers: {\n    handleScrollIsClose2Bottom: (event: NativeSyntheticEvent<NativeScrollEvent>) => void;\n    handleOnDismissSnackbar: () => void;\n    handleOnPressFAB: () => void;\n    handleModalToggle: () => void;\n    handleModalOnSubmit: () => void;\n    handleSearch: (text: string) => void;\n    handleClearSearch: () => void;\n  };\n  refreshControl: {\n    refreshing: boolean;\n    onRefresh: () => void;\n  };\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getSocialMediaListFromFirebase,\n  selectSocialMediaList,\n} from 'reduxStore/slices/socialMediaSlice';\nimport { socialMediaCollection } from 'services/firebase';\n\nconst useSocialMediaFromFirebase = () => {\n  const dispatch = useDispatch();\n  const socialMediaList = useSelector(selectSocialMediaList);\n\n  useEffect(() => {\n    const unsubscribeSocialMediaCollection = socialMediaCollection.onSnapshot(() => {\n      dispatch(getSocialMediaListFromFirebase());\n    });\n\n    // remove those next once the component got unmounted\n    return () => {\n      unsubscribeSocialMediaCollection();\n    };\n  }, []);\n\n  return socialMediaList;\n};\n\nexport default useSocialMediaFromFirebase;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { passwordsCollection } from 'services/firebase';\nimport { getPasswordsFromFirebase, selectPasswords } from 'reduxStore/slices/passwordSlice';\nimport useSocialMediaPicked from 'hooks/useSocialMediaFromFirebase';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { setPasswordList } from 'utils/localStorageFuncs';\n\nconst usePasswordsFromFirebase = () => {\n  const dispatch = useDispatch();\n  const userId = useSelector(selectUserId);\n  const passwords = useSelector(selectPasswords);\n  useSocialMediaPicked();\n\n  useEffect(() => {\n    const unsubscribePasswordsCollection = passwordsCollection\n      .where('uid', '==', userId)\n      .onSnapshot((snapshot) => {\n        // Reference: https://firebase.google.com/docs/firestore/query-data/listen#web-version-8_4\n        const somePasswordGotModified = snapshot\n          .docChanges()\n          .some((change) => ['modified'].includes(change.type));\n\n        if (somePasswordGotModified || snapshot.docs.length !== passwords.length) {\n          setPasswordList([]);\n          dispatch(getPasswordsFromFirebase());\n        }\n      });\n\n    // remove those next once the component got unmounted\n    return () => {\n      unsubscribePasswordsCollection();\n    };\n  }, []);\n\n  return passwords;\n};\n\nexport default usePasswordsFromFirebase;\n","import React, { Dispatch, useContext, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { NativeScrollEvent, NativeSyntheticEvent, Platform } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { PasswordList, Props as RenderProps } from 'screens/PasswordList/passwordList';\nimport {\n  resetModal,\n  resetSnackbar,\n  selectModalMessage,\n  selectModalTitle,\n  selectModalVisible,\n  selectSnackbarMessage,\n  selectSnackbarVisible,\n  setModalMessage,\n  setModalTitle,\n  setModalVisible,\n} from 'reduxStore/slices/uiElementsSlice';\nimport {\n  deletePasswordFromFirebase,\n  editPasswordFromFirebase,\n  getPasswordsFromFirebase,\n  selectIsDeleteMode,\n  selectIsEditMode,\n  selectPasswords,\n  setIsCreateMode,\n} from 'reduxStore/slices/passwordSlice';\nimport usePasswordsFromFirebase from 'hooks/usePasswordsFromFirebase';\nimport { selectRequest } from 'reduxStore/slices/applicationStatusSlice';\nimport { TranslationsContext } from 'contexts/translationsContext';\nimport { PasswordI } from 'utils/constants';\nimport { setPasswordList } from 'utils/localStorageFuncs';\n\nconst PasswordListContainer = ({ children }: { children: typeof PasswordList }) => {\n  const [scrollIsClose2Bottom, setScrollIsClose2Bottom] = useState<boolean>(false);\n  const [refreshing, setRefreshing] = useState(false);\n  const [searchText, setSearchText] = useState<string>('');\n  const { modalTranslations } = useContext(TranslationsContext);\n  const navigation: DrawerNavigationProp<any> = useNavigation();\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n\n  const snackbarVisible: boolean = useSelector(selectSnackbarVisible);\n  const snackbarMessage: string = useSelector(selectSnackbarMessage);\n  const modalTitle: string = useSelector(selectModalTitle);\n  const modalMessage: string = useSelector(selectModalMessage);\n  const modalVisible: boolean = useSelector(selectModalVisible);\n  const isEditMode: boolean = useSelector(selectIsEditMode);\n  const isDeleteMode: boolean = useSelector(selectIsDeleteMode);\n  const passwords: Array<PasswordI> = usePasswordsFromFirebase();\n  const passwordsFromState: Array<PasswordI> = useSelector(selectPasswords);\n  const [passwordsFiltered, setPasswordsFiltered] = useState<Array<PasswordI>>(passwords);\n  const isRequesting: boolean = useSelector(selectRequest);\n\n  useEffect(() => {\n    setPasswordsFiltered(passwords);\n\n    if (passwords.length > 0) {\n      const somePwdIsNotEncrypted = passwords.some(\n        ({ pwdWasCorrectlyEncrypted }) => !pwdWasCorrectlyEncrypted\n      );\n\n      if (somePwdIsNotEncrypted) {\n        dispatch(setModalTitle({ modalTitle: modalTranslations.t('modalTitle') }));\n        dispatch(setModalMessage({ modalMessage: modalTranslations.t('modalMessage') }));\n        dispatch(setModalVisible({ modalVisible: true }));\n      }\n    }\n  }, [passwords]);\n\n  const handleRefresh = () => {\n    setRefreshing(true);\n\n    setTimeout(() => {\n      setPasswordList([]);\n      dispatch(getPasswordsFromFirebase());\n      setPasswordsFiltered(passwordsFromState);\n      setRefreshing(false);\n    }, 800);\n  };\n\n  const handleScrollIsClose2Bottom = (event: NativeSyntheticEvent<NativeScrollEvent>) => {\n    const { layoutMeasurement, contentOffset, contentSize } = event.nativeEvent;\n    const paddingToBottom = Platform.OS === 'web' ? 7 : 10;\n    const result =\n      layoutMeasurement.height + contentOffset.y >= contentSize.height - paddingToBottom;\n\n    setScrollIsClose2Bottom(result);\n  };\n\n  const handleOnDismissSnackbar = () => {\n    dispatch(resetSnackbar());\n  };\n\n  const handleOnPressFAB = () => {\n    dispatch(setIsCreateMode({ isCreateMode: true }));\n    navigation.navigate('PasswordGenerator');\n  };\n\n  const handleModalToggle = () => {\n    dispatch(resetModal());\n  };\n\n  const handleModalOnSubmit = () => {\n    if (isDeleteMode) {\n      dispatch(deletePasswordFromFirebase());\n    } else if (isEditMode) {\n      dispatch(editPasswordFromFirebase());\n      navigation.navigate('PasswordList');\n    }\n    dispatch(resetModal());\n  };\n\n  const handleSearch = (text: string) => {\n    setSearchText(text);\n    if (text !== '') {\n      const filtered = passwords.filter(({ description }) =>\n        description.toLowerCase().includes(text.toLowerCase())\n      );\n      setPasswordsFiltered(filtered);\n    } else {\n      setPasswordsFiltered(passwords);\n    }\n  };\n\n  const handleClearSearch = () => {\n    setSearchText('');\n    handleSearch('');\n  };\n\n  const snackbarObj = { snackbarVisible, snackbarMessage };\n  const modalObj = { modalTitle, modalMessage, modalVisible };\n  const handlers = {\n    handleScrollIsClose2Bottom,\n    handleOnDismissSnackbar,\n    handleOnPressFAB,\n    handleModalToggle,\n    handleModalOnSubmit,\n    handleSearch,\n    handleClearSearch,\n  };\n\n  return children({\n    navigation,\n    snackbarObj,\n    modalObj,\n    scrollIsClose2Bottom,\n    hasPasswordsStored: passwords.length > 4,\n    passwordsFiltered,\n    searchText,\n    isRequesting,\n    handlers,\n    refreshControl: {\n      refreshing,\n      onRefresh: handleRefresh,\n    },\n  });\n};\n\nexport default () => (\n  <PasswordListContainer>\n    {(renderProps: RenderProps) => <PasswordList {...renderProps} />}\n  </PasswordListContainer>\n);\n","import { StyleSheet } from 'react-native';\n\nexport const imageBackground = StyleSheet.create({\n  root: {\n    width: undefined,\n    paddingTop: 48,\n    paddingHorizontal: 10,\n    paddingBottom: 5,\n  },\n\n  name: {\n    textShadowColor: '#000',\n    textShadowOffset: { width: 5, height: 5 },\n    textShadowRadius: 10,\n  },\n});\n","const imageBackground = {\n  name: `mt-[60px]\n    px-[5px]\n    text-pgrey-100\n    bg-pblue-500/[.6]\n    rounded-[5px]\n    text-[20px]\n    font-bold`,\n};\n\nconst appVersion = `rounded-md\n  mt-2\n  px-2\n  py-1\n  bg-pblue-400/[.7]\n  self-end\n  text-[10px]\n  font-bold\n  text-white`;\n\nconst sidebarItems = `flex\n  flex-grow\n  justify-between`;\n\nexport default {\n  imageBackground,\n  appVersion,\n  sidebarItems,\n};\n","import React, { useContext } from 'react';\nimport { Text, ScrollView, ImageBackground, View } from 'react-native';\nimport { DrawerItemList, DrawerItem } from '@react-navigation/drawer';\nimport {\n  DrawerDescriptorMap,\n  DrawerNavigationHelpers,\n} from '@react-navigation/drawer/lib/typescript/src/types';\nimport { DrawerNavigationState, ParamListBase } from '@react-navigation/routers';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { MaterialCommunityIcons, MaterialIcons, FontAwesome } from '@expo/vector-icons';\nimport { Drawer } from 'react-native-paper';\n\nimport { TranslationsContext } from 'contexts/translationsContext';\nimport { expo } from '../../../app.json';\n\nimport { imageBackground } from './styles';\nimport styles from './tailwindStyles';\n\nexport const CustomSidebar = ({ sidebarProps, userName, handlers }: Props) => {\n  const { sidebarTranslations } = useContext(TranslationsContext);\n  const { handleSignOut, onPressInPasswordGenerator, onPressInCheckTutorial } = handlers;\n\n  return (\n    <SafeAreaProvider>\n      <ImageBackground\n        source={require('assets/img/sidebar-banner.png')}\n        style={imageBackground.root}\n      >\n        <Text\n          className={styles.imageBackground.name}\n          style={imageBackground.name}\n        >{`${sidebarTranslations.t('welcome')}, ${userName} !`}</Text>\n        <Text className={styles.appVersion}>Passvault v{expo.version}</Text>\n      </ImageBackground>\n      <View className={styles.sidebarItems}>\n        <Drawer.Section title={sidebarTranslations.t('pages')}>\n          <ScrollView style={{ paddingTop: 10 }}>\n            <DrawerItemList {...sidebarProps} />\n            <DrawerItem\n              label={sidebarTranslations.t('passwordGenerator')}\n              icon={({ color, size }) => (\n                <MaterialCommunityIcons\n                  testID='password-generator-link'\n                  name='engine-outline'\n                  size={size * 0.75}\n                  color={color}\n                />\n              )}\n              onPress={() => onPressInPasswordGenerator(sidebarProps.navigation)}\n            />\n            <DrawerItem\n              label={sidebarTranslations.t('checkTutorial')}\n              icon={({ color, size }) => (\n                <FontAwesome\n                  testID='check-tutorial-link'\n                  name='graduation-cap'\n                  size={size * 0.6}\n                  color={color}\n                />\n              )}\n              onPress={() => onPressInCheckTutorial(sidebarProps.navigation)}\n            />\n          </ScrollView>\n        </Drawer.Section>\n        <DrawerItem\n          icon={({ color, size }) => (\n            <MaterialIcons testID='logout-link' name='logout' size={size * 0.75} color={color} />\n          )}\n          label={sidebarTranslations.t('signOut')}\n          onPress={handleSignOut}\n        />\n      </View>\n    </SafeAreaProvider>\n  );\n};\n\nexport interface Props {\n  sidebarProps: {\n    state: DrawerNavigationState<ParamListBase>;\n    navigation: DrawerNavigationHelpers;\n    descriptors: DrawerDescriptorMap;\n  };\n  userName: string;\n  handlers: {\n    handleSignOut: () => void;\n    // eslint-disable-next-line no-unused-vars\n    onPressInPasswordGenerator: (navigation: DrawerNavigationHelpers) => void;\n    // eslint-disable-next-line no-unused-vars\n    onPressInCheckTutorial: (navigation: DrawerNavigationHelpers) => void;\n  };\n}\n","import React, { Dispatch } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { Platform } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { DrawerContentComponentProps } from '@react-navigation/drawer';\nimport { DrawerNavigationHelpers } from '@react-navigation/drawer/lib/typescript/src/types';\nimport { selectUserEmail } from 'reduxStore/slices/userSlice';\nimport { setIsCreateMode, unsetPasswords } from 'reduxStore/slices/passwordSlice';\nimport { CustomSidebar, Props as RenderProps } from 'components/CustomSidebar/customSidebar';\nimport { signOut } from 'services/authFirebase';\n\nconst CustomSidebarContainer = ({\n  sidebarProps,\n  children,\n}: {\n  sidebarProps: DrawerContentComponentProps;\n  children: typeof CustomSidebar;\n}) => {\n  const userEmail = useSelector(selectUserEmail);\n  const name: string = userEmail ? userEmail.substring(0, userEmail.indexOf('@')) : '';\n  const userName: string = name.charAt(0).toUpperCase() + name.slice(1);\n  const stackNavigation = useNavigation<NativeStackNavigationProp<any>>();\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n\n  const handleSignOut = () => {\n    signOut().then(() => {\n      dispatch(unsetPasswords());\n      stackNavigation.replace('Login');\n    });\n  };\n\n  const onPressInPasswordGenerator = (navigation: DrawerNavigationHelpers) => {\n    navigation.closeDrawer();\n    dispatch(setIsCreateMode({ isCreateMode: true }));\n    navigation.navigate('PasswordGenerator');\n  };\n\n  const onPressInCheckTutorial = (navigation: DrawerNavigationHelpers) => {\n    if (Platform.OS === 'web') {\n      alert('This is not available in web. Please, stay tuned.');\n    } else {\n      navigation.navigate('Tutorial');\n    }\n    navigation.closeDrawer();\n  };\n  const handlers = {\n    handleSignOut,\n    onPressInPasswordGenerator,\n    onPressInCheckTutorial,\n  };\n\n  return children({\n    sidebarProps,\n    userName,\n    handlers,\n  });\n};\n\nexport default (sidebarProps: DrawerContentComponentProps) => (\n  <CustomSidebarContainer sidebarProps={sidebarProps}>\n    {(renderProps: RenderProps) => <CustomSidebar {...renderProps} />}\n  </CustomSidebarContainer>\n);\n\n// export default CustomSidebarContainerWrapper;\n","import React, { useContext } from 'react';\nimport { Dimensions, Platform, TouchableOpacity } from 'react-native';\nimport { createDrawerNavigator, DrawerContentComponentProps } from '@react-navigation/drawer';\nimport { Feather } from '@expo/vector-icons';\nimport PasswordList from 'screens/PasswordList/passwordListContainer';\nimport CustomSidebar from 'components/CustomSidebar/customSidebarContainer';\nimport { TranslationsContext } from 'contexts/translationsContext';\nimport { appColors } from 'utils/constants';\n\nconst CustomDrawer = createDrawerNavigator();\n\nexport const Drawer = () => {\n  const { drawerTranslations } = useContext(TranslationsContext);\n\n  return (\n    <CustomDrawer.Navigator\n      id='main-drawer'\n      initialRouteName='PasswordList'\n      screenOptions={({ navigation }) => ({\n        headerLeft: ({ tintColor }) => (\n          <TouchableOpacity onPress={navigation.toggleDrawer}>\n            <Feather\n              testID='drawer-button'\n              name='menu'\n              style={{\n                marginLeft: 15,\n                marginRight: 15,\n              }}\n              size={24}\n              color={tintColor}\n            />\n          </TouchableOpacity>\n        ),\n        drawerStyle: {\n          width: Platform.OS === 'web' ? 300 : Dimensions.get('window').width * 0.7,\n        },\n        drawerActiveBackgroundColor: appColors.activeTint,\n        drawerActiveTintColor: appColors.primary,\n        drawerItemStyle: {\n          borderRadius: 5,\n        },\n      })}\n      drawerContent={(sidebarProps: DrawerContentComponentProps) => (\n        <CustomSidebar {...sidebarProps} />\n      )}\n    >\n      <CustomDrawer.Screen\n        name='PasswordList'\n        component={PasswordList}\n        options={{\n          title: drawerTranslations.t('title'),\n          headerStyle: {\n            backgroundColor: appColors.primary,\n          },\n          headerTintColor: appColors.textTint,\n          drawerIcon: ({ color, size }) => (\n            <Feather testID='password-list-link' name='list' size={size * 0.75} color={color} />\n          ),\n        }}\n      />\n    </CustomDrawer.Navigator>\n  );\n};\n","import React from 'react';\nimport { StatusBar } from 'react-native';\nimport { appColors } from 'utils/constants';\n\n/*\n * For more reference check this snack:\n *   https://snack.expo.dev/@ahmed_gaber/safe-area-context?platform=ios\n */\n\nexport const CustomStatusbar = () => (\n  <StatusBar animated barStyle='light-content' backgroundColor={appColors.primaryDark} />\n);\n\nexport default CustomStatusbar;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport OnBoarding from 'screens/OnBoarding/onBoardingContainer';\nimport Login from 'screens/Auth/Login/loginContainer';\nimport SignUp from 'screens/Auth/SignUp/signupContainer';\nimport PasswordGenerator from 'screens/PasswordGenerator/passwordGeneratorContainer';\nimport { Drawer } from 'screens/Drawer/drawer';\nimport CustomStatusbar from 'components/CustomStatusbar/customStatusbar';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { selectLocale } from 'reduxStore/slices/applicationStatusSlice';\n\n// Translations\nimport getTranslations from 'utils/getTranslations';\nimport { TranslationsContext } from 'contexts/translationsContext';\nimport drawerTranslations from 'languages/drawerTranslations';\nimport infoMessagesTranslations from 'languages/infoMessagesTranslations';\nimport loginSignupTranslations from 'languages/loginSignupTranslations';\nimport modalTranslations from 'languages/modalTranslations';\nimport onBoardingTranslations from 'languages/onBoardingTranslations';\nimport passwordGenTranslations from 'languages/passwordGenTranslations';\nimport passwordListTranslations from 'languages/passwordListTranslations';\nimport sidebarTranslations from 'languages/sidebarTranslations';\n\nconst Stack = createNativeStackNavigator();\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n\nconst Root = ({ loading, onBoardingViewed }: RootProps) => {\n  const locale = useSelector(selectLocale);\n  const translationsContextValue = {\n    drawerTranslations: getTranslations(drawerTranslations, locale),\n    infoMessagesTranslations: getTranslations(infoMessagesTranslations, locale),\n    loginSignupTranslations: getTranslations(loginSignupTranslations, locale),\n    modalTranslations: getTranslations(modalTranslations, locale),\n    onBoardingTranslations: getTranslations(onBoardingTranslations, locale),\n    passwordGenTranslations: getTranslations(passwordGenTranslations, locale),\n    passwordListTranslations: getTranslations(passwordListTranslations, locale),\n    sidebarTranslations: getTranslations(sidebarTranslations, locale),\n  };\n\n  if (onBoardingViewed === null) {\n    return null;\n  }\n\n  return (\n    <TranslationsContext.Provider value={translationsContextValue}>\n      <View style={[styles.container]}>\n        <CustomStatusbar />\n        {loading ? (\n          <LoadingIndicator />\n        ) : (\n          <NavigationContainer>\n            <Stack.Navigator>\n              {!onBoardingViewed && Platform.OS !== 'web' && (\n                <Stack.Screen\n                  name='OnBoarding'\n                  component={OnBoarding}\n                  options={{ headerShown: false }}\n                />\n              )}\n              <Stack.Screen name='Login' component={Login} options={{ headerShown: false }} />\n              <Stack.Screen name='SignUp' component={SignUp} options={{ headerShown: false }} />\n              <Stack.Screen\n                name='PasswordGenerator'\n                component={PasswordGenerator}\n                options={{\n                  headerStyle: {\n                    backgroundColor: '#3091e0',\n                  },\n                  headerTintColor: '#FFF',\n                }}\n              />\n              <Stack.Screen\n                name='Tutorial'\n                component={OnBoarding}\n                options={{ headerShown: false }}\n              />\n              <Stack.Screen\n                navigationKey='main-drawer'\n                name='Drawer'\n                component={Drawer}\n                options={{\n                  headerShown: false,\n                }}\n              />\n            </Stack.Navigator>\n          </NavigationContainer>\n        )}\n      </View>\n    </TranslationsContext.Provider>\n  );\n};\n\nexport interface RootProps {\n  loading: boolean;\n  onBoardingViewed: boolean;\n}\n\nexport default Root;\n","import React, { Dispatch, useEffect, useState } from 'react';\nimport * as Localization from 'expo-localization';\nimport { logger } from 'react-native-logs';\nimport { getOnBoardingViewed, getPasswordList } from 'utils/localStorageFuncs';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectRequest,\n  setIsRequest,\n  setLocale,\n  unsetIsRequest,\n} from 'reduxStore/slices/applicationStatusSlice';\nimport { setPasswords } from 'reduxStore/slices/passwordSlice';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport Root, { RootProps as RenderProps } from './root';\n\nconst RootContainer = ({ children }: { children: typeof Root }) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const isRequest = useSelector(selectRequest);\n  const [onBoardingViewed, setOnBoardingViewed] = useState<boolean>(false);\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n  const log = logger.createLogger();\n\n  useEffect(() => {\n    dispatch(setIsRequest());\n    dispatch(setLocale({ locale: Localization.locale }));\n\n    getOnBoardingViewed()\n      .then((value) => {\n        if (value === 'false' || value === undefined) {\n          setOnBoardingViewed(false);\n        } else {\n          setOnBoardingViewed(true);\n        }\n      })\n      .catch((err) => {\n        log.error('Error checking is first launch: ', { err });\n      })\n      .finally(() => {\n        setLoading(isRequest);\n      });\n\n    getPasswordList().then((passwords) => {\n      dispatch(setPasswords({ passwords }));\n    });\n  }, []);\n\n  return children({ loading, onBoardingViewed });\n};\n\nexport default () => (\n  <RootContainer>{(renderProps: RenderProps) => <Root {...renderProps} />}</RootContainer>\n);\n","import 'react-native-gesture-handler';\nimport { createElement } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Platform } from 'react-native';\nimport { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\n\n// @see https://github.com/expo/expo/issues/18485\nif ('web' === Platform.OS) {\n  const rootTag = createRoot(document.getElementById('root') ?? document.getElementById('main'));\n  rootTag.render(createElement(App));\n} else {\n  registerRootComponent(App);\n}\n","module.exports = __webpack_public_path__ + \"static/media/amazon.4c033704.png\";","module.exports = __webpack_public_path__ + \"static/media/discord.17c0e41c.png\";","module.exports = __webpack_public_path__ + \"static/media/google.647ac848.png\";","module.exports = __webpack_public_path__ + \"static/media/slack.d9f7a674.png\";","module.exports = __webpack_public_path__ + \"static/media/okta.c20fa4f6.png\";","module.exports = __webpack_public_path__ + \"static/media/outlook.217ab4b3.png\";","module.exports = __webpack_public_path__ + \"static/media/twitch.8e8dc9e1.png\";","module.exports = __webpack_public_path__ + \"static/media/sidebar-banner.9f688acf.png\";","import { createSlice } from '@reduxjs/toolkit';\nimport { getPasswordsFromFirebase, setPasswords } from 'reduxStore/slices/passwordSlice';\nimport { setUserData, unsetUserData } from 'reduxStore/slices/userSlice';\nimport {\n  getSocialMediaListFromFirebase,\n  setSocialMediaList,\n} from 'reduxStore/slices/socialMediaSlice';\n\nexport const initialState = {\n  isRequest: false,\n  locale: 'en-US',\n};\n\nexport const applicationStatusSlice = createSlice({\n  name: 'applicationStatus',\n  initialState,\n  reducers: {\n    setIsRequest: (state) => ({\n      ...state,\n      isRequest: true,\n    }),\n    unsetIsRequest: (state) => ({\n      ...state,\n      isRequest: false,\n    }),\n    setLocale: (state, { payload }) => ({\n      ...state,\n      locale: payload.locale,\n    }),\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getPasswordsFromFirebase, (state) => ({\n        ...state,\n        isRequest: true,\n      }))\n      .addCase(getSocialMediaListFromFirebase, (state) => ({\n        ...state,\n        isRequest: true,\n      }))\n      .addCase(setSocialMediaList, (state) => ({\n        ...state,\n        isRequest: false,\n      }))\n      .addCase(setUserData, (state) => ({\n        ...state,\n        isRequest: true,\n      }))\n      .addCase(unsetUserData, (state) => ({\n        ...state,\n        isRequest: false,\n      }));\n  },\n});\n\nexport const { setIsRequest, unsetIsRequest, setLocale } = applicationStatusSlice.actions;\n\nexport const selectRequest = (state: { applicationStatus: { isRequest: boolean } }) =>\n  state.applicationStatus.isRequest;\nexport const selectLocale = (state: { applicationStatus: { locale: string } }) =>\n  state.applicationStatus.locale;\n","import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { logger } from 'react-native-logs';\nimport { PasswordI, SocialMediaI } from './constants';\n\nconst appName = 'passvault';\nconst isObject = (value: string) => typeof value === 'object';\nconst log = logger.createLogger();\n\nconst storeData = async (key: string, value: any) => {\n  try {\n    const finalValue = isObject(value) ? JSON.stringify(value) : value.toString();\n    await AsyncStorage.setItem(key, finalValue);\n  } catch (e) {\n    log.error('From storeData: ', { asyncStorageException: e });\n  }\n};\n\n// eslint-disable-next-line consistent-return\nconst getData = async (key: string) => {\n  try {\n    const value = await AsyncStorage.getItem(key);\n    if (value !== null) {\n      return isObject(value) ? JSON.parse(value) : value;\n    }\n  } catch (e) {\n    log.error('From getData: ', { asyncStorageException: e });\n  }\n};\n\nconst removeItem = async (key: string) => {\n  try {\n    await AsyncStorage.removeItem(key);\n  } catch (e) {\n    log.error('From removeItem: ', { asyncStorageException: e });\n  }\n};\n\nconst setUserData2LS = (userId: string | undefined, email: string | null | undefined) => {\n  storeData(`${appName}.userId`, userId || '').then((data) => data);\n  storeData(`${appName}.email`, email || '').then((data) => data);\n};\n\nconst setPasswordGenerated = (password: string) => {\n  storeData(`${appName}.password`, password).then((data: void) => data);\n};\n\nconst getPasswordGenerated = () => {\n  const empty = { password: '' };\n\n  return getData(`${appName}.password`)\n    .then((password: string) => ({ password }))\n    .catch((err) => {\n      log.error('From getPasswordGenerated: ', { err });\n      return empty;\n    });\n};\n\nconst setPasswordList = (passwords: PasswordI[]) => {\n  storeData(`${appName}.passwords`, passwords).then((data: void) => data);\n};\n\nconst getPasswordList = () => {\n  return getData(`${appName}.passwords`)\n    .then((passwords: string) => JSON.parse(passwords))\n    .catch((err) => {\n      log.error('From getPasswordList: ', { err });\n      return [];\n    });\n};\n\nconst setSocialMediaListToLocalStorage = (passwords: SocialMediaI[]) => {\n  storeData(`${appName}.socialMedia`, passwords).then((data: void) => data);\n};\n\nconst getSocialMediaList = () => {\n  return getData(`${appName}.socialMedia`)\n    .then((data: string) => JSON.parse(data))\n    .catch((err) => {\n      log.error('From getSocialMediaList: ', { err });\n      return [];\n    });\n};\n\nconst getUserDataFromLS = () => {\n  const empty = { userId: '', email: '' };\n\n  return getData(`${appName}.userId`)\n    .then((userId: string) => {\n      getData(`${appName}.email`)\n        .then((email: string) => ({\n          userId,\n          email,\n        }))\n        .catch((err: any) => {\n          log.error('From getData -> email: ', { err });\n          return empty;\n        });\n    })\n    .catch((err) => {\n      log.error('From getData -> userId: ', { err });\n      return empty;\n    });\n};\n\nconst clearUserDataFromLS = () => {\n  removeItem(`${appName}.userId`).then((res: void) => res);\n  removeItem(`${appName}.email`).then((res: void) => res);\n  removeItem(`${appName}.passwords`).then((res: void) => res);\n};\n\nconst setOnBoardingViewed = (value: any) => {\n  storeData(`${appName}.alreadyLaunched`, value).then((data: void) => data);\n};\n\nconst getOnBoardingViewed = () =>\n  getData(`${appName}.alreadyLaunched`)\n    .then((firstLaunchFlag) => firstLaunchFlag)\n    .catch((err) => {\n      log.error('From getOnBoardingViewed: ', { err });\n      return null;\n    });\n\nexport {\n  setUserData2LS,\n  getUserDataFromLS,\n  clearUserDataFromLS,\n  setPasswordGenerated,\n  getPasswordGenerated,\n  setPasswordList,\n  getPasswordList,\n  setSocialMediaListToLocalStorage,\n  getSocialMediaList,\n  setOnBoardingViewed,\n  getOnBoardingViewed,\n};\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const initialState = {\n  id: '',\n  email: '',\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setUserData: (state, { payload }) => ({\n      ...state,\n      id: payload.id,\n      email: payload.email,\n    }),\n    unsetUserData: () => ({\n      ...initialState,\n    }),\n  },\n});\n\nexport const { setUserData, unsetUserData } = userSlice.actions;\n\nexport const selectUserId = (state: { user: { id: string } }) => state.user.id;\nexport const selectUserEmail = (state: { user: { email: string } }) => state.user.email;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { SocialMediaI } from 'utils/constants';\n\nexport const initialState: {\n  socialMediaPicked: string;\n  socialMediaList: Array<SocialMediaI>;\n} = {\n  socialMediaPicked: '',\n  socialMediaList: [],\n};\n\nexport const socialMediaSlice = createSlice({\n  name: 'socialMedia',\n  initialState,\n  reducers: {\n    setSocialMediaPicked: (state, { payload }) => ({\n      ...state,\n      socialMediaPicked: payload.socialMediaPicked,\n    }),\n    unsetSocialMediaPicked: (state) => ({\n      ...state,\n      socialMediaPicked: '',\n    }),\n    setSocialMediaList: (state, { payload }) => ({\n      ...state,\n      socialMediaList: payload.socialMediaList,\n    }),\n    getSocialMediaListFromFirebase: () => {},\n  },\n});\n\nexport const {\n  setSocialMediaPicked,\n  unsetSocialMediaPicked,\n  setSocialMediaList,\n  getSocialMediaListFromFirebase,\n} = socialMediaSlice.actions;\n\nexport const selectSocialMediaPicked = (state: { socialMedia: { socialMediaPicked: string } }) =>\n  state.socialMedia.socialMediaPicked;\nexport const selectSocialMediaList = (state: {\n  socialMedia: { socialMediaList: Array<SocialMediaI> };\n}) => state.socialMedia.socialMediaList;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { resetPasswordGeneratorState } from 'reduxStore/slices/passwordSlice';\n\nexport const initialState: {\n  isEasy2Read: boolean;\n  isAllChar: boolean;\n  isUpperCase: boolean;\n  isLowerCase: boolean;\n  isNumbers: boolean;\n  isSymbols: boolean;\n} = {\n  isEasy2Read: true,\n  isAllChar: false,\n  isUpperCase: true,\n  isLowerCase: true,\n  isNumbers: false,\n  isSymbols: false,\n};\n\nconst resetPasswordConfiguratorState = (state: any) => ({\n  ...state,\n  ...initialState,\n});\n\nexport const configuratorSlice = createSlice({\n  name: 'configurator',\n  initialState,\n  reducers: {\n    setIsEasy2Read: (state, { payload }) => ({\n      ...state,\n      isEasy2Read: payload.isEasy2Read,\n    }),\n    setIsAllChar: (state, { payload }) => ({\n      ...state,\n      isAllChar: payload.isAllChar,\n    }),\n    setIsUpperCase: (state, { payload }) => ({\n      ...state,\n      isUpperCase: payload.isUpperCase,\n    }),\n    setIsLowerCase: (state, { payload }) => ({\n      ...state,\n      isLowerCase: payload.isLowerCase,\n    }),\n    setIsNumbers: (state, { payload }) => ({\n      ...state,\n      isNumbers: payload.isNumbers,\n    }),\n    setIsSymbols: (state, { payload }) => ({\n      ...state,\n      isSymbols: payload.isSymbols,\n    }),\n    setIsUpperCaseAndIsLowerCase: (state, { payload }) => ({\n      ...state,\n      isUpperCase: payload.isUpperCase,\n      isLowerCase: payload.isLowerCase,\n    }),\n    setIsNumbersAndIsSymbols: (state, { payload }) => ({\n      ...state,\n      isNumbers: payload.isNumbers,\n      isSymbols: payload.isSymbols,\n    }),\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetPasswordGeneratorState, (state) => resetPasswordConfiguratorState(state));\n  },\n});\n\nexport const {\n  setIsEasy2Read,\n  setIsAllChar,\n  setIsUpperCase,\n  setIsLowerCase,\n  setIsNumbers,\n  setIsSymbols,\n  setIsUpperCaseAndIsLowerCase,\n  setIsNumbersAndIsSymbols,\n} = configuratorSlice.actions;\n\nexport const selectIsEasy2Read = (state: { configurator: { isEasy2Read: boolean } }) =>\n  state.configurator.isEasy2Read;\nexport const selectIsAllChar = (state: { configurator: { isAllChar: boolean } }) =>\n  state.configurator.isAllChar;\nexport const selectIsUpperCase = (state: { configurator: { isUpperCase: boolean } }) =>\n  state.configurator.isUpperCase;\nexport const selectIsLowerCase = (state: { configurator: { isLowerCase: boolean } }) =>\n  state.configurator.isLowerCase;\nexport const selectIsNumbers = (state: { configurator: { isNumbers: boolean } }) =>\n  state.configurator.isNumbers;\nexport const selectIsSymbols = (state: { configurator: { isSymbols: boolean } }) =>\n  state.configurator.isSymbols;\n","/* eslint-disable no-undef */\n// Import the functions you need from the SDKs you need\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport { getAuth } from 'firebase/auth';\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.FIREBASE_DATABASE_URL,\n  projectId: process.env.FIREBASE_PROJECT_ID,\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.FIREBASE_APP_ID,\n};\n\nconst appLength: number = firebase.apps.length;\n\nconst app = appLength === 0 ? firebase.initializeApp(firebaseConfig) : firebase.app();\nconst database = app.firestore();\n\nexport const auth = getAuth(app);\nexport const passwordsCollection = database.collection('passwords');\nexport const socialMediaCollection = database.collection('social_media');\n"],"sourceRoot":""}