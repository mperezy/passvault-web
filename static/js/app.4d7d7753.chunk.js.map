{"version":3,"sources":["src/services/database.ts","src/utils/localStorageFuncs.ts","src/redux/slices/passwordSlice.ts","src/services/encrypt.ts","src/utils/constants.ts","src/redux/sagas/passwordGeneratorSaga.ts","src/redux/sagas/getPasswordsSaga.ts","src/redux/sagas/getSocialMediaSaga.ts","src/redux/sagas/savePasswordSaga.ts","src/redux/sagas/deletePasswordSaga.ts","src/redux/sagas/updatePasswordSaga.ts","src/redux/slices/rootReducer.ts","src/redux/store/index.ts","src/redux/sagas/index.ts","App.tsx","src/services/decrypt.ts","src/redux/slices/uiElementsSlice.ts","src/components/LoadingIndicator/loadingIndicator.tsx","src/components/OnBoarding/OnBoardingItem/styles.ts","src/components/OnBoarding/OnBoardingItem/onBoardingItem.tsx","src/components/OnBoarding/Paginator/styles.ts","src/components/OnBoarding/Paginator/paginator.tsx","src/components/OnBoarding/NextButton/styles.ts","src/components/OnBoarding/NextButton/nextButton.tsx","src/components/OnBoarding/NextButton/nextButtonContainer.tsx","src/screens/OnBoarding/onBoarding.tsx","src/screens/OnBoarding/slides.tsx","src/utils/getTranslations.ts","src/languages/passwordListTranslations.ts","src/languages/modalTranslations.ts","src/languages/sidebarTranslations.ts","src/languages/infoMessagesTranslations.ts","src/languages/drawerTranslations.ts","src/languages/loginSignupTranslations.ts","src/languages/onBoardingTranslations.ts","src/languages/passwordGenTranslations.ts","src/contexts/translationsContext.ts","src/screens/OnBoarding/onBoardingContainer.tsx","src/services/authFirebase.ts","src/utils/infoMessages.ts","src/components/Popover/popover.tsx","src/components/CustomSnackbar/customSnackbar.tsx","src/screens/PasswordGenerator/styles.ts","src/components/SVGs/SVGProps.ts","src/components/SVGs/Icons.ts","src/components/SVGs/components/PassvaultLogoIcon.tsx","src/components/SVGs/Icon.tsx","src/screens/Login/styles.ts","src/screens/Login/login.tsx","src/hooks/useLogin.tsx","src/screens/Login/loginContainer.tsx","src/screens/SignUp/signup.tsx","src/screens/SignUp/signupContainer.tsx","src/components/CreateEditPasswordConfigurator/styles.ts","src/components/CreateEditPasswordConfigurator/createEditPasswordConfigurator.tsx","src/hooks/usePasswordDescription.tsx","src/hooks/useSocialMediaPicked.tsx","src/utils/handleCreateEditPassword.ts","src/components/CreateEditPasswordConfigurator/createEditPwdConfigurationContainer.tsx","src/components/PasswordConfigurator/CustomCheckBox/customCheckBox.tsx","src/utils/configuratorUtils.ts","src/components/PasswordConfigurator/passwordConfigurator.tsx","src/components/SliderContainer/styles.ts","src/components/SliderContainer/sliderContainer.tsx","src/screens/PasswordGenerator/passwordGenerator.tsx","src/hooks/useGeneratorMessage.ts","src/hooks/useGeneratorPageTitle.ts","src/screens/PasswordGenerator/passwordGeneratorContainer.tsx","src/components/SocialMediaIcon/socialMediaIcon.tsx","src/utils/imageDataRetriever.ts","src/components/PasswordItem/styles.ts","src/components/PasswordIcons/passwordIcon.tsx","src/components/PasswordItem/passwordItem.tsx","src/components/CustomModal/styles.ts","src/components/CustomModal/customModal.tsx","src/screens/PasswordList/styles.ts","src/screens/PasswordList/passwordList.tsx","src/hooks/useSocialMediaFromFirebase.tsx","src/hooks/usePasswordsFromFirebase.tsx","src/screens/PasswordList/passwordListContainer.tsx","src/components/CustomSidebar/styles.ts","src/components/CustomSidebar/customSidebar.tsx","src/components/CustomSidebar/customSidebarContainer.tsx","src/screens/Drawer/drawer.tsx","src/components/CustomStatusbar/customStatusbar.tsx","src/root/root.tsx","src/root/rootContainer.tsx","index.js","assets/amazon.png","assets/discord.png","assets/google.png","assets/slack.png","assets/okta.png","assets/outlook.png","assets/twitch.png","assets/img/sidebar-banner.png","src/redux/slices/userSlice.ts","src/redux/slices/configuratorSlice.ts","src/redux/slices/applicationStatusSlice.ts","src/redux/slices/socialMediaSlice.ts","src/services/firebase.ts"],"names":["log","logger","createLogger","getPasswordsByUserId","userId","passwordsCollection","where","get","then","querySnapshot","docs","map","doc","id","passwordGenerated","data","password_generated","socialMedia","social_media","description","defaultEmptyPasswordDescription","createdAt","sort","x","y","obj1","obj2","field","kind","Platform","OS","sortBy","catch","error","sendPassword2Firebase","password","add","Date","getTime","uid","info","deletePasswordById","passwordId","delete","updatePasswordByIdFromFirebase","update","getSocialMedia","socialMediaCollection","name","appName","isObject","value","storeData","key","finalValue","JSON","stringify","toString","AsyncStorage","setItem","e","asyncStorageException","getData","getItem","parse","removeItem","setUserData2LS","email","setPasswordGenerated","getPasswordGenerated","empty","err","getUserDataFromLS","clearUserDataFromLS","res","setOnBoardingViewed","getOnBoardingViewed","firstLaunchFlag","initialState","passwordIdPicked","passwordPicked","passwordDescriptionPicked","passwordPickedWasEncrypted","length","isCreateMode","isEditMode","isDeleteMode","passwords","passwordSlice","createSlice","reducers","setPassword","state","payload","setPasswordPicked","setPasswordIdPicked","resetPasswordPicked","setPasswordDescriptionPicked","setPasswordPickedWasEncrypted","setLength","setIsCreateMode","setIsEditMode","setIsDeleteMode","setPasswords","resetPasswordGeneratorState","resetPasswordState","unsetPasswords","generatePassword","getPasswordsFromFirebase","savePassword2Firebase","deletePasswordFromFirebase","editPasswordFromFirebase","actions","selectPassword","selectPasswordIdPicked","selectPasswordPicked","selectPasswordDescriptionPicked","selectPasswordPickedWasEncrypted","selectIsCreateMode","selectIsEditMode","selectIsDeleteMode","selectPasswordLength","selectPasswords","encrypt","apiURL","process","axios","post","headers","lower","upper","number","symbols","devWarnings","popoverMessage","FIREBASE_STORAGE_URL","FIREBASE_STORAGE_BUCKET","imagesTokens","FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_EASY_SIGNUP_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_INITIAL_PASSWORD_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN","appColors","textTint","maximumTintColorSlider","disabledColorSlider","greyColor","activeTint","primary","primaryDark","red","passwordGeneratorSaga","takeLeading","type","select","isUpperCase","selectIsUpperCase","isLowerCase","selectIsLowerCase","isNumbers","selectIsNumbers","isSymbols","selectIsSymbols","all","i","charAt","Math","floor","random","put","exception","message","getPasswordsSaga","selectUserId","result","call","decryptMany","response","index","isCorrectlyEncrypted","pwdWasCorrectlyEncrypted","getSocialMediaSaga","getSocialMediaListFromFirebase","socialMediaList","setSocialMediaList","savePasswordSaga","encryptedPassword","deletePasswordSaga","setIsRequest","unsetIsRequest","updatePasswordSaga","selectSocialMediaPicked","createRootReducer","combineReducers","user","userSlice","reducer","configurator","configuratorSlice","applicationStatus","applicationStatusSlice","socialMediaSlice","uiElements","uiElementsSlice","sagaMiddleware","createSagaMiddleware","middleware","store","configureStore","run","isLocalAPI","passvaultAPI","LogBox","ignoreLogs","window","App","initialSnackbarState","snackbarMessage","snackbarVisible","initialModalState","modalTitle","modalMessage","modalVisible","setSnackbarMessage","setSnackbarVisible","resetSnackbar","setModalTitle","setModalMessage","setModalVisible","resetModal","selectSnackbarMessage","selectSnackbarVisible","selectModalTitle","selectModalMessage","selectModalVisible","styles","StyleSheet","create","container","flex","justifyContent","horizontal","flexDirection","padding","LoadingIndicator","View","style","ActivityIndicator","size","color","alignItems","marginTop","image","borderRadius","title","fontWeight","fontSize","marginBottom","textAlign","paddingHorizontal","OnBoardingItem","item","width","useWindowDimensions","Image","source","uri","resizeMode","paddingTop","Text","height","marginVertical","dot","backgroundColor","marginHorizontal","Paginator","scrollX","_","inputRange","dotWidth","interpolate","outputRange","extrapolate","opacity","Animated","button","position","NextButton","strokeWidth","center","radius","circumference","progressRef","scrollTo","rotation","origin","stroke","cx","cy","r","ref","strokeDasharray","TouchableOpacity","activeOpacity","onPress","AntDesign","NextButtonContainer","percentage","children","PI","progressAnimation","useRef","Value","current","useEffect","toValue","timing","duration","useNativeDriver","start","addListener","strokeDashoffset","setNativeProps","removeAllListeners","renderProps","paddingVertical","OnBoarding","slides","currentIndex","slidesRef","viewableItemsChanged","viewConfig","FlatList","renderItem","showsHorizontalScrollIndicator","pagingEnabled","bounces","keyExtractor","onScroll","event","nativeEvent","contentOffset","onViewableItemsChanged","viewabilityConfig","FIREBASE_STORAGE_FINAL_URL","translation","locale","i18n","I18n","enableFallback","en","searchInputPlaceholder","noPasswords","es","noLabel","yesLabel","deleteModalTitle","deleteModalMessage","editModalTitle","editModalMessage","editNonEncryptedModalMessage","encryptPwdMessage","welcome","pages","passwordGenerator","checkTutorial","signOut","copied2Clipboard","newPassword","about2CreatePassword","usernamePlaceholder","loginButton","signupButton","tooltip","goBack2Login","editTitle","generatorTitle","isEdit","heading","placeOwnPassword","passwordLength","checkboxEasy2Read","checkboxAllChar","checkboxUppercase","checkboxLowercase","checkboxNumbers","checkboxSymbols","descriptionPlaceholder","createButton","editButton","TranslationsContext","createContext","drawerTranslations","getTranslations","infoMessagesTranslations","loginSignupTranslations","modalTranslations","onBoardingTranslations","passwordGenTranslations","passwordListTranslations","sidebarTranslations","OnBoardingContainer","useState","setCurrentIndex","viewAreaCoveragePercentThreshold","navigation","useNavigation","dispatch","useDispatch","translations","useContext","translatedSlides","slide","viewableItems","scrollToIndex","replace","showInfoMessage","ToastAndroid","show","SHORT","CustomPopover","touchableRef","useCallback","Feather","CustomSnackbar","isSnackbarVisible","onDismiss","Snackbar","visible","screen","shadow","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","cardView","passwordStyle","inputContainer","margin","input","borderWidth","borderColor","fontFamily","outlineStyle","icons","marginLeft","configuration","textContainer","textHeader","passwordLengthContainer","inputLength","marginRight","lengthSliderContainer","switchToggle","checkBox","section","paragraph","checkbox","Variant","byDefault","fillColor","bgFillColor","Icons","PassvaultLogoIcon","variant","viewBox","fill","d","Icon","rest","IconComponent","rowGap","buttonContainer","buttonText","buttonOutLine","buttonOutLineText","loginImage","tooltipImage","linkContainer","link","linkText","webStyles","Login","username","isRequesting","handlers","handleOnChangeText","handleLogin","handleOnKeyPress","handleOnDismiss","className","TextInput","placeholder","t","onChangeText","onKeyPress","navigate","useLogin","handleBackAction","canGoBack","goBack","BackHandler","exitApp","subscription","addEventListener","auth","onAuthStateChanged","setUserData","unsetUserData","remove","LoginContainer","setUsername","useSelector","selectRequest","signInWithEmailAndPassword","toLowerCase","userCredentials","signIn","text","SignUp","handleSignUp","SignupContainer","createUserWithEmailAndPassword","signUp","createEditPassword","userInputContainer","textInput","dropdown","textLabel","descriptionLengthIndicator","alignSelf","CreateEditPasswordConfigurator","passwordDescriptionMaxLen","socialMediaPicked","createEditButtonLabel","handleOnPress","setDescription","handleOnPickerChange","selectedValue","onValueChange","label","toUpperCase","slice","Item","maxLength","Entypo","Button","usePasswordDescription","useSocialMediaPicked","selectSocialMediaList","setSocialMediaPicked","handleCreateEditPassword","CreateEditPwdConfigurationContainer","itemValue","CustomCheckBox","isChecked","disabled","Checkbox","undefined","defaultProps","handleLeftCheckboxes","setCheck1","setCheck2","selector1","selector2","handleOtherCheckboxes","payloadString1","payloadString2","payload1","payload2","handleRightCheckboxes","checkbox1","checkbox2","checkbox3","configuratorAction","PasswordConfigurator","switchEnabled","isEasy2Read","selectIsEasy2Read","isAllChar","selectIsAllChar","handleRightCheckboxesGivenLeftCheckboxes","setIsUpperCaseAndIsLowerCase","setIsNumbersAndIsSymbols","leftCheckboxes","setIsEasy2Read","setIsAllChar","rightCheckboxes","setIsUpperCase","setIsLowerCase","setIsNumbers","setIsSymbols","updateConfiguratorStateAndGeneratePassword","sliderContainer","paddingLeft","SliderContainer","activeMark","left","inactiveMark","defaultValue","setValue","Number","isNaN","step","minimumValue","maximumValue","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","PasswordGenerator","scrollViewRef","mPassword","snackbarObj","passwordFromState","handleCopyButton","handleRefreshButton","handleOnDismissSnackbar","handleOnChangePassword","handleOnBlurPassword","handleSwitch","ScrollView","showSoftInputOnFocus","caretHidden","onBlur","MaterialCommunityIcons","Ionicons","Divider","Switch","keyboardType","useGeneratorMessage","isCreatedMode","showAuthenticatedMessage","unsetSocialMediaPicked","resetConfigurationState","useGeneratorPageTitle","screenTitle","useLayoutEffect","setOptions","PasswordGeneratorContainer","setSwitchEnabled","mSetPassword","alert","Clipboard","setString","SocialMediaIcon","includes","imageSource","amazon","require","discord","google","slack","okta","outlook","twitch","imageSourceRetriever","facebook","linkedin","other","socialMediaIcon","socialMediaColor","twitter","socialMediaIconColor","socialIconAndPasswordInfo","passwordAndDescription","descriptionTextLabel","passwordInput","singleIcon","PasswordIcons","passwordVisible","setPasswordVisible","mSocialMedia","FontAwesome","PasswordItem","MaterialIcons","secureTextEntry","content","CustomModal","props","toggle","onSubmit","isVisible","onBackdropPress","onBackButtonPress","sectionTitle","paddingBottom","items","writeTaskWrapper","bottom","searchInput","addWrapper","addText","navWrapper","navButtonContainer","navButton","fab","right","PasswordList","modalObj","scrollIsClose2Bottom","hasPasswordsStored","passwordsFiltered","searchText","handleScrollIsClose2Bottom","handleOnPressFAB","handleModalToggle","handleModalOnSubmit","handleSearch","handleClearSearch","EvilIcons","scrollEventThrottle","contentContainerStyle","flexGrow","keyboardShouldPersistTaps","fadingEdgeLength","FAB","icon","useSocialMediaFromFirebase","unsubscribeSocialMediaCollection","onSnapshot","usePasswordsFromFirebase","unsubscribePasswordsCollection","PasswordListContainer","setScrollIsClose2Bottom","setSearchText","setPasswordsFiltered","some","filtered","filter","layoutMeasurement","contentSize","paddingToBottom","imageBackground","textShadowColor","textShadowOffset","textShadowRadius","divider","CustomSidebar","sidebarProps","userName","handleSignOut","onPressInPasswordGenerator","onPressInCheckTutorial","ImageBackground","expo","version","Section","DrawerItemList","DrawerItem","CustomSidebarContainer","userEmail","selectUserEmail","substring","indexOf","stackNavigation","firebaseSignOut","closeDrawer","CustomDrawer","createDrawerNavigator","Drawer","Navigator","initialRouteName","screenOptions","drawerStyle","Dimensions","drawerActiveBackgroundColor","drawerActiveTintColor","drawerItemStyle","drawerContent","Screen","component","options","headerStyle","headerTintColor","drawerIcon","CustomStatusbar","StatusBar","animated","barStyle","Stack","createNativeStackNavigator","Root","loading","onBoardingViewed","selectLocale","translationsContextValue","Provider","NavigationContainer","headerShown","RootContainer","setLoading","isRequest","setLocale","Localization","finally","registerRootComponent","module","exports","extraReducers","builder","addCase","resetPasswordConfiguratorState","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","app","firebase","apps","initializeApp","database","firestore","getAuth","collection"],"mappings":"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","file":"static/js/app.4d7d7753.chunk.js","sourcesContent":["/* eslint-disable no-undef */\nimport { Platform } from 'react-native';\nimport { logger } from 'react-native-logs';\n\nimport { passwordsCollection, socialMediaCollection } from 'services/firebase';\nimport { defaultEmptyPasswordDescription } from 'utils/constants';\n\nconst log = logger.createLogger();\n\nconst sortBy = (obj1: any, obj2: any, field: string, kind = 'asc') => {\n  const x = kind === 'asc' && Platform.OS !== 'ios' ? 1 : -1;\n  return obj1[field] < obj2[field] ? -1 * x : obj1[field] > obj2[field] ? 1 * x : 0;\n};\n\nexport const getPasswordsByUserId = (userId: any) =>\n  passwordsCollection\n    .where('uid', '==', userId)\n    .get()\n    .then((querySnapshot) =>\n      querySnapshot.docs\n        .map((doc) => ({\n          id: doc.id,\n          passwordGenerated: doc.data().password_generated,\n          socialMedia: doc.data().social_media,\n          description: doc.data().description || defaultEmptyPasswordDescription,\n          createdAt: doc.data().createdAt,\n        }))\n        .sort((x, y) => sortBy(x, y, 'createdAt', process.env.PASSWORD_LIST_ORDER_TYPE))\n    )\n    .catch((error) => {\n      log.error('Error getting documents: ', error);\n    });\n\nexport const sendPassword2Firebase = async (\n  userId: string,\n  password: string,\n  description: string,\n  socialMedia: string\n) => {\n  await passwordsCollection\n    .add({\n      createdAt: new Date().getTime(),\n      password_generated: password,\n      social_media: socialMedia,\n      description,\n      uid: userId,\n    })\n    .then(() => {\n      log.info('A new password was added in database.');\n    })\n    .catch((error) => {\n      log.error('Something went wrong trying to add a new password in database: ', error);\n    });\n};\n\nexport const deletePasswordById = async (passwordId: string) => {\n  await passwordsCollection\n    .doc(passwordId)\n    .delete()\n    .then(() => {\n      log.info('A password was deleted from database.');\n    })\n    .catch((error) => {\n      log.error('Something went wrong trying to delete a password from database: ', error);\n    });\n};\n\nexport const updatePasswordByIdFromFirebase = async (\n  passwordId: string,\n  passwordGenerated: string,\n  description: string,\n  socialMedia: string\n) => {\n  await passwordsCollection\n    .doc(passwordId)\n    .update({\n      password_generated: passwordGenerated,\n      description,\n      social_media: socialMedia,\n    })\n    .then(() => {\n      log.info('A password was updated from database.');\n    })\n    .catch((error) => {\n      log.error('Something went wrong trying to update a password from database: ', error);\n    });\n};\n\nexport const getSocialMedia = () =>\n  socialMediaCollection\n    .get()\n    .then((querySnapshot) =>\n      querySnapshot.docs.map((doc) => ({\n        id: doc.id,\n        name: doc.data().name,\n      }))\n    )\n    .catch((error) => {\n      log.error('Something went wrong trying to get social media list: ', error);\n    });\n","import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { logger } from 'react-native-logs';\n\nconst appName = 'passvault';\nconst isObject = (value: string) => typeof value === 'object';\nconst log = logger.createLogger();\n\nconst storeData = async (key: string, value: any) => {\n  try {\n    const finalValue = isObject(value) ? JSON.stringify(value) : value.toString();\n    await AsyncStorage.setItem(key, finalValue);\n  } catch (e) {\n    log.error('From storeData: ', { asyncStorageException: e });\n  }\n};\n\n// eslint-disable-next-line consistent-return\nconst getData = async (key: string) => {\n  try {\n    const value = await AsyncStorage.getItem(key);\n    if (value !== null) {\n      return isObject(value) ? JSON.parse(value) : value;\n    }\n  } catch (e) {\n    log.error('From getData: ', { asyncStorageException: e });\n  }\n};\n\nconst removeItem = async (key: string) => {\n  try {\n    await AsyncStorage.removeItem(key);\n  } catch (e) {\n    log.error('From removeItem: ', { asyncStorageException: e });\n  }\n};\n\nconst setUserData2LS = (userId: string | undefined, email: string | null | undefined) => {\n  storeData(`${appName}.userId`, userId || '').then((data) => data);\n  storeData(`${appName}.email`, email || '').then((data) => data);\n};\n\nconst setPasswordGenerated = (password: string) => {\n  storeData(`${appName}.password`, password).then((data: void) => data);\n};\n\nconst getPasswordGenerated = () => {\n  const empty = { password: '' };\n\n  return getData(`${appName}.password`)\n    .then((password: string) => ({ password }))\n    .catch((err) => {\n      log.error('From getPasswordGenerated: ', { err });\n      return empty;\n    });\n};\n\nconst getUserDataFromLS = () => {\n  const empty = { userId: '', email: '' };\n\n  return getData(`${appName}.userId`)\n    .then((userId: string) => {\n      getData(`${appName}.email`)\n        .then((email: string) => ({\n          userId,\n          email,\n        }))\n        .catch((err: any) => {\n          log.error('From getData -> email: ', { err });\n          return empty;\n        });\n    })\n    .catch((err) => {\n      log.error('From getData -> userId: ', { err });\n      return empty;\n    });\n};\n\nconst clearUserDataFromLS = () => {\n  removeItem(`${appName}.userId`).then((res: void) => res);\n  removeItem(`${appName}.email`).then((res: void) => res);\n};\n\nconst setOnBoardingViewed = (value: any) => {\n  storeData(`${appName}.alreadyLaunched`, value).then((data: void) => data);\n};\n\nconst getOnBoardingViewed = () =>\n  getData(`${appName}.alreadyLaunched`)\n    .then((firstLaunchFlag) => firstLaunchFlag)\n    .catch((err) => {\n      log.error('From getOnBoardingViewed: ', { err });\n      return null;\n    });\n\nexport {\n  setUserData2LS,\n  getUserDataFromLS,\n  clearUserDataFromLS,\n  setPasswordGenerated,\n  getPasswordGenerated,\n  setOnBoardingViewed,\n  getOnBoardingViewed,\n};\n","import { createSlice } from '@reduxjs/toolkit';\nimport { PasswordI } from 'utils/constants';\n\nexport const initialState: {\n  password: string;\n  passwordIdPicked: string;\n  passwordPicked: string;\n  passwordDescriptionPicked: string;\n  passwordPickedWasEncrypted: boolean;\n  length: number;\n  isCreateMode: boolean;\n  isEditMode: boolean;\n  isDeleteMode: boolean;\n  passwords: Array<PasswordI>;\n} = {\n  password: '',\n  passwordIdPicked: '',\n  passwordPicked: '',\n  passwordDescriptionPicked: '',\n  passwordPickedWasEncrypted: false,\n  length: 6,\n  isCreateMode: false,\n  isEditMode: false,\n  isDeleteMode: false,\n  passwords: [],\n};\n\nconst resetPasswordState = (state: any) => ({\n  ...state,\n  password: '',\n  passwordIdPicked: '',\n  passwordPicked: '',\n  passwordDescriptionPicked: '',\n  passwordPickedWasEncrypted: false,\n  length: 6,\n  isCreateMode: false,\n  isEditMode: false,\n  isDeleteMode: false,\n});\n\nexport const passwordSlice = createSlice({\n  name: 'password',\n  initialState,\n  reducers: {\n    setPassword: (state, { payload }) => ({\n      ...state,\n      password: payload.password,\n    }),\n    setPasswordPicked: (state, { payload }) => ({\n      ...state,\n      passwordPicked: payload.passwordPicked,\n    }),\n    setPasswordIdPicked: (state, { payload }) => ({\n      ...state,\n      passwordIdPicked: payload.passwordIdPicked,\n    }),\n    resetPasswordPicked: (state) => ({\n      ...state,\n      passwordPicked: '',\n    }),\n    setPasswordDescriptionPicked: (state, { payload }) => ({\n      ...state,\n      passwordDescriptionPicked: payload.passwordDescriptionPicked,\n    }),\n    setPasswordPickedWasEncrypted: (state, { payload }) => ({\n      ...state,\n      passwordPickedWasEncrypted: payload.passwordPickedWasEncrypted,\n    }),\n    setLength: (state, { payload }) => ({\n      ...state,\n      length: payload.length,\n    }),\n    setIsCreateMode: (state, { payload }) => ({\n      ...state,\n      isCreateMode: payload.isCreateMode,\n    }),\n    setIsEditMode: (state, { payload }) => ({\n      ...state,\n      isEditMode: payload.isEditMode,\n    }),\n    setIsDeleteMode: (state, { payload }) => ({\n      ...state,\n      isDeleteMode: payload.isDeleteMode,\n    }),\n    setPasswords: (state, { payload }) => ({\n      ...state,\n      passwords: payload.passwords,\n    }),\n    resetPasswordGeneratorState: (state) => resetPasswordState(state),\n    unsetPasswords: () => ({ ...initialState }),\n    generatePassword: () => {},\n    getPasswordsFromFirebase: () => {},\n    savePassword2Firebase: (state, { payload }) => {},\n    deletePasswordFromFirebase: () => {},\n    editPasswordFromFirebase: () => {},\n  },\n});\n\nexport const {\n  setPassword,\n  setPasswordPicked,\n  setPasswordIdPicked,\n  resetPasswordPicked,\n  setPasswordDescriptionPicked,\n  setPasswordPickedWasEncrypted,\n  setLength,\n  setIsCreateMode,\n  setIsEditMode,\n  setIsDeleteMode,\n  setPasswords,\n  resetPasswordGeneratorState,\n  unsetPasswords,\n  generatePassword,\n  getPasswordsFromFirebase,\n  savePassword2Firebase,\n  deletePasswordFromFirebase,\n  editPasswordFromFirebase,\n} = passwordSlice.actions;\n\nexport const selectPassword = (state: { password: { password: string } }) =>\n  state.password.password;\nexport const selectPasswordIdPicked = (state: { password: { passwordIdPicked: string } }) =>\n  state.password.passwordIdPicked;\nexport const selectPasswordPicked = (state: { password: { passwordPicked: string } }) =>\n  state.password.passwordPicked;\nexport const selectPasswordDescriptionPicked = (state: {\n  password: { passwordDescriptionPicked: string };\n}) => state.password.passwordDescriptionPicked;\nexport const selectPasswordPickedWasEncrypted = (state: {\n  password: { passwordPickedWasEncrypted: boolean };\n}) => state.password.passwordPickedWasEncrypted;\nexport const selectIsCreateMode = (state: { password: { isCreateMode: boolean } }) =>\n  state.password.isCreateMode;\nexport const selectIsEditMode = (state: { password: { isEditMode: boolean } }) =>\n  state.password.isEditMode;\nexport const selectIsDeleteMode = (state: { password: { isDeleteMode: boolean } }) =>\n  state.password.isDeleteMode;\nexport const selectPasswordLength = (state: { password: { length: number } }) =>\n  state.password.length;\nexport const selectPasswords = (state: { password: { passwords: Array<PasswordI> } }) =>\n  state.password.passwords;\n","/* eslint-disable no-undef */\nimport axios from 'axios';\n\nconst encrypt = (password: string, userId: string) => {\n  const isLocalAPI = process.env.AWS_LOCAL_API_ENABLED === 'true';\n  const apiURL = isLocalAPI ? process.env.AWS_LOCAL_API_URL : process.env.AWS_API_URL;\n\n  return axios.post(\n    `${apiURL}/encrypt`,\n    {\n      userId,\n      password,\n    },\n    {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n};\n\nexport default encrypt;\n","/* eslint-disable no-undef */\nconst lower = 'abcdefghijklmñopqrstuvwxyz';\nconst upper = 'ABCDEFGHIJKLMNÑOPQRSTUVWXYZ';\nconst number = '0123456789';\nconst symbols = '[]{}<>\":|!@#$%^&*()_+`~/';\n\nconst devWarnings = [\n  'Clipboard has been extracted from react-native core',\n  'AsyncStorage has been extracted from react-native core',\n  'Setting a timer for a long period of time, i.e. multiple minutes',\n  'Picker has been extracted from react-native core and will be removed',\n];\n\nconst popoverMessage = 'You can generate passwords without store them.';\n\nconst defaultEmptyPasswordDescription = 'This password has no description. Please update it.';\n\nconst FIREBASE_STORAGE_URL = 'https://firebasestorage.googleapis.com';\nconst { FIREBASE_STORAGE_BUCKET } = process.env;\n\nconst imagesTokens = {\n  FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN: '9a72b084-fbf7-4ec0-bfc7-4c0c4fe923c7',\n  FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN: '48ac40a8-14ac-4b31-8246-1b9a64efc19e',\n  FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN: '9a4c9252-2f1e-4580-868c-e5d6fd383cd9',\n  FIREBASE_FIRESTORAGE_EASY_SIGNUP_IMAGE_TOKEN: '65edc2f3-657d-43f9-89b1-a2e1be19e41f',\n  FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN: '287fce56-7f18-4d06-a85b-24b6fbc42171',\n  FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN: '79295f0a-cf45-4ed2-aa1d-0e7c29cafea3',\n  FIREBASE_FIRESTORAGE_INITIAL_PASSWORD_IMAGE_TOKEN: 'daa4acf7-8be3-4210-aae0-e9de589b846d',\n  FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN: '5f6da2b8-26cc-48ca-8352-30afd0cb3dd3',\n  FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN: '5cf416cc-0f22-4ca6-be38-fc816742a76e',\n};\n\nconst appColors = {\n  textTint: '#FFF',\n  maximumTintColorSlider: '#d3d3d3',\n  disabledColorSlider: '#D3D3D3',\n  greyColor: '#9d9d9d',\n  activeTint: '#9ac8fc',\n  primary: '#3091e0',\n  primaryDark: '#236daa',\n  red: '#DB4437',\n};\n\nexport interface PasswordI {\n  id: string;\n  description: string;\n  passwordGenerated: string;\n  socialMedia: string;\n  pwdWasCorrectlyEncrypted: boolean;\n}\n\nexport {\n  devWarnings,\n  lower,\n  upper,\n  number,\n  symbols,\n  popoverMessage,\n  defaultEmptyPasswordDescription,\n  appColors,\n  FIREBASE_STORAGE_URL,\n  FIREBASE_STORAGE_BUCKET,\n  imagesTokens,\n};\n","import { select, put, takeLeading } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport {\n  generatePassword,\n  selectIsEditMode,\n  selectPasswordLength,\n  selectPasswordPicked,\n  setPassword,\n} from 'reduxStore/slices/passwordSlice';\nimport { lower, upper, number, symbols } from 'utils/constants';\nimport { setPasswordGenerated } from 'utils/localStorageFuncs';\n\nimport {\n  selectIsLowerCase,\n  selectIsNumbers,\n  selectIsSymbols,\n  selectIsUpperCase,\n} from 'reduxStore/slices/configuratorSlice';\n\nconst log = logger.createLogger();\n\nfunction* getPasswordGeneratorFlow(): Generator {\n  try {\n    const length = yield select(selectPasswordLength);\n    const isUpperCase = yield select(selectIsUpperCase);\n    const isLowerCase = yield select(selectIsLowerCase);\n    const isNumbers = yield select(selectIsNumbers);\n    const isSymbols = yield select(selectIsSymbols);\n\n    const isEditMode = yield select(selectIsEditMode);\n    const passwordPicked = yield select(selectPasswordPicked);\n\n    const isUpper: string = isUpperCase ? upper : '';\n    const isLower: string = isLowerCase ? lower : '';\n    const isNumber: string = isNumbers ? number : '';\n    const isSymbol: string = isSymbols ? symbols : '';\n\n    const all = isUpper + isLower + isNumber + isSymbol;\n    let password = '';\n\n    // @ts-ignore\n    for (let i = 0; i < length; i++) {\n      password += all.charAt(Math.floor(Math.random() * all.length));\n    }\n\n    setPasswordGenerated(password);\n\n    if (isEditMode) {\n      if (passwordPicked) {\n        // TODO: This flow needs to be updated in future\n        /* This condition will only be applied at the first time the user\n         * click in edit password, the password picked will be set as\n         * a generated password, and then will be deleted from the state.\n         * */\n        // @ts-ignore\n        password = passwordPicked;\n      }\n    }\n    yield put(setPassword({ password }));\n  } catch (exception) {\n    log.error('PasswordGeneratorSaga: ', { exception: exception.message });\n  }\n}\n\nexport const passwordGeneratorSaga = [takeLeading(generatePassword.type, getPasswordGeneratorFlow)];\n","// @ts-nocheck\nimport { put, select, call, takeLeading } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport { getPasswordsFromFirebase, setPasswords } from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { getPasswordsByUserId } from 'services/database';\nimport decryptMany from 'services/decrypt';\nimport { PasswordI } from 'utils/constants';\n\nconst log = logger.createLogger();\n\n// Generator<any, void, SelectEffect | CallEffect>\nfunction* getPasswordsFlow(): Generator {\n  try {\n    const userId: string = yield select(selectUserId);\n    const result: Array<PasswordI> = yield call(getPasswordsByUserId, userId);\n\n    const decryptedServiceResult = yield call(\n      decryptMany,\n      result.map(({ passwordGenerated }) => ({ password: passwordGenerated })),\n      userId\n    );\n\n    const passwordsDecrypted: Array<{\n      password: string;\n      isCorrectlyEncrypted: boolean;\n    }> = decryptedServiceResult.data.response;\n\n    const passwords: Array<PasswordI> = passwordsDecrypted.map(\n      ({ password, isCorrectlyEncrypted }, index) => ({\n        id: result[index].id,\n        description: result[index].description,\n        socialMedia: result[index].socialMedia,\n        passwordGenerated: password,\n        pwdWasCorrectlyEncrypted: isCorrectlyEncrypted,\n      })\n    );\n\n    yield put(setPasswords({ passwords }));\n  } catch (exception) {\n    log.error('GetPasswordSaga: ', { exception: exception.message });\n  }\n}\n\nexport const getPasswordsSaga = [takeLeading(getPasswordsFromFirebase.type, getPasswordsFlow)];\n","import { call, put, takeLeading } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport {\n  getSocialMediaListFromFirebase,\n  setSocialMediaList,\n} from 'reduxStore/slices/socialMediaSlice';\nimport { getSocialMedia } from 'services/database';\n\nconst log = logger.createLogger();\n\nfunction* getSocialMediaFlow(): Generator {\n  try {\n    const socialMediaList = yield call(getSocialMedia);\n\n    yield put(setSocialMediaList({ socialMediaList }));\n  } catch (exception) {\n    log.error('GetSocialMediaSaga: ', { exception: exception.message });\n  }\n}\n\nexport const getSocialMediaSaga = [\n  takeLeading(getSocialMediaListFromFirebase.type, getSocialMediaFlow),\n];\n","// @ts-nocheck\nimport { select, call, takeLeading } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport { savePassword2Firebase } from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { sendPassword2Firebase } from 'services/database';\nimport encrypt from 'services/encrypt';\n\nconst log = logger.createLogger();\n\nfunction* savePasswordFlow({ payload }: Params): Generator {\n  try {\n    const userId: string = yield select(selectUserId);\n    const { socialMedia, password, description } = payload;\n    const encryptServiceResult = yield call(encrypt, password, userId);\n    const encryptedPassword = encryptServiceResult.data.response.password;\n\n    yield call(sendPassword2Firebase, userId, encryptedPassword, description, socialMedia);\n  } catch (exception) {\n    log.error('SavePasswordSaga: ', { exception: exception.message });\n  }\n}\n\nexport const savePasswordSaga = [takeLeading(savePassword2Firebase.type, savePasswordFlow)];\n\ninterface Params {\n  payload: {\n    socialMedia: string;\n    password: string;\n    description: string;\n  };\n}\n","import { put, select, call, takeLeading } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport {\n  deletePasswordFromFirebase,\n  selectPasswordIdPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { deletePasswordById } from 'services/database';\nimport { setIsRequest, unsetIsRequest } from 'reduxStore/slices/applicationStatusSlice';\n\nconst log = logger.createLogger();\n\nfunction* deletePasswordFlow(): Generator {\n  try {\n    const passwordId = yield select(selectPasswordIdPicked);\n\n    yield put(setIsRequest());\n\n    // @ts-ignore\n    yield call(deletePasswordById, passwordId);\n\n    yield put(unsetIsRequest());\n  } catch (exception) {\n    log.error('DeletePasswordSaga: ', { exception: exception.message });\n  }\n}\n\nexport const deletePasswordSaga = [\n  // @ts-ignore\n  takeLeading(deletePasswordFromFirebase.type, deletePasswordFlow),\n];\n","// @ts-nocheck\nimport { select, call, takeLeading, put } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport {\n  editPasswordFromFirebase,\n  selectPassword,\n  selectPasswordDescriptionPicked,\n  selectPasswordIdPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { updatePasswordByIdFromFirebase } from 'services/database';\nimport { selectSocialMediaPicked } from 'reduxStore/slices/socialMediaSlice';\nimport { setIsRequest, unsetIsRequest } from 'reduxStore/slices/applicationStatusSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport encrypt from 'services/encrypt';\n\nconst log = logger.createLogger();\n\nfunction* updatePasswordFlow(): Generator {\n  try {\n    const userId: string = yield select(selectUserId);\n    const passwordId: string = yield select(selectPasswordIdPicked);\n    const socialMedia: string = yield select(selectSocialMediaPicked);\n    const password: string = yield select(selectPassword);\n    const description: string = yield select(selectPasswordDescriptionPicked);\n\n    const encryptServiceResult = yield call(encrypt, password, userId);\n    const encryptedPassword = encryptServiceResult.data.response.password;\n\n    yield put(setIsRequest());\n    yield call(\n      updatePasswordByIdFromFirebase,\n      passwordId,\n      encryptedPassword,\n      description,\n      socialMedia\n    );\n    yield put(unsetIsRequest());\n  } catch (exception) {\n    log.error('UpdatePasswordSaga: ', { exception: exception.message });\n  }\n}\n\nexport const updatePasswordSaga = [takeLeading(editPasswordFromFirebase.type, updatePasswordFlow)];\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport { userSlice } from './userSlice';\nimport { passwordSlice } from './passwordSlice';\nimport { configuratorSlice } from 'reduxStore/slices/configuratorSlice';\nimport { applicationStatusSlice } from 'reduxStore/slices/applicationStatusSlice';\nimport { socialMediaSlice } from 'reduxStore/slices/socialMediaSlice';\nimport { uiElementsSlice } from 'reduxStore/slices/uiElementsSlice';\n\nconst createRootReducer = () =>\n  combineReducers({\n    user: userSlice.reducer,\n    password: passwordSlice.reducer,\n    configurator: configuratorSlice.reducer,\n    applicationStatus: applicationStatusSlice.reducer,\n    socialMedia: socialMediaSlice.reducer,\n    uiElements: uiElementsSlice.reducer,\n  });\n\nexport default createRootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport IndexSagas from 'reduxStore/sagas/index';\nimport createSagaMiddleware from 'redux-saga';\nimport createRootReducer from 'reduxStore/slices/rootReducer';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [sagaMiddleware];\n\nconst store = configureStore({\n  reducer: createRootReducer(),\n  middleware,\n});\n\nsagaMiddleware.run(IndexSagas);\n\nexport default store;\n","import { all } from 'redux-saga/effects';\nimport { passwordGeneratorSaga } from 'reduxStore/sagas/passwordGeneratorSaga';\nimport { getPasswordsSaga } from 'reduxStore/sagas/getPasswordsSaga';\nimport { getSocialMediaSaga } from 'reduxStore/sagas/getSocialMediaSaga';\nimport { savePasswordSaga } from 'reduxStore/sagas/savePasswordSaga';\nimport { deletePasswordSaga } from 'reduxStore/sagas/deletePasswordSaga';\nimport { updatePasswordSaga } from 'reduxStore/sagas/updatePasswordSaga';\n\nexport default function* IndexSagas() {\n  yield all([\n    ...passwordGeneratorSaga,\n    ...getPasswordsSaga,\n    ...getSocialMediaSaga,\n    ...savePasswordSaga,\n    ...deletePasswordSaga,\n    ...updatePasswordSaga,\n  ]);\n}\n","/* eslint-disable no-undef */\nimport React from 'react';\n\nimport { LogBox } from 'react-native';\nimport { logger } from 'react-native-logs';\nimport { Provider } from 'react-redux';\nimport { TailwindProvider } from 'tailwindcss-react-native';\n\nimport store from 'reduxStore/store';\nimport { devWarnings } from 'utils/constants';\nimport Root from './src/root/rootContainer';\n\nif (process.env.ENV === 'dev') {\n  const log = logger.createLogger();\n  const isLocalAPI = process.env.AWS_LOCAL_API_ENABLED === 'true';\n  const passvaultAPI = isLocalAPI ? process.env.AWS_LOCAL_API_URL : process.env.AWS_API_URL;\n\n  LogBox.ignoreLogs(devWarnings);\n  log.info(`Is local API: ${isLocalAPI}`);\n  log.info(`Using Passvault-API at ${passvaultAPI}`);\n}\n\ndeclare global {\n  // eslint-disable-next-line no-unused-vars\n  interface Window {\n    store: any;\n  }\n}\n\nwindow.store = store;\n\nconst App = () => (\n  <Provider store={store}>\n    <TailwindProvider>\n      <Root />\n    </TailwindProvider>\n  </Provider>\n);\n\nexport default App;\n","/* eslint-disable no-undef */\nimport axios from 'axios';\n\nconst decryptMany = (passwords: Array<{ password: string }>, userId: string) => {\n  const isLocalAPI = process.env.AWS_LOCAL_API_ENABLED === 'true';\n  const apiURL = isLocalAPI ? process.env.AWS_LOCAL_API_URL : process.env.AWS_API_URL;\n\n  return axios.post(\n    `${apiURL}/decryptMany`,\n    {\n      userId,\n      passwords,\n    },\n    {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n};\n\nexport default decryptMany;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  snackbarMessage: '',\n  snackbarVisible: false,\n  modalTitle: '',\n  modalMessage: '',\n  modalVisible: false,\n};\n\nconst initialSnackbarState = {\n  snackbarMessage: '',\n  snackbarVisible: false,\n};\n\nconst initialModalState = {\n  modalTitle: '',\n  modalMessage: '',\n  modalVisible: false,\n};\n\nexport const uiElementsSlice = createSlice({\n  name: 'uiElements',\n  initialState,\n  reducers: {\n    // snackbar actions\n    setSnackbarMessage: (state, { payload }) => ({\n      ...state,\n      snackbarMessage: payload.snackbarMessage,\n    }),\n    setSnackbarVisible: (state, { payload }) => ({\n      ...state,\n      snackbarVisible: payload.snackbarVisible,\n    }),\n    resetSnackbar: (state) => ({\n      ...state,\n      ...initialSnackbarState,\n    }),\n\n    // modal actions\n    setModalTitle: (state, { payload }) => ({\n      ...state,\n      modalTitle: payload.modalTitle,\n    }),\n    setModalMessage: (state, { payload }) => ({\n      ...state,\n      modalMessage: payload.modalMessage,\n    }),\n    setModalVisible: (state, { payload }) => ({\n      ...state,\n      modalVisible: payload.modalVisible,\n    }),\n    resetModal: (state) => ({\n      ...state,\n      ...initialModalState,\n    }),\n  },\n});\n\nexport const {\n  setSnackbarMessage,\n  setSnackbarVisible,\n  resetSnackbar,\n  setModalTitle,\n  setModalMessage,\n  setModalVisible,\n  resetModal,\n} = uiElementsSlice.actions;\n\n// snackbar select\nexport const selectSnackbarMessage = (state: { uiElements: { snackbarMessage: any } }) =>\n  state.uiElements.snackbarMessage;\nexport const selectSnackbarVisible = (state: { uiElements: { snackbarVisible: any } }) =>\n  state.uiElements.snackbarVisible;\n\n// modal select\nexport const selectModalTitle = (state: { uiElements: { modalTitle: any } }) =>\n  state.uiElements.modalTitle;\nexport const selectModalMessage = (state: { uiElements: { modalMessage: any } }) =>\n  state.uiElements.modalMessage;\nexport const selectModalVisible = (state: { uiElements: { modalVisible: any } }) =>\n  state.uiElements.modalVisible;\n","import React from 'react';\n\nimport { StyleSheet, View, ActivityIndicator } from 'react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  horizontal: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    padding: 10,\n  },\n});\n\nexport const LoadingIndicator = () => (\n  <View style={[styles.container, styles.horizontal]}>\n    <ActivityIndicator size='large' color='#3091e0' />\n  </View>\n);\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nexport const styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 10,\n  },\n\n  image: {\n    flex: 0.7,\n    borderRadius: 3,\n    justifyContent: 'center',\n  },\n\n  title: {\n    fontWeight: 'bold',\n    fontSize: 25,\n    marginBottom: 5,\n    color: appColors.primaryDark,\n    textAlign: 'center',\n  },\n\n  description: {\n    fontSize: 14,\n    color: 'grey',\n    textAlign: 'center',\n    paddingHorizontal: 64,\n  },\n});\n","import { Image, Text, useWindowDimensions, View } from 'react-native';\nimport React from 'react';\n\nimport { styles } from './styles';\n\nexport const OnBoardingItem = ({ item }: Props) => {\n  const { title, description, image } = item;\n  const { width } = useWindowDimensions();\n\n  return (\n    <View style={[styles.container, { width }]}>\n      <Image\n        source={{\n          uri: image,\n        }}\n        style={[styles.image, { width, resizeMode: 'contain' }]}\n      />\n\n      <View style={{ flex: 0.3, marginTop: 15, paddingTop: 5, paddingHorizontal: 8 }}>\n        <Text style={styles.title}>{title}</Text>\n        <Text style={styles.description}>{description}</Text>\n      </View>\n    </View>\n  );\n};\n\ninterface Props {\n  item: { id: number; title: string; description: string; image: string };\n}\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nexport const styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    height: 15,\n    marginVertical: 5,\n    marginBottom: 10,\n  },\n\n  dot: {\n    height: 10,\n    borderRadius: 10,\n    backgroundColor: appColors.primaryDark,\n    marginHorizontal: 8,\n  },\n});\n","import React from 'react';\nimport { View, Animated, useWindowDimensions } from 'react-native';\n\nimport { styles } from './styles';\n\nexport function Paginator({ data, scrollX }: Props) {\n  const { width } = useWindowDimensions();\n\n  return (\n    <View style={styles.container}>\n      {data.map((_: any, i: number) => {\n        const inputRange = [(i - 1) * width, i * width, (i + 1) * width];\n        const dotWidth = scrollX.interpolate({\n          inputRange,\n          outputRange: [10, 20, 10],\n          extrapolate: 'clamp',\n        });\n        const opacity = scrollX.interpolate({\n          inputRange,\n          outputRange: [0.3, 1, 0.3],\n          extrapolate: 'clamp',\n        });\n\n        return <Animated.View key={i} style={[styles.dot, { width: dotWidth, opacity }]} />;\n      })}\n    </View>\n  );\n}\n\ninterface Props {\n  data: any;\n  scrollX: any;\n}\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nexport const styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 10,\n  },\n\n  button: {\n    position: 'absolute',\n    backgroundColor: appColors.primary,\n    borderRadius: 100,\n    padding: 15,\n  },\n});\n","import React from 'react';\nimport { View, TouchableOpacity } from 'react-native';\nimport Svg, { G, Circle } from 'react-native-svg';\nimport { AntDesign } from '@expo/vector-icons';\nimport { appColors } from 'utils/constants';\nimport { styles } from './styles';\n\nexport const NextButton = ({\n  size,\n  strokeWidth,\n  center,\n  radius,\n  circumference,\n  progressRef,\n  scrollTo,\n}: Props) => (\n  <View style={styles.container}>\n    <Svg width={size} height={size}>\n      {/* eslint-disable-next-line @typescript-eslint/ban-ts-comment */}\n      {/* @ts-ignore */}\n      <G rotation='-90' origin={center}>\n        <Circle\n          stroke={appColors.maximumTintColorSlider}\n          cx={center}\n          cy={center}\n          r={radius}\n          strokeWidth={strokeWidth}\n        />\n        <Circle\n          ref={progressRef}\n          stroke={appColors.primaryDark}\n          cx={center}\n          cy={center}\n          r={radius}\n          strokeWidth={strokeWidth}\n          strokeDasharray={circumference}\n          // strokeDashoffset={circumference - (circumference * 100) / 100}\n        />\n      </G>\n    </Svg>\n    <TouchableOpacity style={styles.button} activeOpacity={0.6} onPress={scrollTo}>\n      <AntDesign name='arrowright' size={20} color='#FFF' />\n    </TouchableOpacity>\n  </View>\n);\n\nexport interface Props {\n  size: number;\n  strokeWidth: number;\n  center: number;\n  radius: number;\n  circumference: number;\n  progressRef: React.RefObject<View>;\n  scrollTo: () => void;\n}\n","import React, { useEffect, useRef } from 'react';\nimport { Animated, View } from 'react-native';\nimport { NextButton, Props as RenderProps } from 'components/OnBoarding/NextButton/nextButton';\n\nconst NextButtonContainer = ({ scrollTo, percentage, children }: ContainerProps) => {\n  const size = 80;\n  const strokeWidth = 2;\n  const center: number = size / 2;\n  const radius: number = size / 2 - strokeWidth / 2;\n  const circumference: number = 2 * Math.PI * radius;\n\n  const progressAnimation = useRef(new Animated.Value(0)).current;\n  const progressRef = useRef<View>(null);\n\n  const animation = (toValue: any) =>\n    Animated.timing(progressAnimation, {\n      toValue,\n      duration: 250,\n      useNativeDriver: true,\n    }).start();\n\n  useEffect(() => {\n    animation(percentage);\n  }, [percentage]);\n\n  useEffect(() => {\n    progressAnimation.addListener(\n      (value) => {\n        const strokeDashoffset = circumference - (circumference * value.value) / 100;\n\n        if (progressRef?.current) {\n          progressRef.current.setNativeProps({\n            strokeDashoffset,\n          });\n        }\n      },\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      [percentage]\n    );\n\n    return () => {\n      progressAnimation.removeAllListeners();\n    };\n  }, []);\n\n  return children({\n    size,\n    strokeWidth,\n    center,\n    radius,\n    circumference,\n    progressRef,\n    scrollTo,\n  });\n};\n\ninterface ContainerProps {\n  scrollTo: () => void;\n  percentage: number;\n  children: typeof NextButton;\n}\n\nexport default ({ scrollTo, percentage }: { scrollTo: () => void; percentage: number }) => (\n  <NextButtonContainer scrollTo={scrollTo} percentage={percentage}>\n    {(renderProps: RenderProps) => <NextButton {...renderProps} />}\n  </NextButtonContainer>\n);\n","import React from 'react';\nimport { View, StyleSheet, FlatList, Animated, Platform } from 'react-native';\nimport { OnBoardingItem } from 'components/OnBoarding/OnBoardingItem/onBoardingItem';\nimport { Paginator } from 'components/OnBoarding/Paginator/paginator';\nimport NextButton from 'components/OnBoarding/NextButton/nextButtonContainer';\nimport { Slide } from 'screens/OnBoarding/slides';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingVertical: Platform.OS === 'ios' ? 30 : 15,\n  },\n});\n\nexport const OnBoarding = ({\n  slides,\n  currentIndex,\n  scrollX,\n  slidesRef,\n  viewableItemsChanged,\n  viewConfig,\n  scrollTo,\n}: Props) => (\n  <View style={styles.container}>\n    <View style={{ flex: 1 }}>\n      <FlatList\n        ref={slidesRef}\n        data={slides}\n        renderItem={({ item }) => <OnBoardingItem item={item} />}\n        horizontal\n        showsHorizontalScrollIndicator={false}\n        pagingEnabled\n        bounces={false}\n        keyExtractor={(item) => `${item.id}`}\n        onScroll={Animated.event([{ nativeEvent: { contentOffset: { x: scrollX } } }], {\n          useNativeDriver: false,\n        })}\n        onViewableItemsChanged={viewableItemsChanged}\n        viewabilityConfig={viewConfig}\n      />\n    </View>\n    <Paginator data={slides} scrollX={scrollX} />\n    <NextButton scrollTo={scrollTo} percentage={(currentIndex + 1) * (100 / slides.length)} />\n  </View>\n);\n\nexport interface Props {\n  slides: Array<Slide>;\n  currentIndex: number;\n  scrollX: Animated.Value;\n  slidesRef: React.RefObject<FlatList>;\n  viewableItemsChanged: (item: { viewableItems: any }) => void;\n  viewConfig: any;\n  scrollTo: () => void;\n}\n","import { FIREBASE_STORAGE_BUCKET, FIREBASE_STORAGE_URL, imagesTokens } from 'utils/constants';\n\nconst {\n  FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_EASY_SIGNUP_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_INITIAL_PASSWORD_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN,\n} = imagesTokens;\nconst FIREBASE_STORAGE_FINAL_URL = `${FIREBASE_STORAGE_URL}/v0/b/${FIREBASE_STORAGE_BUCKET}/o`;\n\nexport type Slide = {\n  id: number;\n  title: string;\n  description: string;\n  image: string;\n};\n\nexport const slides = [\n  {\n    id: 1,\n    image: `${FIREBASE_STORAGE_FINAL_URL}/welcome.png?alt=media&token=${FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN}`,\n  },\n  {\n    id: 2,\n    image: `${FIREBASE_STORAGE_FINAL_URL}/password_generator.gif?alt=media&token=${FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN}`,\n  },\n  {\n    id: 3,\n    image: `${FIREBASE_STORAGE_FINAL_URL}/sign-up.png?alt=media&token=${FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN}`,\n  },\n  {\n    id: 4,\n    image: `${FIREBASE_STORAGE_FINAL_URL}/easy-signup.gif?alt=media&token=${FIREBASE_FIRESTORAGE_EASY_SIGNUP_IMAGE_TOKEN}`,\n  },\n  {\n    id: 5,\n    image: `${FIREBASE_STORAGE_FINAL_URL}/free-to-use.png?alt=media&token=${FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN}`,\n  },\n  {\n    id: 6,\n    image: `${FIREBASE_STORAGE_FINAL_URL}/passwords-listed.png?alt=media&token=${FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN}`,\n  },\n  {\n    id: 7,\n    image: `${FIREBASE_STORAGE_FINAL_URL}/initial-password.gif?alt=media&token=${FIREBASE_FIRESTORAGE_INITIAL_PASSWORD_IMAGE_TOKEN}`,\n  },\n  {\n    id: 8,\n    image: `${FIREBASE_STORAGE_FINAL_URL}/password-edit.gif?alt=media&token=${FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN}`,\n  },\n  {\n    id: 9,\n    image: `${FIREBASE_STORAGE_FINAL_URL}/onboarding-completed.png?alt=media&token=${FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN}`,\n  },\n];\n","import { I18n, Dict } from 'i18n-js';\n\n// eslint-disable-next-line\nexport default (translation: Dict, locale: string) => {\n  const i18n = new I18n(translation);\n  i18n.locale = locale;\n  i18n.enableFallback = true;\n\n  return i18n;\n};\n","export default {\n  en: {\n    searchInputPlaceholder: 'Search a password',\n    noPasswords: 'No passwords found :(',\n  },\n  es: {\n    searchInputPlaceholder: 'Busca una contraseña',\n    noPasswords: 'No se encontraron contraseñas :(',\n  },\n};\n","export default {\n  en: {\n    noLabel: 'No',\n    yesLabel: 'Yes',\n    deleteModalTitle: 'Delete password warning!',\n    deleteModalMessage: \"Are you sure you want to delete this PLATFORM's password?\",\n    editModalTitle: 'Edit password warning!',\n    editModalMessage:\n      \"If you update this password, you won't be able to recover it.\\nDo you want to update it?\",\n    editNonEncryptedModalMessage:\n      'This password will be updated and encrypted.\\nIt will be the same unless you changed it in the configurator.',\n    encryptPwdMessage:\n      'This password was not encrypted.\\nWe highly recommend you to update it, this new one will be encrypted for your security.',\n    modalTitle: 'Encryption suggestion',\n    modalMessage:\n      'There is(are) some password(s) not encrypted, please click edit on any password to double check.',\n  },\n  es: {\n    noLabel: 'No',\n    yesLabel: 'Sí',\n    deleteModalTitle: 'Advertencia de borrado de contraseña!',\n    deleteModalMessage: 'Estás seguro que deseas borrar la contraseña de PLATFORM?',\n    editModalTitle: 'Advertencia de actualización de contraseña',\n    editModalMessage: 'Si actualizas esta contraseña, no podrás recuperarla.\\nDeseas actualizarla?',\n    editNonEncryptedModalMessage:\n      'Esta contraseña será actualizada y encriptada.\\nSeguirá siendo la misma a menos que lo hayas cambiado en el configurador.',\n    encryptPwdMessage:\n      'Esta contraseña no ha sido encriptada.\\nTe sugerimos actualizarla por una nueva que será encriptada para tu mayor seguridad.',\n    modalTitle: 'Sugerencia de encriptación',\n    modalMessage:\n      'Hay algún(a) contraseña(s) que no está(n) encriptada(s), porfavor da click en editar en cualquier contraseña para estar seguro(a). ',\n  },\n};\n","export default {\n  en: {\n    welcome: 'Hey there',\n    pages: 'Pages',\n    passwordGenerator: 'Password generator',\n    checkTutorial: 'Check tutorial',\n    signOut: 'Sign out',\n  },\n  es: {\n    welcome: 'Hola',\n    pages: 'Páginas',\n    passwordGenerator: 'Generador de contraseñas',\n    checkTutorial: 'Revisar tutorial',\n    signOut: 'Cerrar sesión',\n  },\n};\n","export default {\n  en: {\n    copied2Clipboard: 'The password was copied to clipboard',\n    newPassword: 'New password generated',\n    about2CreatePassword: \"You're about to generate a new password\",\n  },\n  es: {\n    copied2Clipboard: 'La contraseña fue copiada en el portapeles',\n    newPassword: 'Nueva contraseña generada',\n    about2CreatePassword: 'Estas a punto de generar una contraseña',\n  },\n};\n","export default {\n  es: { title: 'Lista de contraseñas' },\n  en: { title: 'Password list' },\n};\n","export default {\n  en: {\n    usernamePlaceholder: 'Username',\n    loginButton: 'Login',\n    signupButton: 'Sign up',\n    tooltip: 'Use it without an account',\n    goBack2Login: 'Go to login if you have an account',\n  },\n  es: {\n    usernamePlaceholder: 'Nombre de usuario',\n    loginButton: 'Iniciar sesión',\n    signupButton: 'Regristrarse',\n    tooltip: 'Usar sin cuenta',\n    goBack2Login: 'Si ya tienes una cuenta, inicia sesión aquí',\n  },\n};\n","export default {\n  en: {\n    slides: [\n      {\n        id: 1,\n        title: 'Welcome to Passvault!',\n        description: 'The main goal of this app is to generate secure and configurable passwords',\n      },\n      {\n        id: 2,\n        title: 'Password Generator',\n        description: 'Configure and generate a password is very simple!',\n      },\n      {\n        id: 3,\n        title: 'Storing Generated Passwords',\n        description: 'Optionally you can enroll up and store many generated passwords',\n      },\n      {\n        id: 4,\n        title: 'Signup is very easy!',\n        description:\n          \"No passwords required, duh! you only need a username with more than 6 characters for signup and login. That's it!\",\n      },\n      {\n        id: 5,\n        title: 'Free to use',\n        description:\n          \"If you don't feel comfortable creating an account, you can still generate passwords but those wont't be stored\",\n      },\n      {\n        id: 6,\n        title: 'Check your Generated Passwords listed',\n        description:\n          \"If you're an authenticated user all your passwords will be listed (latest listed first), and navigate with a sidebar menu\",\n      },\n      {\n        id: 7,\n        title: 'Place your initial password',\n        description:\n          \"If you prefer, you can place an initial password when you're creating a new entry, otherwise generate a password\",\n      },\n      {\n        id: 8,\n        title: 'Update your existing passwords',\n        description:\n          'In order to avoid to create more entries, you can update an existing password and save the changes',\n      },\n      {\n        id: 9,\n        title: \"Let's go with it!\",\n        description: \"Now we're ready to start to use Passvault!\",\n      },\n    ],\n  },\n  es: {\n    slides: [\n      {\n        id: 1,\n        title: 'Bienvenido(a) a Passvault!',\n        description:\n          'El principal objetivo de esta app es generar contraseñas seguras y configurables',\n      },\n      {\n        id: 2,\n        title: 'Generador de contraseñas',\n        description: 'Generar y configurar una contraseña es muy simple!',\n      },\n      {\n        id: 3,\n        title: 'Almacena tus contraseñas generadas',\n        description: 'Opcionalmente puedes registrarte para guardar tus contraseñas generadas',\n      },\n      {\n        id: 4,\n        title: 'Registrarte es muy fácil!',\n        description:\n          'No necesitas ninguna contraseña, obvio! sólo necesitas un nombre de usuario de más de 6 caractéres para registrarte e iniciar sesión. Eso es todo!',\n      },\n      {\n        id: 5,\n        title: 'Gratis de usar',\n        description:\n          'Si no deseas registrarte, aún puedes generar contraseñas pero estas no serán almacenadas',\n      },\n      {\n        id: 6,\n        title: 'Revisa la lista de tus contraseñas generadas',\n        description:\n          'Si eres un usuario(a) autenticado(a), todas tus contraseñas serán listadas (la más reciente estará al inicio) y navega con el menu lateral',\n      },\n      {\n        id: 7,\n        title: 'Ingresa tu contraseña inicial',\n        description:\n          'Si lo prefieres, puedes ingresar una contraseña inicial cuando estés creando un nuevo registro, de lo contrarario genera una contraseña',\n      },\n      {\n        id: 8,\n        title: 'Actualiza tus contraseñas existentes',\n        description:\n          'Para evitar crear nuevos registros, puedes actualizar/editar un constraseña ya existente y guardar los cambios',\n      },\n      {\n        id: 9,\n        title: 'Comenzemos!!',\n        description: 'Ahora ya estás listo(a) para usar Passvault!',\n      },\n    ],\n  },\n};\n","export default {\n  en: {\n    editTitle: 'Password Edit',\n    generatorTitle: 'Password Generator',\n    isEdit: '(Only)',\n    heading: 'Configure your password',\n    placeOwnPassword: 'Place your own password',\n    passwordLength: 'Password length',\n    checkboxEasy2Read: 'Easy to read',\n    checkboxAllChar: 'All characters',\n    checkboxUppercase: 'Uppercase',\n    checkboxLowercase: 'Lowercase',\n    checkboxNumbers: 'Numbers',\n    checkboxSymbols: 'Symbols',\n    socialMedia: 'Social media',\n    description: 'Description',\n    descriptionPlaceholder: 'Type here...',\n    createButton: 'Save',\n    editButton: 'Edit',\n  },\n  es: {\n    editTitle: 'Editor de contraseña',\n    generatorTitle: 'Generador de contraseñas',\n    isEdit: '(Únicamente)',\n    heading: 'Configura tu contraseña',\n    placeOwnPassword: 'Ingresa tu propia contraseña',\n    passwordLength: 'Tamaño de la contraseña',\n    checkboxEasy2Read: 'Fácil de leer',\n    checkboxAllChar: 'Todos los caracteres',\n    checkboxUppercase: 'Mayúsculas',\n    checkboxLowercase: 'Minúsculas',\n    checkboxNumbers: 'Números',\n    checkboxSymbols: 'Símbolos',\n    socialMedia: 'Plataforma web',\n    description: 'Descripción',\n    descriptionPlaceholder: 'Ingresa tu descripción...',\n    createButton: 'Guardar',\n    editButton: 'Editar',\n  },\n};\n","import { createContext } from 'react';\nimport { I18n } from 'i18n-js';\nimport getTranslations from 'utils/getTranslations';\nimport passwordListTranslations from 'languages/passwordListTranslations';\nimport modalTranslations from 'languages/modalTranslations';\nimport sidebarTranslations from 'languages/sidebarTranslations';\nimport infoMessagesTranslations from 'languages/infoMessagesTranslations';\nimport drawerTranslations from 'languages/drawerTranslations';\nimport loginSignupTranslations from 'languages/loginSignupTranslations';\nimport onBoardingTranslations from 'languages/onBoardingTranslations';\nimport passwordGenTranslations from 'languages/passwordGenTranslations';\n\nexport const TranslationsContext = createContext<{\n  drawerTranslations: I18n;\n  infoMessagesTranslations: I18n;\n  loginSignupTranslations: I18n;\n  modalTranslations: I18n;\n  onBoardingTranslations: I18n;\n  passwordGenTranslations: I18n;\n  passwordListTranslations: I18n;\n  sidebarTranslations: I18n;\n}>({\n  drawerTranslations: getTranslations(drawerTranslations, 'en'),\n  infoMessagesTranslations: getTranslations(infoMessagesTranslations, 'en'),\n  loginSignupTranslations: getTranslations(loginSignupTranslations, 'en'),\n  modalTranslations: getTranslations(modalTranslations, 'en'),\n  onBoardingTranslations: getTranslations(onBoardingTranslations, 'en'),\n  passwordGenTranslations: getTranslations(passwordGenTranslations, 'en'),\n  passwordListTranslations: getTranslations(passwordListTranslations, 'en'),\n  sidebarTranslations: getTranslations(sidebarTranslations, 'en'),\n});\n","import React, { Dispatch, useContext, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { Animated, FlatList } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { setIsRequest } from 'reduxStore/slices/applicationStatusSlice';\nimport { OnBoarding, Props as RenderProps } from 'screens/OnBoarding/onBoarding';\nimport { Slide, slides } from 'screens/OnBoarding/slides';\nimport { setOnBoardingViewed } from 'utils/localStorageFuncs';\nimport { TranslationsContext } from 'contexts/translationsContext';\n\nconst OnBoardingContainer = ({ children }: { children: typeof OnBoarding }) => {\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\n  const scrollX = useRef<Animated.Value>(new Animated.Value(0)).current;\n  const slidesRef = useRef<FlatList>(null);\n  const viewConfig = useRef({ viewAreaCoveragePercentThreshold: 50 }).current;\n  const navigation: NativeStackNavigationProp<any> = useNavigation();\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n  const { onBoardingTranslations } = useContext(TranslationsContext);\n\n  const translations: {\n    id: number;\n    title: string;\n    description: string;\n  }[] = onBoardingTranslations.get('slides');\n\n  const translatedSlides: Array<Slide> = slides.map((slide, index) => ({\n    ...slide,\n    title: translations[index].title,\n    description: translations[index].description,\n  }));\n\n  const viewableItemsChanged = useRef((item: { viewableItems: any }) => {\n    const { viewableItems } = item;\n    setCurrentIndex(viewableItems[0].index);\n  }).current;\n\n  const scrollTo = () => {\n    if (currentIndex < slides.length - 1) {\n      slidesRef.current?.scrollToIndex({ index: currentIndex + 1 });\n    } else {\n      setOnBoardingViewed('true');\n      dispatch(setIsRequest());\n      navigation.replace('Login');\n    }\n  };\n\n  return children({\n    slides: translatedSlides,\n    currentIndex,\n    scrollX,\n    slidesRef,\n    viewableItemsChanged,\n    viewConfig,\n    scrollTo,\n  });\n};\n\nexport default () => (\n  <OnBoardingContainer>\n    {(renderProps: RenderProps) => <OnBoarding {...renderProps} />}\n  </OnBoardingContainer>\n);\n","import { createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth';\nimport { clearUserDataFromLS, setUserData2LS } from 'utils/localStorageFuncs';\nimport { signOut as firebaseSignOut } from '@firebase/auth';\nimport { auth } from 'services/firebase';\n\nimport { logger } from 'react-native-logs';\n\nconst log = logger.createLogger();\n\nexport const signIn = (username: string) => {\n  signInWithEmailAndPassword(auth, `${username}@example.com`, username.toLowerCase())\n    .then((userCredentials) => {\n      const { user } = userCredentials;\n\n      setUserData2LS(user?.uid, user?.email);\n    })\n    .catch((error) => {\n      log.error({ exception: error.message });\n    });\n};\n\nexport const signOut = () =>\n  firebaseSignOut(auth)\n    .then(() => {\n      clearUserDataFromLS();\n    })\n    .catch((error) => {\n      log.error({ exception: error.message });\n    });\n\nexport const signUp = (username: string) => {\n  createUserWithEmailAndPassword(auth, `${username}@example.com`, username.toLowerCase())\n    .then((userCredentials) => {\n      const { user } = userCredentials;\n      log.info('User signed up: ', user?.uid);\n    })\n    .catch((error) => {\n      log.error({ exception: error.message });\n    });\n};\n","import { ToastAndroid } from 'react-native';\n\nexport const showInfoMessage = (message: string) => {\n  ToastAndroid.show(message, ToastAndroid.SHORT);\n};\n","import React, { useCallback } from 'react';\nimport { Platform, TouchableOpacity } from 'react-native';\nimport { Feather } from '@expo/vector-icons';\n\nimport { popoverMessage } from 'utils/constants';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport { useDispatch } from 'react-redux';\nimport { setSnackbarMessage, setSnackbarVisible } from 'reduxStore/slices/uiElementsSlice';\n\nexport const CustomPopover = ({ touchableRef }: Props) => {\n  const dispatch = useDispatch();\n\n  const onPress = useCallback(() => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(popoverMessage);\n    } else {\n      dispatch(setSnackbarMessage({ snackbarMessage: popoverMessage }));\n      dispatch(setSnackbarVisible({ snackbarVisible: true }));\n    }\n  }, []);\n\n  return (\n    <TouchableOpacity ref={touchableRef} onPress={onPress}>\n      <Feather name='info' size={20} color='black' />\n    </TouchableOpacity>\n  );\n};\n\ninterface Props {\n  touchableRef: any;\n}\n","import React from 'react';\nimport { Snackbar } from 'react-native-paper';\n\n// Reference for Icons usage: https://icons.expo.fyi/\n\nexport const CustomSnackbar = ({ message, isSnackbarVisible, onDismiss }: Props) => (\n  <Snackbar visible={isSnackbarVisible} onDismiss={onDismiss} duration={1500}>\n    {message}\n  </Snackbar>\n);\n\ninterface Props {\n  message: string;\n  isSnackbarVisible: boolean;\n  onDismiss: any;\n}\n","import { Platform, StyleSheet } from 'react-native';\n\nexport const screen = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n    marginBottom: 5,\n  },\n});\n\nexport const shadow = StyleSheet.create({\n  container: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n\n    elevation: 5,\n  },\n});\n\nexport const cardView = StyleSheet.create({\n  container: {\n    width: '90%',\n    padding: 10,\n    backgroundColor: '#FFF',\n    borderRadius: 5,\n    marginBottom: 15,\n    justifyContent: 'center',\n  },\n});\n\nexport const passwordStyle = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n  },\n  inputContainer: {\n    margin: 10,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  input: {\n    width: Platform.OS === 'web' ? '85%' : '75%',\n    borderWidth: 1,\n    borderColor: '#000',\n    backgroundColor: 'white',\n    paddingHorizontal: 15,\n    paddingVertical: 7,\n    borderRadius: 10,\n    textAlign: 'left',\n    fontFamily: Platform.OS === 'ios' ? 'Courier New' : 'monospace',\n    fontWeight: 'bold',\n    fontSize: Platform.OS === 'web' ? 16 : 20,\n    outlineStyle: 'none',\n  },\n  icons: {\n    marginLeft: 15,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n});\n\nexport const configuration = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n  },\n  textContainer: {\n    margin: 10,\n    justifyContent: 'flex-start',\n  },\n  textHeader: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  passwordLengthContainer: {\n    padding: 10,\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n  },\n  inputLength: {\n    width: Platform.OS === 'web' ? '15%' : '20%',\n    borderWidth: 1,\n    borderColor: '#000',\n    backgroundColor: 'white',\n    paddingHorizontal: 7,\n    paddingVertical: 10,\n    marginRight: 5,\n    borderRadius: 10,\n    textAlign: 'center',\n    fontWeight: 'bold',\n    outlineStyle: 'none',\n  },\n  lengthSliderContainer: {\n    padding: 10,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n  },\n  switchToggle: { flexDirection: 'row', padding: 10, alignItems: 'center' },\n});\n\nexport const checkBox = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    marginTop: 15,\n    justifyContent: 'space-around',\n  },\n  section: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  paragraph: {\n    fontSize: 15,\n  },\n  checkbox: {\n    margin: 8,\n  },\n});\n","export type SVGProps = Readonly<{\n  width?: number;\n  height?: number;\n  fillOpacity?: number;\n  variant?: SVGVariant;\n}>;\n\nexport type SVGVariant = Readonly<{\n  fillColor: string;\n  bgFillColor?: string;\n}>;\n\nconst byDefault: SVGVariant = {\n  fillColor: '#000',\n  bgFillColor: '#FFF',\n};\n\nexport const Variant = {\n  byDefault,\n};\n","import React from 'react';\nimport PassvaultLogoIcon from './components/PassvaultLogoIcon';\n\nconst Icons: { [key: string]: React.ElementType } = {\n  PassvaultLogoIcon,\n};\n\nexport default Icons;\n","import React from 'react';\nimport { SVGProps, Variant } from 'components/SVGs/SVGProps';\nimport Svg, { Path } from 'react-native-svg';\n\nconst PassvaultLogoIcon = ({\n  width = 1024,\n  height = 1024,\n  variant = Variant.byDefault,\n}: SVGProps) => (\n  <Svg viewBox='0 0 261.48 261.49' width={width} height={height} fill='none'>\n    <Path\n      fill={variant?.fillColor}\n      d='M204,0H57.46A57.46,57.46,0,0,0,0,57.46V204a57.45,57.45,0,0,0,57.46,57.46H204A57.45,57.45,0,0,0,261.48,204V57.46A57.46,57.46,0,0,0,204,0ZM188.34,118.45a38.86,38.86,0,0,1-15.79,15.69q-10.23,5.56-24.2,5.57h-33v71.57H88V196H67.57v-17H88v-17H67.57v-17H88V50.22h61.14q15.39,0,25.21,5.87a36.9,36.9,0,0,1,14.68,16,52.73,52.73,0,0,1,4.86,23.09A47.54,47.54,0,0,1,188.34,118.45Z'\n    />\n    <Path\n      fill={variant?.fillColor}\n      d='M166.37,95.17q0,10.53-6,16.7t-17.72,6.18H115.35V71.88H143.7q11.33,0,17,6T166.37,95.17Z'\n    />\n  </Svg>\n);\n\nexport default PassvaultLogoIcon;\n","import React from 'react';\nimport { IDENTS } from 'components/SVGs/Idents';\nimport { SVGVariant } from 'components/SVGs/SVGProps';\nimport Icons from 'components/SVGs/Icons';\n\nexport type IdentValue = typeof IDENTS[number];\n\ntype Props = Readonly<{\n  name: IdentValue;\n  width?: number;\n  height?: number;\n  fillOpacity?: number;\n  variant?: SVGVariant;\n}>;\n\nconst Icon = ({ name, ...rest }: Props) => {\n  const IconComponent = Icons[name];\n\n  return <IconComponent {...rest} />;\n};\n\nexport default Icon;\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    rowGap: 5,\n    padding: 40,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  inputContainer: {\n    marginTop: 30,\n    width: '100%',\n  },\n  input: {\n    backgroundColor: 'white',\n    paddingHorizontal: 15,\n    paddingVertical: 10,\n    borderRadius: 40,\n    marginTop: 10,\n    outlineStyle: 'none',\n  },\n  buttonContainer: {\n    width: '80%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  button: {\n    backgroundColor: appColors.primary,\n    width: '70%',\n    padding: 10,\n    borderRadius: 40,\n    alignItems: 'center',\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: '700',\n    fontSize: 16,\n  },\n  buttonOutLine: {\n    backgroundColor: 'white',\n    marginTop: 5,\n    borderColor: appColors.primary,\n    borderWidth: 2,\n  },\n  buttonOutLineText: {\n    color: '#4F4F4F',\n    fontWeight: '700',\n    fontSize: 16,\n  },\n  loginImage: {\n    width: 200,\n    height: 200,\n    marginBottom: 20,\n  },\n  tooltipImage: {},\n  linkContainer: {\n    width: '70%',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  link: {\n    marginRight: 3,\n  },\n  linkText: {\n    fontSize: 15,\n  },\n});\n\nexport default styles;\n","import React, { useContext } from 'react';\nimport {\n  Text,\n  TextInput,\n  View,\n  TouchableOpacity,\n  Platform,\n  TextInputKeyPressEventData,\n} from 'react-native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport { CustomPopover } from 'components/Popover/popover';\nimport { CustomSnackbar } from 'components/CustomSnackbar/customSnackbar';\nimport { appColors, popoverMessage } from 'utils/constants';\nimport { shadow } from 'screens/PasswordGenerator/styles';\nimport Icon from 'components/SVGs/Icon';\nimport { I18n } from 'i18n-js';\nimport styles from './styles';\nimport { TranslationsContext } from '../../contexts/translationsContext';\nimport loginSignupTranslations from '../../languages/loginSignupTranslations';\n\nconst webStyles: string =\n  Platform.OS === 'web'\n    ? `\n    self-center\n    w-full\n    sm:w-11/12\n    md:w-1/2\n    lg:w-5/12\n    xl:w-[28%]`\n    : '';\n\nexport const Login = ({\n  navigation,\n  username,\n  isRequesting,\n  snackbarVisible,\n  touchableRef,\n  handlers,\n}: Props) => {\n  const { loginSignupTranslations } = useContext(TranslationsContext);\n  const { handleOnChangeText, handleLogin, handleOnKeyPress, handleOnDismiss } = handlers;\n\n  if (isRequesting) return <LoadingIndicator />;\n\n  return (\n    <View className={webStyles} style={styles.container}>\n      <Icon\n        name='PassvaultLogoIcon'\n        width={130}\n        height={130}\n        variant={{ fillColor: appColors.primary }}\n      />\n      <View style={styles.inputContainer}>\n        <TextInput\n          placeholder={loginSignupTranslations.t('usernamePlaceholder')}\n          value={username}\n          style={[styles.input, shadow.container]}\n          onChangeText={handleOnChangeText}\n          onKeyPress={handleOnKeyPress}\n        />\n      </View>\n\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={handleLogin} style={styles.button}>\n          <Text style={styles.buttonText}>{loginSignupTranslations.t('loginButton')}</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          onPress={() => {\n            navigation.navigate('SignUp');\n          }}\n          style={[styles.button, styles.buttonOutLine]}\n        >\n          <Text style={styles.buttonOutLineText}>{loginSignupTranslations.t('signupButton')}</Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.linkContainer}>\n        <TouchableOpacity\n          onPress={() => {\n            navigation.navigate('PasswordGenerator');\n          }}\n          style={styles.link}\n        >\n          <Text style={styles.linkText}>{loginSignupTranslations.t('tooltip')} </Text>\n        </TouchableOpacity>\n\n        <CustomPopover touchableRef={touchableRef} />\n      </View>\n\n      <CustomSnackbar\n        message={popoverMessage}\n        isSnackbarVisible={snackbarVisible}\n        onDismiss={handleOnDismiss}\n      />\n    </View>\n  );\n};\n\nexport interface Props {\n  navigation: DrawerNavigationProp<any>;\n  username: string;\n  isRequesting: boolean;\n  snackbarVisible: boolean;\n  touchableRef: any;\n  handlers: {\n    handleOnChangeText: (text: string) => void;\n    handleLogin: () => void;\n    handleOnKeyPress: ({ nativeEvent }: { nativeEvent: TextInputKeyPressEventData }) => void;\n    handleOnDismiss: () => void;\n  };\n}\n","import React, { useEffect } from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport { BackHandler } from 'react-native';\nimport { auth } from 'services/firebase';\nimport { setUserData, unsetUserData } from 'reduxStore/slices/userSlice';\nimport { useDispatch } from 'react-redux';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\n\nconst useLogin = () => {\n  const dispatch = useDispatch();\n  const navigation = useNavigation<NativeStackNavigationProp<any>>();\n\n  const handleBackAction = () => {\n    if (navigation.canGoBack()) {\n      navigation.goBack();\n    } else {\n      BackHandler.exitApp();\n    }\n    return true;\n  };\n\n  useEffect(() => {\n    const subscription = BackHandler.addEventListener('hardwareBackPress', handleBackAction);\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        dispatch(setUserData({ id: user.uid, email: user.email }));\n        navigation.replace('Drawer');\n      } else {\n        dispatch(unsetUserData());\n      }\n    });\n\n    return () => {\n      subscription.remove();\n    };\n  }, [navigation]);\n};\n\nexport default useLogin;\n","import React, { Dispatch, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { TextInputKeyPressEventData } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { selectRequest, setIsRequest } from 'reduxStore/slices/applicationStatusSlice';\nimport { resetSnackbar, selectSnackbarVisible } from 'reduxStore/slices/uiElementsSlice';\nimport { signIn } from 'services/authFirebase';\nimport { Login, Props as RenderProps } from 'screens/Login/login';\nimport useLogin from 'hooks/useLogin';\n\nconst LoginContainer = ({ children }: { children: typeof Login }) => {\n  const [username, setUsername] = useState<string>('');\n  const navigation: DrawerNavigationProp<any> = useNavigation();\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n\n  const isRequesting: boolean = useSelector(selectRequest);\n  const snackbarVisible: boolean = useSelector(selectSnackbarVisible);\n  const touchableRef = useRef(null);\n\n  useEffect(() => {\n    dispatch(setIsRequest());\n  }, []);\n\n  useLogin();\n\n  const handleLogin = () => {\n    dispatch(setIsRequest());\n    signIn(username);\n  };\n\n  const handleOnKeyPress = ({ nativeEvent }: { nativeEvent: TextInputKeyPressEventData }) => {\n    if (nativeEvent.key === 'Enter') handleLogin();\n  };\n\n  const handleOnChangeText = (text: string) => setUsername(text);\n  const handleOnDismiss = () => dispatch(resetSnackbar());\n\n  const handlers = {\n    handleOnChangeText,\n    handleLogin,\n    handleOnKeyPress,\n    handleOnDismiss,\n  };\n\n  return children({\n    navigation,\n    username,\n    isRequesting,\n    snackbarVisible,\n    touchableRef,\n    handlers,\n  });\n};\n\nexport default () => (\n  <LoginContainer>{(renderProps: RenderProps) => <Login {...renderProps} />}</LoginContainer>\n);\n","import React, { useContext } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  Platform,\n  TextInputKeyPressEventData,\n} from 'react-native';\nimport { NavigationProp } from '@react-navigation/native';\nimport { shadow } from 'screens/PasswordGenerator/styles';\nimport Icon from 'components/SVGs/Icon';\nimport styles from 'screens/Login/styles';\nimport { appColors } from 'utils/constants';\nimport { I18n } from 'i18n-js';\nimport { TranslationsContext } from '../../contexts/translationsContext';\nimport loginSignupTranslations from '../../languages/loginSignupTranslations';\n\nconst webStyles: string =\n  Platform.OS === 'web'\n    ? `\n    self-center\n    w-full\n    sm:w-11/12\n    md:w-1/2\n    lg:w-5/12\n    xl:w-[28%]`\n    : '';\n\nexport const SignUp = ({ navigation, username, handlers }: Props) => {\n  const { loginSignupTranslations } = useContext(TranslationsContext);\n  const { handleSignUp, handleOnChangeText, handleOnKeyPress } = handlers;\n\n  return (\n    <View className={webStyles} style={styles.container}>\n      <Icon\n        name='PassvaultLogoIcon'\n        width={130}\n        height={130}\n        variant={{ fillColor: appColors.primary }}\n      />\n      <View style={styles.inputContainer}>\n        <TextInput\n          placeholder={loginSignupTranslations.t('usernamePlaceholder')}\n          value={username}\n          style={[styles.input, shadow.container]}\n          onChangeText={handleOnChangeText}\n          onKeyPress={handleOnKeyPress}\n        />\n      </View>\n\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={handleSignUp} style={styles.button}>\n          <Text style={styles.buttonText}>{loginSignupTranslations.t('signupButton')}</Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.linkContainer}>\n        <TouchableOpacity onPress={() => navigation.navigate('Login')} style={styles.link}>\n          <Text style={styles.linkText}>{loginSignupTranslations.t('goBack2Login')}</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nexport interface Props {\n  navigation: NavigationProp<any>;\n  username: string;\n  handlers: {\n    handleSignUp: () => void;\n    handleOnChangeText: (text: string) => void;\n    handleOnKeyPress: ({ nativeEvent }: { nativeEvent: TextInputKeyPressEventData }) => void;\n  };\n}\n","import React, { Dispatch, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { TextInputKeyPressEventData } from 'react-native';\nimport { NavigationProp, useNavigation } from '@react-navigation/native';\nimport { setUserData, unsetUserData } from 'reduxStore/slices/userSlice';\nimport { auth } from 'services/firebase';\nimport { signUp } from 'services/authFirebase';\nimport { SignUp, Props as RenderProps } from 'screens/SignUp/signup';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { setIsRequest } from 'reduxStore/slices/applicationStatusSlice';\n\nconst SignupContainer = ({ children }: { children: typeof SignUp }) => {\n  const [username, setUsername] = useState<string>('');\n  const navigation = useNavigation<NavigationProp<any>>();\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n\n  useEffect(\n    () =>\n      auth.onAuthStateChanged((user) => {\n        if (user) {\n          dispatch(setUserData({ id: user.uid, email: user.email }));\n          navigation.navigate('Drawer');\n        } else {\n          dispatch(unsetUserData());\n        }\n      }),\n    [navigation]\n  );\n\n  const handleSignUp = () => {\n    dispatch(setIsRequest());\n    signUp(username);\n  };\n  const handleOnChangeText = (text: string) => setUsername(text);\n  const handleOnKeyPress = ({ nativeEvent }: { nativeEvent: TextInputKeyPressEventData }) => {\n    if (nativeEvent.key === 'Enter') handleSignUp();\n  };\n  const handlers = {\n    handleSignUp,\n    handleOnChangeText,\n    handleOnKeyPress,\n  };\n\n  return children({\n    navigation,\n    username,\n    handlers,\n  });\n};\n\nexport default () => (\n  <SignupContainer>{(renderProps: RenderProps) => <SignUp {...renderProps} />}</SignupContainer>\n);\n","import { Platform, StyleSheet } from 'react-native';\n\nexport const createEditPassword = StyleSheet.create({\n  container: {\n    padding: 10,\n  },\n\n  userInputContainer: {\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    padding: 10,\n    marginBottom: 5,\n  },\n\n  textInput: {\n    borderWidth: 1,\n    borderRadius: 10,\n    paddingHorizontal: Platform.OS === 'web' ? 7 : 8,\n    paddingVertical: Platform.OS === 'web' ? 6 : 3,\n    marginBottom: 5,\n    outlineStyle: 'none',\n  },\n\n  dropdown: {\n    borderRadius: 10,\n    backgroundColor: 'white',\n    paddingHorizontal: Platform.OS === 'web' ? 7 : 8,\n    paddingVertical: Platform.OS === 'web' ? 6 : 3,\n    outlineStyle: 'none',\n  },\n\n  textLabel: { fontSize: 17, marginRight: 5, marginBottom: 5 },\n\n  descriptionLengthIndicator: {\n    fontSize: 12,\n    alignSelf: 'flex-end',\n  },\n\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontWeight: 'bold',\n  },\n});\n","import React, { useContext } from 'react';\nimport { Text, TextInput, View } from 'react-native';\nimport { Picker } from '@react-native-picker/picker';\nimport { Entypo } from '@expo/vector-icons';\n\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport { cardView, shadow } from 'screens/PasswordGenerator/styles';\nimport { appColors } from 'utils/constants';\nimport { createEditPassword } from './styles';\nimport { TranslationsContext } from 'contexts/translationsContext';\n\nexport const CreateEditPasswordConfigurator = ({\n  description,\n  passwordDescriptionMaxLen,\n  socialMediaPicked,\n  socialMediaList,\n  isCreateMode,\n  createEditButtonLabel,\n  handlers,\n}: Props) => {\n  const { passwordGenTranslations } = useContext(TranslationsContext);\n  const { handleOnPress, setDescription, handleOnPickerChange } = handlers;\n\n  if (socialMediaList.length < 1) return <LoadingIndicator />;\n\n  return (\n    <View style={[cardView.container, shadow.container, createEditPassword.container]}>\n      <View style={createEditPassword.userInputContainer}>\n        <Text style={createEditPassword.textLabel}>{passwordGenTranslations.t('socialMedia')}</Text>\n        <Picker\n          style={createEditPassword.dropdown}\n          selectedValue={socialMediaPicked}\n          onValueChange={handleOnPickerChange}\n        >\n          {socialMediaList.map((item: { id: string; name: string }) => {\n            const label = item.name.charAt(0).toUpperCase() + item.name.slice(1);\n            return <Picker.Item key={item.id} label={label} value={item.name} />;\n          })}\n        </Picker>\n      </View>\n\n      <View style={createEditPassword.userInputContainer}>\n        <Text style={createEditPassword.textLabel}>\n          {passwordGenTranslations.t('description')}:\n        </Text>\n        <TextInput\n          style={createEditPassword.textInput}\n          placeholder={passwordGenTranslations.t('descriptionPlaceholder')}\n          maxLength={passwordDescriptionMaxLen}\n          value={description}\n          onChangeText={setDescription}\n        />\n        <Text style={createEditPassword.descriptionLengthIndicator}>\n          {description.length}/{passwordDescriptionMaxLen}\n        </Text>\n      </View>\n\n      <Entypo.Button\n        style={createEditPassword.button}\n        name={isCreateMode ? 'save' : 'edit'}\n        size={24}\n        color={appColors.textTint}\n        backgroundColor={appColors.primary}\n        onPress={handleOnPress}\n      >\n        {createEditButtonLabel}\n      </Entypo.Button>\n    </View>\n  );\n};\n\nexport interface Props {\n  description: string;\n  passwordDescriptionMaxLen: number;\n  socialMediaPicked: string;\n  socialMediaList: any;\n  isCreateMode: boolean;\n  createEditButtonLabel: string;\n  handlers: {\n    handleOnPress: () => void;\n    // eslint-disable-next-line no-unused-vars\n    setDescription: (text: string) => void;\n    // eslint-disable-next-line no-unused-vars\n    handleOnPickerChange: (itemValue: string) => void;\n  };\n}\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectIsEditMode, selectPasswordDescriptionPicked } from 'reduxStore/slices/passwordSlice';\nimport { defaultEmptyPasswordDescription } from 'utils/constants';\n\nconst usePasswordDescription = () => {\n  const [description, setDescription] = useState<string>('');\n  const isEditMode = useSelector(selectIsEditMode);\n  const passwordDescriptionPicked = useSelector(selectPasswordDescriptionPicked);\n\n  useEffect(() => {\n    if (isEditMode) {\n      setDescription(\n        passwordDescriptionPicked !== defaultEmptyPasswordDescription\n          ? passwordDescriptionPicked\n          : ''\n      );\n    }\n  }, []);\n\n  return description;\n};\n\nexport default usePasswordDescription;\n","import React, { useEffect } from 'react';\nimport {\n  selectSocialMediaList,\n  selectSocialMediaPicked,\n  setSocialMediaPicked,\n} from 'reduxStore/slices/socialMediaSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsCreateMode } from 'reduxStore/slices/passwordSlice';\n\nconst useSocialMediaPicked = () => {\n  const dispatch = useDispatch();\n  const isCreateMode = useSelector(selectIsCreateMode);\n  const socialMediaList = useSelector(selectSocialMediaList);\n  const socialMediaPicked = useSelector(selectSocialMediaPicked);\n\n  useEffect(() => {\n    if (isCreateMode) {\n      dispatch(setSocialMediaPicked({ socialMediaPicked: socialMediaList[0].name || '' }));\n    }\n  }, []);\n\n  return socialMediaPicked;\n};\n\nexport default useSocialMediaPicked;\n","import {\n  savePassword2Firebase,\n  setPasswordDescriptionPicked,\n  setPasswordIdPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { setModalMessage, setModalTitle, setModalVisible } from 'reduxStore/slices/uiElementsSlice';\n\nconst handleCreateEditPassword = ({\n  dispatch,\n  navigation,\n  data,\n  modalTitle,\n  modalMessage,\n}: Params) => {\n  const { isEditMode, isCreateMode, password, passwordIdPicked, description, socialMedia } = data;\n\n  const payload = {\n    password,\n    description,\n    socialMedia,\n  };\n\n  if (isEditMode) {\n    dispatch(setPasswordDescriptionPicked({ passwordDescriptionPicked: description }));\n    dispatch(setPasswordIdPicked({ passwordIdPicked }));\n    dispatch(setModalTitle({ modalTitle }));\n    dispatch(setModalMessage({ modalMessage }));\n    dispatch(setModalVisible({ modalVisible: true }));\n  } else if (isCreateMode) {\n    dispatch(savePassword2Firebase(payload));\n    navigation.navigate('PasswordList');\n  }\n\n  return true;\n};\n\ninterface Params {\n  // eslint-disable-next-line no-unused-vars\n  dispatch: (arg0: { payload: any; type: string }) => void;\n  // eslint-disable-next-line no-unused-vars\n  navigation: { navigate: (arg0: string) => void };\n  data: {\n    isEditMode: boolean;\n    isCreateMode: boolean;\n    password: string;\n    passwordIdPicked: any;\n    description: string;\n    socialMedia: string;\n  };\n  modalTitle: string;\n  modalMessage: string;\n}\n\nexport default handleCreateEditPassword;\n","import React, { Dispatch, useContext, useEffect, useState } from 'react';\nimport {\n  CreateEditPasswordConfigurator,\n  Props as RenderProps,\n} from 'components/CreateEditPasswordConfigurator/createEditPasswordConfigurator';\nimport { useNavigation } from '@react-navigation/native';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { selectSocialMediaList, setSocialMediaPicked } from 'reduxStore/slices/socialMediaSlice';\nimport {\n  selectIsCreateMode,\n  selectIsEditMode,\n  selectPassword,\n  selectPasswordIdPicked,\n  selectPasswordPickedWasEncrypted,\n} from 'reduxStore/slices/passwordSlice';\nimport usePasswordDescription from 'hooks/usePasswordDescription';\nimport useSocialMediaPicked from 'hooks/useSocialMediaPicked';\nimport handleCreateEditPassword from 'utils/handleCreateEditPassword';\nimport { TranslationsContext } from 'contexts/translationsContext';\n\nconst CreateEditPwdConfigurationContainer = ({ children }: ContainerProps) => {\n  const navigation = useNavigation<DrawerNavigationProp<any> | NativeStackNavigationProp<any>>();\n  const [description, setDescription] = useState<string>('');\n  const { passwordGenTranslations, modalTranslations } = useContext(TranslationsContext);\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n  const passwordDescriptionMaxLen = 60;\n\n  const socialMediaPicked: string = useSocialMediaPicked();\n  const passwordDescriptionPicked: string = usePasswordDescription();\n  const passwordPickedWasEncrypted: boolean = useSelector(selectPasswordPickedWasEncrypted);\n\n  const socialMediaList = useSelector(selectSocialMediaList);\n  const isCreateMode: boolean = useSelector(selectIsCreateMode);\n  const isEditMode: boolean = useSelector(selectIsEditMode);\n  const passwordIdPicked: string = useSelector(selectPasswordIdPicked);\n  const password: string = useSelector(selectPassword);\n\n  const createEditButtonLabel = passwordGenTranslations.t(\n    isCreateMode ? 'createButton' : 'editButton'\n  );\n\n  useEffect(() => {\n    setDescription(passwordDescriptionPicked);\n  }, [passwordDescriptionPicked]);\n\n  const handleOnPress = () => {\n    handleCreateEditPassword({\n      dispatch,\n      navigation,\n      data: {\n        isEditMode,\n        isCreateMode,\n        password,\n        passwordIdPicked,\n        description,\n        socialMedia: socialMediaPicked,\n      },\n      modalTitle: modalTranslations.t('editModalTitle'),\n      modalMessage: modalTranslations.t(\n        !passwordPickedWasEncrypted ? 'editNonEncryptedModalMessage' : 'editModalMessage'\n      ),\n    });\n  };\n\n  const handleOnPickerChange = (itemValue: string) => {\n    dispatch(setSocialMediaPicked({ socialMediaPicked: itemValue }));\n  };\n\n  const handlers = {\n    handleOnPress,\n    setDescription,\n    handleOnPickerChange,\n  };\n\n  return children({\n    description,\n    passwordDescriptionMaxLen,\n    socialMediaPicked,\n    socialMediaList,\n    isCreateMode,\n    createEditButtonLabel,\n    handlers,\n  });\n};\n\ninterface ContainerProps {\n  children: typeof CreateEditPasswordConfigurator;\n}\n\nexport default () => (\n  <CreateEditPwdConfigurationContainer>\n    {(renderProps: RenderProps) => <CreateEditPasswordConfigurator {...renderProps} />}\n  </CreateEditPwdConfigurationContainer>\n);\n","import React from 'react';\n\nimport { Text, TouchableOpacity } from 'react-native';\nimport Checkbox from 'expo-checkbox';\n\nexport const CustomCheckBox = ({ label, isChecked, disabled, color, onPress }: Props) => (\n  <TouchableOpacity\n    disabled={disabled}\n    style={{ flexDirection: 'row', alignItems: 'center' }}\n    onPress={onPress}\n  >\n    <Checkbox\n      style={{ margin: 8 }}\n      value={isChecked}\n      disabled={disabled}\n      color={isChecked ? color : undefined}\n      onValueChange={onPress}\n    />\n    <Text style={{ fontSize: 14, opacity: !disabled ? 1 : 0.3 }}>{label}</Text>\n  </TouchableOpacity>\n);\n\nconst defaultProps = {\n  disabled: false,\n};\n\ninterface Props {\n  label: string;\n  isChecked: boolean;\n  disabled?: boolean;\n  color: string;\n  onPress: any;\n}\n\nCustomCheckBox.defaultProps = defaultProps;\n","import { generatePassword, resetPasswordGeneratorState } from 'reduxStore/slices/passwordSlice';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport { unsetSocialMediaPicked } from 'reduxStore/slices/socialMediaSlice';\n\n/* Password Generator utils */\nexport const resetConfigurationState = (dispatch: any) => {\n  dispatch(resetPasswordGeneratorState());\n  dispatch(unsetSocialMediaPicked());\n};\n\nexport const handleGeneratePassword = (passwordFromState: string, dispatch: any) => {\n  if (!passwordFromState) {\n    dispatch(generatePassword());\n  }\n};\n\nexport const showAuthenticatedMessage = (\n  userId: string,\n  isCreatedMode: boolean,\n  message: string\n) => {\n  if (userId && isCreatedMode) {\n    showInfoMessage(message);\n  }\n};\n\n/* Password Generator Configurator utils */\nexport const handleLeftCheckboxes = (\n  dispatch: any,\n  setCheck1: any,\n  setCheck2: any,\n  selector1: string,\n  selector2: string,\n  value: boolean,\n  handleOtherCheckboxes: any\n) => {\n  const payloadString1 = `{ \"${selector1}\": ${value} }`;\n  const payloadString2 = `{ \"${selector2}\": ${!value} }`;\n  const payload1 = JSON.parse(payloadString1);\n  const payload2 = JSON.parse(payloadString2);\n\n  dispatch(setCheck1(payload1));\n  dispatch(setCheck2(payload2));\n\n  handleOtherCheckboxes();\n};\n\nexport const handleRightCheckboxes = (\n  value: boolean,\n  checkbox1: boolean,\n  checkbox2: boolean,\n  checkbox3: boolean,\n  dispatch: any,\n  configuratorAction: any,\n  payload: object\n) => {\n  if (checkbox1 || checkbox2 || checkbox3) {\n    dispatch(configuratorAction(payload));\n  }\n};\n\nexport const updateConfiguratorStateAndGeneratePassword = (dispatch: any) => {\n  dispatch(generatePassword());\n};\n","import React, { Dispatch, useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { View } from 'react-native';\n\nimport { CustomCheckBox } from 'components/PasswordConfigurator/CustomCheckBox/customCheckBox';\nimport { checkBox } from 'screens/PasswordGenerator/styles';\nimport {\n  setIsEasy2Read,\n  setIsAllChar,\n  setIsUpperCase,\n  setIsLowerCase,\n  setIsNumbers,\n  setIsSymbols,\n  setIsUpperCaseAndIsLowerCase,\n  setIsNumbersAndIsSymbols,\n  selectIsEasy2Read,\n  selectIsAllChar,\n  selectIsUpperCase,\n  selectIsLowerCase,\n  selectIsNumbers,\n  selectIsSymbols,\n} from 'reduxStore/slices/configuratorSlice';\nimport { generatePassword } from 'reduxStore/slices/passwordSlice';\n\nimport {\n  handleLeftCheckboxes,\n  handleRightCheckboxes,\n  updateConfiguratorStateAndGeneratePassword,\n} from 'utils/configuratorUtils';\nimport { appColors } from 'utils/constants';\nimport { TranslationsContext } from 'contexts/translationsContext';\n\n/* Reference for checkbox usage: [\n  https://docs.expo.dev/versions/latest/sdk/checkbox/,\n  https://snack.expo.dev/\n]\n */\n\ninterface Props {\n  switchEnabled: boolean;\n}\n\ninterface Checkbox {\n  label: string;\n  isChecked: boolean;\n  disabled?: boolean;\n  onPress: () => void;\n}\n\nexport const PasswordConfigurator = ({ switchEnabled }: Props) => {\n  const { passwordGenTranslations } = useContext(TranslationsContext);\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n\n  const isEasy2Read: boolean = useSelector(selectIsEasy2Read);\n  const isAllChar: boolean = useSelector(selectIsAllChar);\n\n  const isUpperCase: boolean = useSelector(selectIsUpperCase);\n  const isLowerCase: boolean = useSelector(selectIsLowerCase);\n  const isNumbers: boolean = useSelector(selectIsNumbers);\n  const isSymbols: boolean = useSelector(selectIsSymbols);\n\n  const handleRightCheckboxesGivenLeftCheckboxes = () => {\n    dispatch(setIsUpperCaseAndIsLowerCase({ isUpperCase: true, isLowerCase: true }));\n\n    if (!isEasy2Read || isAllChar) {\n      dispatch(setIsNumbersAndIsSymbols({ isNumbers: false, isSymbols: false }));\n    } else {\n      dispatch(setIsNumbersAndIsSymbols({ isNumbers: true, isSymbols: true }));\n    }\n\n    dispatch(generatePassword());\n  };\n\n  const leftCheckboxes: Array<Checkbox> = [\n    {\n      label: passwordGenTranslations.t('checkboxEasy2Read'),\n      isChecked: isEasy2Read,\n      onPress: () => {\n        handleLeftCheckboxes(\n          dispatch,\n          setIsEasy2Read,\n          setIsAllChar,\n          'isEasy2Read',\n          'isAllChar',\n          !isEasy2Read,\n          handleRightCheckboxesGivenLeftCheckboxes\n        );\n      },\n    },\n    {\n      label: passwordGenTranslations.t('checkboxAllChar'),\n      isChecked: isAllChar,\n      onPress: () => {\n        handleLeftCheckboxes(\n          dispatch,\n          setIsAllChar,\n          setIsEasy2Read,\n          'isAllChar',\n          'isEasy2Read',\n          !isAllChar,\n          handleRightCheckboxesGivenLeftCheckboxes\n        );\n      },\n    },\n  ];\n\n  const rightCheckboxes: Array<Checkbox> = [\n    {\n      label: passwordGenTranslations.t('checkboxUppercase'),\n      isChecked: isUpperCase,\n      onPress: () => {\n        handleRightCheckboxes(\n          !isUpperCase,\n          isLowerCase,\n          isNumbers,\n          isSymbols,\n          dispatch,\n          setIsUpperCase,\n          { isUpperCase: !isUpperCase }\n        );\n      },\n    },\n    {\n      label: passwordGenTranslations.t('checkboxLowercase'),\n      isChecked: isLowerCase,\n      onPress: () => {\n        handleRightCheckboxes(\n          !isLowerCase,\n          isUpperCase,\n          isNumbers,\n          isSymbols,\n          dispatch,\n          setIsLowerCase,\n          { isLowerCase: !isLowerCase }\n        );\n      },\n    },\n    {\n      label: passwordGenTranslations.t('checkboxNumbers'),\n      isChecked: isNumbers,\n      disabled: !isAllChar || switchEnabled,\n      onPress: () => {\n        handleRightCheckboxes(\n          !isNumbers,\n          isUpperCase,\n          isLowerCase,\n          isSymbols,\n          dispatch,\n          setIsNumbers,\n          {\n            isNumbers: !isNumbers,\n          }\n        );\n      },\n    },\n    {\n      label: passwordGenTranslations.t('checkboxSymbols'),\n      isChecked: isSymbols,\n      disabled: !isAllChar || switchEnabled,\n      onPress: () => {\n        handleRightCheckboxes(\n          !isSymbols,\n          isUpperCase,\n          isLowerCase,\n          isNumbers,\n          dispatch,\n          setIsSymbols,\n          {\n            isSymbols: !isSymbols,\n          }\n        );\n      },\n    },\n  ];\n\n  return (\n    <View style={checkBox.container}>\n      {/* Left checkboxes */}\n      <View style={{ flexDirection: 'column', marginLeft: -20 }}>\n        {leftCheckboxes.map(({ label, isChecked, onPress }, index) => (\n          <View key={index} style={checkBox.section}>\n            <CustomCheckBox\n              label={label}\n              isChecked={isChecked}\n              disabled={switchEnabled}\n              color={appColors.primary}\n              onPress={onPress}\n            />\n          </View>\n        ))}\n      </View>\n\n      {/* Right checkboxes */}\n      <View style={{ flexDirection: 'column' }}>\n        {rightCheckboxes.map(({ label, isChecked, disabled, onPress }, index) => (\n          <View key={index} style={checkBox.section}>\n            <CustomCheckBox\n              label={label}\n              isChecked={isChecked}\n              disabled={disabled || switchEnabled}\n              color={appColors.primary}\n              onPress={() => {\n                onPress();\n                updateConfiguratorStateAndGeneratePassword(dispatch);\n              }}\n            />\n          </View>\n        ))}\n      </View>\n    </View>\n  );\n};\n","import { Platform, StyleSheet } from 'react-native';\n\nconst borderWidth = 4;\n\nexport const styles = StyleSheet.create({\n  sliderContainer: {\n    width: Platform.OS === 'web' ? '85%' : '80%',\n    paddingVertical: 10,\n    paddingLeft: 10,\n    flexDirection: 'column',\n  },\n});\n\nexport const trackMarkStyles = StyleSheet.create({\n  activeMark: {\n    borderColor: 'red',\n    borderWidth,\n    left: -borderWidth / 2,\n  },\n  inactiveMark: {\n    borderColor: 'grey',\n    borderWidth,\n    left: -borderWidth / 2,\n  },\n});\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { generatePassword, selectPasswordPicked, setLength } from 'reduxStore/slices/passwordSlice';\n\nimport { View } from 'react-native';\nimport Slider from '@react-native-community/slider';\n\nimport { appColors } from 'utils/constants';\nimport { styles } from './styles';\n\n// Reference: https://youtu.be/MwSudWtT7ps?t=271\n\nconst SliderContainer = ({ switchEnabled, defaultValue }: Props) => {\n  const [value, setValue] = useState(defaultValue);\n  const passwordPicked = useSelector(selectPasswordPicked);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!Number.isNaN(value) && !passwordPicked && !switchEnabled) {\n      // TODO: This flow needs to be updated in future\n      /* If there was a password picked for the edit flow\n       * a new password won't be generated.\n       * */\n      dispatch(setLength({ length: value }));\n      dispatch(generatePassword());\n    }\n  }, [value]);\n\n  return (\n    <View style={styles.sliderContainer}>\n      <Slider\n        disabled={switchEnabled}\n        step={1}\n        value={switchEnabled ? 0 : defaultValue}\n        minimumValue={switchEnabled ? 0 : 6}\n        maximumValue={switchEnabled ? 1 : 50}\n        minimumTrackTintColor={switchEnabled ? appColors.disabledColorSlider : appColors.primary}\n        maximumTrackTintColor={\n          switchEnabled ? appColors.disabledColorSlider : appColors.maximumTintColorSlider\n        }\n        thumbTintColor={switchEnabled ? appColors.disabledColorSlider : appColors.primary}\n        onValueChange={setValue}\n      />\n    </View>\n  );\n};\n\nexport default SliderContainer;\n\ninterface Props {\n  switchEnabled: boolean;\n  defaultValue: number;\n}\n","import React, { useContext } from 'react';\nimport { View, Text, TextInput, TouchableOpacity, Platform, ScrollView } from 'react-native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { Divider, Switch } from 'react-native-paper';\nimport { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\nimport CreateEditPasswordConfigurator from 'components/CreateEditPasswordConfigurator/createEditPwdConfigurationContainer';\nimport { PasswordConfigurator } from 'components/PasswordConfigurator/passwordConfigurator';\nimport { CustomSnackbar } from 'components/CustomSnackbar/customSnackbar';\nimport SliderContainer from 'components/SliderContainer/sliderContainer';\nimport { appColors } from 'utils/constants';\nimport { cardView, shadow, screen, passwordStyle, configuration } from './styles';\nimport { TranslationsContext } from 'contexts/translationsContext';\n\nconst webStyles: string =\n  Platform.OS === 'web'\n    ? `\n    self-center\n    h-full\n    w-full\n    sm:border-l-2\n    sm:border-r-2\n    sm:border-[#3091e0]\n    sm:w-11/12\n    md:w-1/2\n    lg:w-5/12\n    xl:w-[28%]`\n    : '';\n\nexport const PasswordGenerator = ({\n  navigation,\n  scrollViewRef,\n  switchEnabled,\n  mPassword,\n  snackbarObj,\n  passwordFromState,\n  isCreateMode,\n  isEditMode,\n  handlers,\n}: Props) => {\n  const { passwordGenTranslations } = useContext(TranslationsContext);\n  const { snackbarMessage, snackbarVisible } = snackbarObj;\n  const {\n    handleCopyButton,\n    handleRefreshButton,\n    handleOnDismissSnackbar,\n    handleOnChangePassword,\n    handleOnBlurPassword,\n    handleSwitch,\n  } = handlers;\n\n  return (\n    <View className={webStyles}>\n      <ScrollView ref={scrollViewRef}>\n        <View style={screen.container}>\n          <View style={[cardView.container, passwordStyle.container, shadow.container]}>\n            <View style={passwordStyle.inputContainer}>\n              <TextInput\n                showSoftInputOnFocus={switchEnabled}\n                caretHidden={!switchEnabled}\n                style={passwordStyle.input}\n                value={switchEnabled ? mPassword : passwordFromState}\n                onChangeText={handleOnChangePassword}\n                onBlur={handleOnBlurPassword}\n              />\n              <View style={passwordStyle.icons}>\n                <TouchableOpacity onPress={handleCopyButton}>\n                  <MaterialCommunityIcons\n                    style={{ marginRight: 10 }}\n                    name='content-copy'\n                    size={24}\n                    color='grey'\n                  />\n                </TouchableOpacity>\n                <TouchableOpacity onPress={handleRefreshButton}>\n                  <Ionicons name='reload' size={24} color='grey' />\n                </TouchableOpacity>\n              </View>\n            </View>\n          </View>\n\n          <View style={[cardView.container, configuration.container, shadow.container]}>\n            <View style={configuration.textContainer}>\n              <Text style={configuration.textHeader}>{passwordGenTranslations.t('heading')}</Text>\n            </View>\n\n            <Divider style={{ backgroundColor: 'grey' }} />\n\n            {isCreateMode && (\n              <>\n                <View style={configuration.switchToggle}>\n                  <Text style={{ fontSize: 17 }}>\n                    {passwordGenTranslations.t('placeOwnPassword')}\n                  </Text>\n                  <Switch\n                    style={{ marginLeft: 10 }}\n                    value={switchEnabled}\n                    onValueChange={handleSwitch}\n                    color={appColors.primary}\n                  />\n                </View>\n\n                <Divider style={{ backgroundColor: 'grey' }} />\n              </>\n            )}\n\n            <View style={configuration.passwordLengthContainer}>\n              <Text style={{ fontSize: 17 }}>{passwordGenTranslations.t('passwordLength')}</Text>\n              <View style={configuration.lengthSliderContainer}>\n                <TextInput\n                  showSoftInputOnFocus={false}\n                  caretHidden\n                  style={configuration.inputLength}\n                  keyboardType='numeric'\n                  value={passwordFromState.length.toString()}\n                />\n                <SliderContainer\n                  switchEnabled={switchEnabled}\n                  defaultValue={isEditMode ? passwordFromState.length : 10}\n                />\n              </View>\n            </View>\n\n            <Divider style={{ backgroundColor: 'grey' }} />\n\n            <PasswordConfigurator switchEnabled={switchEnabled} />\n          </View>\n\n          {(isCreateMode || isEditMode) && <CreateEditPasswordConfigurator />}\n        </View>\n      </ScrollView>\n\n      <CustomSnackbar\n        message={snackbarMessage}\n        isSnackbarVisible={snackbarVisible}\n        onDismiss={handleOnDismissSnackbar}\n      />\n    </View>\n  );\n};\n\nexport interface Props {\n  navigation: DrawerNavigationProp<any> | NativeStackNavigationProp<any>;\n  scrollViewRef: React.RefObject<ScrollView>;\n  switchEnabled: boolean;\n  mPassword: string;\n  snackbarObj: {\n    snackbarMessage: string;\n    snackbarVisible: boolean;\n  };\n  passwordFromState: string;\n  isCreateMode: boolean;\n  isEditMode: boolean;\n  handlers: {\n    handleCopyButton: () => void;\n    handleRefreshButton: () => void;\n    handleOnDismissSnackbar: () => void;\n    handleOnChangePassword: (text: string) => void;\n    handleOnBlurPassword: () => void;\n    handleSwitch: () => void;\n  };\n}\n","import React, { Dispatch, useContext, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { Platform } from 'react-native';\nimport { resetConfigurationState, showAuthenticatedMessage } from 'utils/configuratorUtils';\nimport { setSnackbarMessage, setSnackbarVisible } from 'reduxStore/slices/uiElementsSlice';\nimport {\n  resetPasswordPicked,\n  selectIsCreateMode,\n  selectIsEditMode,\n} from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { TranslationsContext } from 'contexts/translationsContext';\n\nconst useGeneratorMessage = () => {\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n  const userId: string = useSelector(selectUserId);\n  const isCreateMode: boolean = useSelector(selectIsCreateMode);\n  const isEditMode: boolean = useSelector(selectIsEditMode);\n  const { infoMessagesTranslations } = useContext(TranslationsContext);\n\n  useEffect(() => {\n    if (Platform.OS === 'android') {\n      showAuthenticatedMessage(\n        userId,\n        isCreateMode,\n        infoMessagesTranslations.t('about2CreatePassword')\n      );\n    } else {\n      dispatch(\n        setSnackbarMessage({ snackbarMessage: infoMessagesTranslations.t('about2CreatePassword') })\n      );\n      dispatch(setSnackbarVisible({ snackbarVisible: true }));\n    }\n\n    (() => isEditMode && dispatch(resetPasswordPicked()))();\n\n    return () => {\n      resetConfigurationState(dispatch);\n    };\n  }, []);\n\n  return true;\n};\n\nexport default useGeneratorMessage;\n","import React, { useContext, useLayoutEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectIsEditMode } from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { useNavigation } from '@react-navigation/native';\nimport { TranslationsContext } from '../contexts/translationsContext';\n\nconst useGeneratorPageTitle = () => {\n  const navigation = useNavigation();\n  const userId: string = useSelector(selectUserId);\n  const isEditMode: boolean = useSelector(selectIsEditMode);\n  const { passwordGenTranslations } = useContext(TranslationsContext);\n\n  const screenTitle = isEditMode\n    ? passwordGenTranslations.t('editTitle')\n    : `${passwordGenTranslations.t('generatorTitle')} ${\n        !userId ? passwordGenTranslations.t('isEdit') : ''\n      }`;\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      title: screenTitle,\n    });\n  });\n\n  return true;\n};\n\nexport default useGeneratorPageTitle;\n","import React, { Dispatch, useContext, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { Clipboard, Platform, ScrollView } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport {\n  resetSnackbar,\n  selectSnackbarMessage,\n  selectSnackbarVisible,\n  setModalMessage,\n  setModalTitle,\n  setModalVisible,\n  setSnackbarMessage,\n  setSnackbarVisible,\n} from 'reduxStore/slices/uiElementsSlice';\nimport {\n  generatePassword,\n  selectIsCreateMode,\n  selectIsEditMode,\n  selectPassword,\n  selectPasswordIdPicked,\n  selectPasswordPickedWasEncrypted,\n  setPassword,\n} from 'reduxStore/slices/passwordSlice';\nimport {\n  PasswordGenerator,\n  Props as RenderProps,\n} from 'screens/PasswordGenerator/passwordGenerator';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport useGeneratorMessage from 'hooks/useGeneratorMessage';\nimport useGeneratorPageTitle from 'hooks/useGeneratorPageTitle';\nimport { TranslationsContext } from 'contexts/translationsContext';\n\nconst PasswordGeneratorContainer = ({ children }: { children: typeof PasswordGenerator }) => {\n  const scrollViewRef = useRef<ScrollView>(null);\n  const [switchEnabled, setSwitchEnabled] = useState<boolean>(false);\n  const [mPassword, mSetPassword] = useState<string>('');\n  const { infoMessagesTranslations, modalTranslations } = useContext(TranslationsContext);\n  const navigation: DrawerNavigationProp<any> | NativeStackNavigationProp<any> = useNavigation();\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n\n  const snackbarMessage: string = useSelector(selectSnackbarMessage);\n  const snackbarVisible: boolean = useSelector(selectSnackbarVisible);\n  const passwordIdPicked: string = useSelector(selectPasswordIdPicked);\n  const passwordFromState: string = useSelector(selectPassword);\n  const passwordPickedWasEncrypted: boolean = useSelector(selectPasswordPickedWasEncrypted);\n  const isCreateMode: boolean = useSelector(selectIsCreateMode);\n  const isEditMode: boolean = useSelector(selectIsEditMode);\n\n  const handleCopyButton = () => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(infoMessagesTranslations.t('copied2Clipboard'));\n    } else {\n      dispatch(\n        setSnackbarMessage({ snackbarMessage: infoMessagesTranslations.t('copied2Clipboard') })\n      );\n      dispatch(setSnackbarVisible({ snackbarVisible: true }));\n    }\n\n    Clipboard.setString(passwordFromState);\n  };\n\n  const handleRefreshButton = () => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(infoMessagesTranslations.t('newPassword'));\n    } else {\n      dispatch(setSnackbarMessage({ snackbarMessage: infoMessagesTranslations.t('newPassword') }));\n      dispatch(setSnackbarVisible({ snackbarVisible: true }));\n    }\n\n    dispatch(generatePassword());\n  };\n\n  const handleOnDismissSnackbar = () => {\n    dispatch(resetSnackbar());\n  };\n\n  const handleOnChangePassword = (text: string) => {\n    if (switchEnabled) {\n      mSetPassword(text);\n    }\n  };\n\n  const handleOnBlurPassword = () => {\n    if (switchEnabled) {\n      dispatch(setPassword({ password: mPassword }));\n    }\n  };\n\n  const handleSwitch = () => {\n    setSwitchEnabled(!switchEnabled);\n    if (switchEnabled) {\n      mSetPassword('');\n      dispatch(generatePassword());\n    }\n  };\n\n  useEffect(() => {\n    if (!passwordPickedWasEncrypted && isEditMode) {\n      if (Platform.OS === 'android') {\n        alert(modalTranslations.t('encryptPwdMessage'));\n      } else {\n        dispatch(setModalTitle({ modalTitle: modalTranslations.t('modalTitle') }));\n        dispatch(setModalMessage({ modalMessage: modalTranslations.t('encryptPwdMessage') }));\n        dispatch(setModalVisible({ modalVisible: true }));\n      }\n    }\n  }, []);\n\n  useGeneratorMessage();\n  useGeneratorPageTitle();\n\n  const snackbarObj = { snackbarMessage, snackbarVisible };\n  const handlers = {\n    handleCopyButton,\n    handleRefreshButton,\n    handleOnDismissSnackbar,\n    handleOnChangePassword,\n    handleOnBlurPassword,\n    handleSwitch,\n  };\n\n  return children({\n    navigation,\n    scrollViewRef,\n    switchEnabled,\n    mPassword,\n    snackbarObj,\n    passwordFromState,\n    isCreateMode,\n    isEditMode,\n    handlers,\n  });\n};\n\nexport default () => (\n  <PasswordGeneratorContainer>\n    {(renderProps: RenderProps) => <PasswordGenerator {...renderProps} />}\n  </PasswordGeneratorContainer>\n);\n","import React from 'react';\nimport { Image } from 'react-native';\n\nimport { AntDesign } from '@expo/vector-icons';\n\nimport {\n  imageSourceRetriever,\n  socialMediaIcon,\n  socialMediaIconColor,\n} from 'utils/imageDataRetriever';\n\nexport const SocialMediaIcon = ({ style, socialMedia }: Props) => {\n  if (['amazon', 'discord', 'google', 'slack', 'okta', 'outlook', 'twitch'].includes(socialMedia)) {\n    const imageSource = imageSourceRetriever(socialMedia);\n\n    // @ts-ignore\n    return <Image style={style} source={imageSource} />;\n  }\n  const getSocialMedia: any = socialMediaIcon(socialMedia);\n  const socialMediaColor = socialMediaIconColor(socialMedia);\n\n  return <AntDesign style={style} name={getSocialMedia} size={24} color={socialMediaColor} />;\n};\n\ninterface Props {\n  style: any;\n  socialMedia: string;\n}\n","interface ObjectCondition {\n  [key: string]: string;\n}\n\nexport const imageSourceRetriever = (socialMedia: string) => {\n  const images: ObjectCondition = {\n    amazon: require('assets/amazon.png'),\n    discord: require('assets/discord.png'),\n    google: require('assets/google.png'),\n    slack: require('assets/slack.png'),\n    okta: require('assets/okta.png'),\n    outlook: require('assets/outlook.png'),\n    twitch: require('assets/twitch.png'),\n    '': '',\n  };\n\n  return images[socialMedia];\n};\n\nexport const socialMediaIcon = (socialMedia: string) => {\n  const images: ObjectCondition = {\n    facebook: 'facebook-square',\n    linkedin: 'linkedin-square',\n    other: 'questioncircle',\n    '': socialMedia,\n  };\n\n  return images[socialMedia] || socialMedia;\n};\n\nexport const socialMediaIconColor = (socialMedia: string) => {\n  const colors: ObjectCondition = {\n    facebook: '#4267B2',\n    twitter: '#00ACEE',\n    linkedin: '#2867B2',\n  };\n\n  return colors[socialMedia] || 'black';\n};\n","import { Platform, StyleSheet } from 'react-native';\n\nexport const item = StyleSheet.create({\n  container: {\n    backgroundColor: '#FFF',\n    padding: 10,\n    borderRadius: 5,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginLeft: 3,\n    marginRight: 3,\n    marginBottom: 10,\n\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n\n    elevation: 5,\n  },\n\n  socialIconAndPasswordInfo: { flex: 1, width: '50%', flexDirection: 'row', alignItems: 'center' },\n\n  passwordAndDescription: {\n    width: '81%',\n    paddingHorizontal: 5,\n    flexDirection: 'column',\n  },\n\n  descriptionTextLabel: { fontSize: 13, marginBottom: 5 },\n\n  passwordInput: {\n    fontFamily: Platform.OS === 'ios' ? 'Courier New' : 'monospace',\n    fontWeight: 'bold',\n    fontSize: Platform.OS === 'web' ? 15 : 14,\n  },\n});\n\nexport const icons = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n  },\n\n  socialMedia: { width: 24, height: 24, marginRight: 10 },\n\n  singleIcon: {\n    marginRight: 10,\n  },\n});\n","import React, { Dispatch, useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  selectPassword,\n  selectPasswords,\n  setIsDeleteMode,\n  setIsEditMode,\n  setPassword,\n  setPasswordDescriptionPicked,\n  setPasswordIdPicked,\n  setPasswordPicked,\n  setPasswordPickedWasEncrypted,\n} from 'reduxStore/slices/passwordSlice';\n\nimport { Clipboard, Platform, TouchableOpacity, View } from 'react-native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { Entypo, FontAwesome, Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\n\nimport { icons } from 'components/PasswordItem/styles';\n\nimport { appColors, PasswordI } from 'utils/constants';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport { setSocialMediaPicked } from 'reduxStore/slices/socialMediaSlice';\nimport {\n  setModalMessage,\n  setModalTitle,\n  setModalVisible,\n  setSnackbarMessage,\n  setSnackbarVisible,\n} from 'reduxStore/slices/uiElementsSlice';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { TranslationsContext } from 'contexts/translationsContext';\n\nexport const PasswordIcons = ({\n  passwordId,\n  socialMedia,\n  description,\n  passwordGenerated,\n  passwordVisible,\n  setPasswordVisible,\n  navigation,\n}: Props) => {\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n  const { infoMessagesTranslations, modalTranslations } = useContext(TranslationsContext);\n  const mSocialMedia: string = socialMedia.charAt(0).toUpperCase() + socialMedia.slice(1);\n  const passwords: Array<PasswordI> = useSelector(selectPasswords);\n\n  const handleShowHidePassword = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  const handleCopyButton = () => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(infoMessagesTranslations.t('copied2Clipboard'));\n    } else {\n      dispatch(\n        setSnackbarMessage({ snackbarMessage: infoMessagesTranslations.t('copied2Clipboard') })\n      );\n      dispatch(setSnackbarVisible({ snackbarVisible: true }));\n    }\n\n    Clipboard.setString(passwordGenerated);\n  };\n\n  const handleEditButton = () => {\n    passwords.map(({ id, pwdWasCorrectlyEncrypted }) => {\n      if (id === passwordId) {\n        dispatch(\n          setPasswordPickedWasEncrypted({ passwordPickedWasEncrypted: pwdWasCorrectlyEncrypted })\n        );\n      }\n    });\n\n    dispatch(setIsEditMode({ isEditMode: true }));\n    dispatch(setPasswordIdPicked({ passwordIdPicked: passwordId }));\n    dispatch(setPasswordPicked({ passwordPicked: passwordGenerated }));\n    dispatch(setPassword({ password: passwordGenerated }));\n    dispatch(setPasswordDescriptionPicked({ passwordDescriptionPicked: description }));\n    dispatch(setSocialMediaPicked({ socialMediaPicked: socialMedia }));\n    navigation.navigate('PasswordGenerator');\n  };\n\n  const handleDeleteButton = () => {\n    dispatch(setIsDeleteMode({ isDeleteMode: true }));\n    dispatch(setPasswordIdPicked({ passwordIdPicked: passwordId }));\n    dispatch(setModalTitle({ modalTitle: modalTranslations.t('deleteModalTitle') }));\n    dispatch(\n      setModalMessage({\n        modalMessage: modalTranslations.t('deleteModalMessage').replace('PLATFORM', mSocialMedia),\n      })\n    );\n    dispatch(setModalVisible({ modalVisible: true }));\n  };\n\n  return (\n    <View style={icons.container}>\n      <TouchableOpacity onPress={handleShowHidePassword}>\n        <Entypo\n          style={icons.singleIcon}\n          name={passwordVisible ? 'eye' : 'eye-with-line'}\n          size={18}\n          color='grey'\n        />\n      </TouchableOpacity>\n      <TouchableOpacity onPress={handleCopyButton}>\n        <MaterialCommunityIcons\n          style={icons.singleIcon}\n          name='content-copy'\n          size={18}\n          color='grey'\n        />\n      </TouchableOpacity>\n      <TouchableOpacity onPress={handleEditButton}>\n        <FontAwesome style={{ marginRight: 5 }} name='edit' size={18} color='grey' />\n      </TouchableOpacity>\n      <TouchableOpacity onPress={handleDeleteButton}>\n        <Ionicons name='trash' size={18} color={appColors.red} />\n      </TouchableOpacity>\n    </View>\n  );\n};\n\ninterface Props {\n  passwordId: string;\n  socialMedia: string;\n  description: string;\n  passwordGenerated: string;\n  passwordVisible: boolean;\n  setPasswordVisible: any;\n  navigation: DrawerNavigationProp<any>;\n}\n","import React, { useState } from 'react';\nimport { View, Text, TextInput } from 'react-native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\n\nimport { SocialMediaIcon } from 'components/SocialMediaIcon/socialMediaIcon';\nimport { PasswordIcons } from 'components/PasswordIcons/passwordIcon';\n\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { appColors } from 'utils/constants';\nimport { icons, item } from './styles';\n\nexport const PasswordItem = ({\n  passwordId,\n  passwordGenerated,\n  socialMedia,\n  description,\n  pwdWasCorrectlyEncrypted,\n  navigation,\n}: Props) => {\n  const [passwordVisible, setPasswordVisible] = useState(false);\n\n  return (\n    <View style={item.container}>\n      <View style={item.socialIconAndPasswordInfo}>\n        <SocialMediaIcon style={icons.socialMedia} socialMedia={socialMedia} />\n        <View style={item.passwordAndDescription}>\n          <View className='flex flex-row gap-2 items-center mb-1'>\n            <MaterialIcons\n              name={pwdWasCorrectlyEncrypted ? 'enhanced-encryption' : 'no-encryption'}\n              size={17}\n              color={appColors.greyColor}\n            />\n            <Text style={item.descriptionTextLabel}>{description}</Text>\n          </View>\n          <TextInput\n            style={item.passwordInput}\n            showSoftInputOnFocus={false}\n            caretHidden\n            value={passwordGenerated}\n            secureTextEntry={!passwordVisible}\n          />\n        </View>\n      </View>\n      <PasswordIcons\n        passwordId={passwordId}\n        socialMedia={socialMedia}\n        description={description}\n        passwordGenerated={passwordGenerated}\n        passwordVisible={passwordVisible}\n        setPasswordVisible={setPasswordVisible}\n        navigation={navigation}\n      />\n    </View>\n  );\n};\n\ninterface Props {\n  passwordId: string;\n  passwordGenerated: string;\n  socialMedia: string;\n  description: string;\n  pwdWasCorrectlyEncrypted: boolean;\n  navigation: DrawerNavigationProp<any>;\n}\n","import { StyleSheet } from 'react-native';\n\nexport const styles = StyleSheet.create({\n  content: {\n    flexDirection: 'column',\n    backgroundColor: 'white',\n    padding: 25,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 4,\n    borderColor: 'rgba(0, 0, 0, 0.1)',\n  },\n\n  title: {\n    alignSelf: 'flex-start',\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 12,\n  },\n\n  message: {\n    alignSelf: 'flex-start',\n    marginBottom: 10,\n  },\n\n  input: {\n    width: '90%',\n    alignSelf: 'flex-start',\n    borderWidth: 1,\n    borderRadius: 10,\n    marginTop: 15,\n    marginBottom: 20,\n    paddingVertical: 3,\n    paddingHorizontal: 15,\n  },\n\n  buttonContainer: {\n    flexDirection: 'row',\n    alignSelf: 'flex-end',\n  },\n\n  button: {\n    paddingHorizontal: 5,\n  },\n});\n","import React from 'react';\nimport { Text, View } from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport Modal from 'react-native-modal';\nimport { appColors } from 'utils/constants';\n\nimport { styles } from './styles';\n\nexport const CustomModal = (props: {\n  visible: boolean;\n  toggle: any;\n  onSubmit: any;\n  title: string;\n  message: string;\n  noLabel: string;\n  yesLabel: string;\n}) => {\n  const { visible, toggle, onSubmit, title, message, noLabel, yesLabel } = props;\n\n  return (\n    <Modal\n      className='sm:px-20 md:px-40 lg:px-72 xl:px-96 xl:mx-80'\n      isVisible={visible}\n      onBackdropPress={toggle}\n      onBackButtonPress={toggle}\n    >\n      <View style={styles.content}>\n        <Text style={styles.title}>{title}</Text>\n        <Text style={styles.message}>{message}</Text>\n        <View style={styles.buttonContainer}>\n          <View style={styles.button}>\n            <MaterialIcons.Button name='close' onPress={toggle} backgroundColor={appColors.red}>\n              {noLabel}\n            </MaterialIcons.Button>\n          </View>\n          <View style={styles.button}>\n            <MaterialIcons.Button\n              name='check'\n              onPress={onSubmit}\n              backgroundColor={appColors.primary}\n            >\n              {yesLabel}\n            </MaterialIcons.Button>\n          </View>\n        </View>\n      </View>\n    </Modal>\n  );\n};\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#EBEAED',\n  },\n  sectionTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    paddingBottom: 20,\n  },\n  items: {\n    margin: 20,\n  },\n  writeTaskWrapper: {\n    position: 'absolute',\n    bottom: 20,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n  },\n  input: {\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    width: 250,\n    backgroundColor: '#FFF',\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n    borderRadius: 60,\n  },\n  searchInput: {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    outlineStyle: 'none',\n  },\n  addWrapper: {\n    width: 60,\n    height: 60,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    alignItems: 'center',\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n  },\n  addText: {\n    position: 'absolute',\n    alignItems: 'center',\n    fontSize: 45,\n    color: '#C0C0C0',\n  },\n  navWrapper: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  navButtonContainer: {\n    justifyContent: 'center',\n    backgroundColor: '#E13333',\n    width: '78%',\n    padding: 6,\n    marginTop: 2,\n    marginHorizontal: 10,\n    borderRadius: 10,\n  },\n  navButton: {\n    alignItems: 'center',\n    fontSize: 13,\n    fontWeight: '700',\n    color: 'white',\n  },\n\n  fab: {\n    position: 'absolute',\n    margin: 26,\n    right: 0,\n    backgroundColor: appColors.primary,\n  },\n});\n\nexport default styles;\n","import React, { useContext } from 'react';\nimport {\n  View,\n  ScrollView,\n  Platform,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  NativeSyntheticEvent,\n  NativeScrollEvent,\n} from 'react-native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { EvilIcons, Entypo } from '@expo/vector-icons';\nimport { FAB } from 'react-native-paper';\nimport { PasswordItem } from 'components/PasswordItem/passwordItem';\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport { CustomSnackbar } from 'components/CustomSnackbar/customSnackbar';\nimport { CustomModal as Modal } from 'components/CustomModal/customModal';\nimport { appColors, PasswordI } from 'utils/constants';\nimport styles from './styles';\nimport { TranslationsContext } from 'contexts/translationsContext';\n\nconst webStyles: string =\n  Platform.OS === 'web'\n    ? `\n    self-center\n    w-full\n    sm:border-l-2\n    sm:border-r-2\n    sm:border-[#3091e0]\n    sm:w-11/12\n    md:w-1/2\n    lg:w-5/12\n    xl:w-[28%]`\n    : '';\n\nexport const PasswordList = ({\n  navigation,\n  snackbarObj,\n  modalObj,\n  scrollIsClose2Bottom,\n  hasPasswordsStored,\n  passwordsFiltered,\n  searchText,\n  isRequesting,\n  handlers,\n}: Props) => {\n  const { passwordListTranslations, modalTranslations } = useContext(TranslationsContext);\n  const { snackbarVisible, snackbarMessage } = snackbarObj;\n  const { modalTitle, modalMessage, modalVisible } = modalObj;\n  const {\n    handleScrollIsClose2Bottom,\n    handleOnDismissSnackbar,\n    handleOnPressFAB,\n    handleModalToggle,\n    handleModalOnSubmit,\n    handleSearch,\n    handleClearSearch,\n  } = handlers;\n\n  if (isRequesting) return <LoadingIndicator />;\n\n  return (\n    <View className={webStyles} style={styles.container}>\n      {hasPasswordsStored && (\n        <View className='flex flex-row justify-between items-center m-6 px-4 bg-white rounded-3xl'>\n          <View className='w-5/6 md:w-11/12 flex flex-row items-center'>\n            <EvilIcons name='search' size={24} color={appColors.disabledColorSlider} />\n            <TextInput\n              className={`w-full ${Platform.OS === 'web' ? 'p-3' : 'p-2'} outline-none`}\n              style={styles.searchInput}\n              value={searchText}\n              placeholder={passwordListTranslations.t('searchInputPlaceholder')}\n              onChangeText={handleSearch}\n            />\n          </View>\n          <TouchableOpacity onPress={handleClearSearch}>\n            <Entypo name='circle-with-cross' size={20} color={appColors.disabledColorSlider} />\n          </TouchableOpacity>\n        </View>\n      )}\n      {passwordsFiltered.length > 0 ? (\n        <ScrollView\n          scrollEventThrottle={16}\n          onScroll={handleScrollIsClose2Bottom}\n          contentContainerStyle={{ flexGrow: 1 }}\n          keyboardShouldPersistTaps='handled'\n          fadingEdgeLength={150}\n        >\n          <View style={[styles.items, { marginTop: passwordsFiltered.length > 4 ? 0 : 20 }]}>\n            {passwordsFiltered.map(\n              ({\n                id,\n                description,\n                passwordGenerated,\n                socialMedia,\n                pwdWasCorrectlyEncrypted,\n              }: PasswordI) => (\n                <PasswordItem\n                  key={id}\n                  passwordId={id}\n                  passwordGenerated={passwordGenerated}\n                  socialMedia={socialMedia}\n                  description={description}\n                  pwdWasCorrectlyEncrypted={pwdWasCorrectlyEncrypted}\n                  navigation={navigation}\n                />\n              )\n            )}\n          </View>\n        </ScrollView>\n      ) : (\n        <View className='flex flex-1 items-center justify-center'>\n          <Text className='text-md'>{passwordListTranslations.t('noPasswords')}</Text>\n        </View>\n      )}\n      <FAB\n        style={[styles.fab, { bottom: snackbarVisible ? 40 : 0 }]}\n        color={appColors.textTint}\n        visible={!scrollIsClose2Bottom}\n        icon='plus'\n        onPress={handleOnPressFAB}\n      />\n      <CustomSnackbar\n        message={snackbarMessage}\n        isSnackbarVisible={snackbarVisible}\n        onDismiss={handleOnDismissSnackbar}\n      />\n      <Modal\n        visible={modalVisible}\n        toggle={handleModalToggle}\n        onSubmit={handleModalOnSubmit}\n        title={modalTitle}\n        message={modalMessage}\n        noLabel={modalTranslations?.t('noLabel')}\n        yesLabel={modalTranslations?.t('yesLabel')}\n      />\n    </View>\n  );\n};\n\nexport interface Props {\n  navigation: DrawerNavigationProp<any>;\n  snackbarObj: {\n    snackbarVisible: boolean;\n    snackbarMessage: string;\n  };\n  modalObj: {\n    modalTitle: string;\n    modalMessage: string;\n    modalVisible: boolean;\n  };\n  scrollIsClose2Bottom: boolean;\n  hasPasswordsStored: boolean;\n  passwordsFiltered: Array<PasswordI>;\n  searchText: string;\n  isRequesting: boolean;\n  handlers: {\n    handleScrollIsClose2Bottom: (event: NativeSyntheticEvent<NativeScrollEvent>) => void;\n    handleOnDismissSnackbar: () => void;\n    handleOnPressFAB: () => void;\n    handleModalToggle: () => void;\n    handleModalOnSubmit: () => void;\n    handleSearch: (text: string) => void;\n    handleClearSearch: () => void;\n  };\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getSocialMediaListFromFirebase,\n  selectSocialMediaList,\n} from 'reduxStore/slices/socialMediaSlice';\nimport { socialMediaCollection } from 'services/firebase';\n\nconst useSocialMediaFromFirebase = () => {\n  const dispatch = useDispatch();\n  const socialMediaList = useSelector(selectSocialMediaList);\n\n  useEffect(() => {\n    const unsubscribeSocialMediaCollection = socialMediaCollection.onSnapshot(() => {\n      dispatch(getSocialMediaListFromFirebase());\n    });\n\n    // remove those next once the component got unmounted\n    return () => {\n      unsubscribeSocialMediaCollection();\n    };\n  }, []);\n\n  return socialMediaList;\n};\n\nexport default useSocialMediaFromFirebase;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { passwordsCollection } from 'services/firebase';\nimport { getPasswordsFromFirebase, selectPasswords } from 'reduxStore/slices/passwordSlice';\nimport useSocialMediaPicked from 'hooks/useSocialMediaFromFirebase';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\n\nconst usePasswordsFromFirebase = () => {\n  const dispatch = useDispatch();\n  useSocialMediaPicked();\n  const userId = useSelector(selectUserId);\n  const passwords = useSelector(selectPasswords);\n\n  useEffect(() => {\n    const unsubscribePasswordsCollection = passwordsCollection\n      .where('uid', '==', userId)\n      .onSnapshot(() => dispatch(getPasswordsFromFirebase()));\n\n    // remove those next once the component got unmounted\n    return () => {\n      unsubscribePasswordsCollection();\n    };\n  }, []);\n\n  return passwords;\n};\n\nexport default usePasswordsFromFirebase;\n","import React, { Dispatch, useContext, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { NativeScrollEvent, NativeSyntheticEvent, Platform } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { PasswordList, Props as RenderProps } from 'screens/PasswordList/passwordList';\nimport {\n  resetModal,\n  resetSnackbar,\n  selectModalMessage,\n  selectModalTitle,\n  selectModalVisible,\n  selectSnackbarMessage,\n  selectSnackbarVisible,\n  setModalMessage,\n  setModalTitle,\n  setModalVisible,\n} from 'reduxStore/slices/uiElementsSlice';\nimport {\n  deletePasswordFromFirebase,\n  editPasswordFromFirebase,\n  selectIsDeleteMode,\n  selectIsEditMode,\n  setIsCreateMode,\n} from 'reduxStore/slices/passwordSlice';\nimport usePasswordsFromFirebase from 'hooks/usePasswordsFromFirebase';\nimport { selectRequest } from 'reduxStore/slices/applicationStatusSlice';\nimport { PasswordI } from 'utils/constants';\nimport { TranslationsContext } from 'contexts/translationsContext';\n\nconst PasswordListContainer = ({ children }: { children: typeof PasswordList }) => {\n  const [scrollIsClose2Bottom, setScrollIsClose2Bottom] = useState<boolean>(false);\n  const [searchText, setSearchText] = useState<string>('');\n  const { modalTranslations } = useContext(TranslationsContext);\n  const navigation: DrawerNavigationProp<any> = useNavigation();\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n\n  const snackbarVisible: boolean = useSelector(selectSnackbarVisible);\n  const snackbarMessage: string = useSelector(selectSnackbarMessage);\n  const modalTitle: string = useSelector(selectModalTitle);\n  const modalMessage: string = useSelector(selectModalMessage);\n  const modalVisible: boolean = useSelector(selectModalVisible);\n  const isEditMode: boolean = useSelector(selectIsEditMode);\n  const isDeleteMode: boolean = useSelector(selectIsDeleteMode);\n  const passwords: Array<PasswordI> = usePasswordsFromFirebase();\n  const [passwordsFiltered, setPasswordsFiltered] = useState<Array<PasswordI>>(passwords);\n  const isRequesting: boolean = useSelector(selectRequest);\n\n  useEffect(() => {\n    setPasswordsFiltered(passwords);\n\n    if (passwords.length > 0) {\n      const somePwdIsNotEncrypted = passwords.some(\n        ({ pwdWasCorrectlyEncrypted }) => !pwdWasCorrectlyEncrypted\n      );\n\n      if (somePwdIsNotEncrypted) {\n        dispatch(setModalTitle({ modalTitle: modalTranslations.t('modalTitle') }));\n        dispatch(setModalMessage({ modalMessage: modalTranslations.t('modalMessage') }));\n        dispatch(setModalVisible({ modalVisible: true }));\n      }\n    }\n  }, [passwords]);\n\n  const handleScrollIsClose2Bottom = (event: NativeSyntheticEvent<NativeScrollEvent>) => {\n    const { layoutMeasurement, contentOffset, contentSize } = event.nativeEvent;\n    const paddingToBottom = Platform.OS === 'web' ? 7 : 10;\n    const result =\n      layoutMeasurement.height + contentOffset.y >= contentSize.height - paddingToBottom;\n\n    setScrollIsClose2Bottom(result);\n  };\n\n  const handleOnDismissSnackbar = () => {\n    dispatch(resetSnackbar());\n  };\n\n  const handleOnPressFAB = () => {\n    dispatch(setIsCreateMode({ isCreateMode: true }));\n    navigation.navigate('PasswordGenerator');\n  };\n\n  const handleModalToggle = () => {\n    dispatch(resetModal());\n  };\n\n  const handleModalOnSubmit = () => {\n    if (isDeleteMode) {\n      dispatch(deletePasswordFromFirebase());\n    } else if (isEditMode) {\n      dispatch(editPasswordFromFirebase());\n      navigation.navigate('PasswordList');\n    }\n    dispatch(resetModal());\n  };\n\n  const handleSearch = (text: string) => {\n    setSearchText(text);\n    if (text !== '') {\n      const filtered = passwords.filter(({ description }) =>\n        description.toLowerCase().includes(text.toLowerCase())\n      );\n      setPasswordsFiltered(filtered);\n    } else {\n      setPasswordsFiltered(passwords);\n    }\n  };\n\n  const handleClearSearch = () => {\n    setSearchText('');\n    handleSearch('');\n  };\n\n  const snackbarObj = { snackbarVisible, snackbarMessage };\n  const modalObj = { modalTitle, modalMessage, modalVisible };\n  const handlers = {\n    handleScrollIsClose2Bottom,\n    handleOnDismissSnackbar,\n    handleOnPressFAB,\n    handleModalToggle,\n    handleModalOnSubmit,\n    handleSearch,\n    handleClearSearch,\n  };\n\n  return children({\n    navigation,\n    snackbarObj,\n    modalObj,\n    scrollIsClose2Bottom,\n    hasPasswordsStored: passwords.length > 4,\n    passwordsFiltered,\n    searchText,\n    isRequesting,\n    handlers,\n  });\n};\n\nexport default () => (\n  <PasswordListContainer>\n    {(renderProps: RenderProps) => <PasswordList {...renderProps} />}\n  </PasswordListContainer>\n);\n","import { StyleSheet, Platform } from 'react-native';\n\nexport const imageBackground = StyleSheet.create({\n  container: {\n    width: undefined,\n    paddingTop: 48,\n    paddingHorizontal: 10,\n    paddingBottom: 5,\n  },\n  name: {\n    marginTop: 60,\n    paddingHorizontal: 5,\n    color: '#F0F0F0',\n    backgroundColor: 'rgba(48, 145, 224, 0.6)',\n    borderRadius: 5,\n    fontSize: 20,\n    fontWeight: 'bold',\n    textShadowColor: '#000',\n    textShadowOffset: { width: 5, height: 5 },\n    textShadowRadius: 10,\n  },\n});\n\nexport const divider = StyleSheet.create({\n  divider: {\n    marginHorizontal: 20,\n    marginTop: 40,\n    marginBottom: 20,\n    backgroundColor: '#464646',\n  },\n});\n\nexport const signout = StyleSheet.create({\n  container: {\n    backgroundColor: '#F3BBBB',\n    borderRadius: 5,\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    marginHorizontal: 10,\n    paddingVertical: 15,\n    paddingLeft: Platform.OS === 'web' ? 19 : 17,\n  },\n  icon: {\n    marginRight: 32,\n  },\n  text: {\n    color: '#F11D1D',\n  },\n});\n","import React, { useContext } from 'react';\nimport { Text, ScrollView, ImageBackground, View } from 'react-native';\nimport { DrawerItemList, DrawerItem } from '@react-navigation/drawer';\nimport {\n  DrawerDescriptorMap,\n  DrawerNavigationHelpers,\n} from '@react-navigation/drawer/lib/typescript/src/types';\nimport { DrawerNavigationState, ParamListBase } from '@react-navigation/routers';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { MaterialCommunityIcons, MaterialIcons, FontAwesome } from '@expo/vector-icons';\nimport { Drawer } from 'react-native-paper';\nimport { imageBackground } from './styles';\nimport { expo } from '../../../app.json';\nimport { TranslationsContext } from 'contexts/translationsContext';\n\nexport const CustomSidebar = ({ sidebarProps, userName, handlers }: Props) => {\n  const { sidebarTranslations } = useContext(TranslationsContext);\n  const { handleSignOut, onPressInPasswordGenerator, onPressInCheckTutorial } = handlers;\n\n  return (\n    <SafeAreaProvider>\n      <ImageBackground\n        source={require('assets/img/sidebar-banner.png')}\n        style={imageBackground.container}\n      >\n        <Text style={imageBackground.name}>{`${sidebarTranslations.t(\n          'welcome'\n        )}, ${userName} !`}</Text>\n        <Text className='rounded-md mt-2 px-2 py-1 bg-pblue-400/[.7] self-end text-[10px] font-bold text-white'>\n          Passvault v{expo.version}\n        </Text>\n      </ImageBackground>\n      <View className='flex flex-grow justify-between'>\n        <Drawer.Section title={sidebarTranslations.t('pages')}>\n          <ScrollView style={{ paddingTop: 10 }}>\n            <DrawerItemList {...sidebarProps} />\n            <DrawerItem\n              label={sidebarTranslations.t('passwordGenerator')}\n              icon={({ color, size }) => (\n                <MaterialCommunityIcons name='engine-outline' size={size * 0.75} color={color} />\n              )}\n              onPress={() => onPressInPasswordGenerator(sidebarProps.navigation)}\n            />\n            <DrawerItem\n              label={sidebarTranslations.t('checkTutorial')}\n              icon={({ color, size }) => (\n                <FontAwesome name='graduation-cap' size={size * 0.6} color={color} />\n              )}\n              onPress={() => onPressInCheckTutorial(sidebarProps.navigation)}\n            />\n          </ScrollView>\n        </Drawer.Section>\n        <DrawerItem\n          icon={({ color, size }) => (\n            <MaterialIcons name='logout' size={size * 0.75} color={color} />\n          )}\n          label={sidebarTranslations.t('signOut')}\n          onPress={handleSignOut}\n        />\n      </View>\n    </SafeAreaProvider>\n  );\n};\n\nexport interface Props {\n  sidebarProps: {\n    state: DrawerNavigationState<ParamListBase>;\n    navigation: DrawerNavigationHelpers;\n    descriptors: DrawerDescriptorMap;\n  };\n  userName: string;\n  handlers: {\n    handleSignOut: () => void;\n    // eslint-disable-next-line no-unused-vars\n    onPressInPasswordGenerator: (navigation: DrawerNavigationHelpers) => void;\n    // eslint-disable-next-line no-unused-vars\n    onPressInCheckTutorial: (navigation: DrawerNavigationHelpers) => void;\n  };\n}\n","import React, { Dispatch } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { Platform } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { DrawerContentComponentProps } from '@react-navigation/drawer';\nimport { DrawerNavigationHelpers } from '@react-navigation/drawer/lib/typescript/src/types';\nimport { selectUserEmail } from 'reduxStore/slices/userSlice';\nimport { setIsCreateMode, unsetPasswords } from 'reduxStore/slices/passwordSlice';\nimport { CustomSidebar, Props as RenderProps } from 'components/CustomSidebar/customSidebar';\nimport { signOut } from 'services/authFirebase';\n\nconst CustomSidebarContainer = ({\n  sidebarProps,\n  children,\n}: {\n  sidebarProps: DrawerContentComponentProps;\n  children: typeof CustomSidebar;\n}) => {\n  const userEmail = useSelector(selectUserEmail);\n  const name: string = userEmail ? userEmail.substring(0, userEmail.indexOf('@')) : '';\n  const userName: string = name.charAt(0).toUpperCase() + name.slice(1);\n  const stackNavigation = useNavigation<NativeStackNavigationProp<any>>();\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n\n  const handleSignOut = () => {\n    signOut().then(() => {\n      dispatch(unsetPasswords());\n      stackNavigation.replace('Login');\n    });\n  };\n\n  const onPressInPasswordGenerator = (navigation: DrawerNavigationHelpers) => {\n    navigation.closeDrawer();\n    dispatch(setIsCreateMode({ isCreateMode: true }));\n    navigation.navigate('PasswordGenerator');\n  };\n\n  const onPressInCheckTutorial = (navigation: DrawerNavigationHelpers) => {\n    if (Platform.OS === 'web') {\n      alert('This is not available in web. Please, stay tuned.');\n    } else {\n      navigation.navigate('Tutorial');\n    }\n    navigation.closeDrawer();\n  };\n  const handlers = {\n    handleSignOut,\n    onPressInPasswordGenerator,\n    onPressInCheckTutorial,\n  };\n\n  return children({\n    sidebarProps,\n    userName,\n    handlers,\n  });\n};\n\nexport default (sidebarProps: DrawerContentComponentProps) => (\n  <CustomSidebarContainer sidebarProps={sidebarProps}>\n    {(renderProps: RenderProps) => <CustomSidebar {...renderProps} />}\n  </CustomSidebarContainer>\n);\n\n// export default CustomSidebarContainerWrapper;\n","import React, { useContext } from 'react';\nimport { Dimensions, Platform } from 'react-native';\nimport { createDrawerNavigator, DrawerContentComponentProps } from '@react-navigation/drawer';\nimport { Feather } from '@expo/vector-icons';\nimport PasswordList from 'screens/PasswordList/passwordListContainer';\nimport CustomSidebar from 'components/CustomSidebar/customSidebarContainer';\nimport { TranslationsContext } from 'contexts/translationsContext';\n\nconst CustomDrawer = createDrawerNavigator();\n\nexport const Drawer = () => {\n  const { drawerTranslations } = useContext(TranslationsContext);\n\n  return (\n    <CustomDrawer.Navigator\n      initialRouteName='PasswordList'\n      screenOptions={{\n        drawerStyle: {\n          width: Platform.OS === 'web' ? 300 : Dimensions.get('window').width * 0.7,\n        },\n        drawerActiveBackgroundColor: '#9ac8fc',\n        drawerActiveTintColor: '#3091e0',\n        drawerItemStyle: {\n          borderRadius: 5,\n        },\n      }}\n      drawerContent={(sidebarProps: DrawerContentComponentProps) => (\n        <CustomSidebar {...sidebarProps} />\n      )}\n    >\n      <CustomDrawer.Screen\n        name='PasswordList'\n        component={PasswordList}\n        options={{\n          title: drawerTranslations.t('title'),\n          headerStyle: {\n            backgroundColor: '#3091e0',\n          },\n          headerTintColor: '#FFF',\n          drawerIcon: ({ color, size }) => <Feather name='list' size={size * 0.75} color={color} />,\n        }}\n      />\n    </CustomDrawer.Navigator>\n  );\n};\n","import React from 'react';\nimport { StatusBar } from 'react-native';\nimport { appColors } from 'utils/constants';\n\n/*\n * For more reference check this snack:\n *   https://snack.expo.dev/@ahmed_gaber/safe-area-context?platform=ios\n */\n\nexport const CustomStatusbar = () => (\n  <StatusBar animated barStyle='light-content' backgroundColor={appColors.primaryDark} />\n);\n\nexport default CustomStatusbar;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport OnBoarding from 'screens/OnBoarding/onBoardingContainer';\nimport Login from 'screens/Login/loginContainer';\nimport SignUp from 'screens/SignUp/signupContainer';\nimport PasswordGenerator from 'screens/PasswordGenerator/passwordGeneratorContainer';\nimport { Drawer } from 'screens/Drawer/drawer';\nimport CustomStatusbar from 'components/CustomStatusbar/customStatusbar';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { selectLocale } from 'reduxStore/slices/applicationStatusSlice';\n\n// Translations\nimport getTranslations from 'utils/getTranslations';\nimport { TranslationsContext } from 'contexts/translationsContext';\nimport drawerTranslations from 'languages/drawerTranslations';\nimport infoMessagesTranslations from 'languages/infoMessagesTranslations';\nimport loginSignupTranslations from 'languages/loginSignupTranslations';\nimport modalTranslations from 'languages/modalTranslations';\nimport onBoardingTranslations from 'languages/onBoardingTranslations';\nimport passwordGenTranslations from 'languages/passwordGenTranslations';\nimport passwordListTranslations from 'languages/passwordListTranslations';\nimport sidebarTranslations from 'languages/sidebarTranslations';\n\nconst Stack = createNativeStackNavigator();\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n\nconst Root = ({ loading, onBoardingViewed }: RootProps) => {\n  const locale = useSelector(selectLocale);\n  const translationsContextValue = {\n    drawerTranslations: getTranslations(drawerTranslations, locale),\n    infoMessagesTranslations: getTranslations(infoMessagesTranslations, locale),\n    loginSignupTranslations: getTranslations(loginSignupTranslations, locale),\n    modalTranslations: getTranslations(modalTranslations, locale),\n    onBoardingTranslations: getTranslations(onBoardingTranslations, locale),\n    passwordGenTranslations: getTranslations(passwordGenTranslations, locale),\n    passwordListTranslations: getTranslations(passwordListTranslations, locale),\n    sidebarTranslations: getTranslations(sidebarTranslations, locale),\n  };\n\n  if (onBoardingViewed === null) {\n    return null;\n  }\n\n  return (\n    <TranslationsContext.Provider value={translationsContextValue}>\n      <View style={[styles.container]}>\n        <CustomStatusbar />\n        {loading ? (\n          <LoadingIndicator />\n        ) : (\n          <NavigationContainer>\n            <Stack.Navigator>\n              {!onBoardingViewed && Platform.OS !== 'web' && (\n                <Stack.Screen\n                  name='OnBoarding'\n                  component={OnBoarding}\n                  options={{ headerShown: false }}\n                />\n              )}\n              <Stack.Screen name='Login' component={Login} options={{ headerShown: false }} />\n              <Stack.Screen name='SignUp' component={SignUp} options={{ headerShown: false }} />\n              <Stack.Screen\n                name='PasswordGenerator'\n                component={PasswordGenerator}\n                options={{\n                  headerStyle: {\n                    backgroundColor: '#3091e0',\n                  },\n                  headerTintColor: '#FFF',\n                }}\n              />\n              <Stack.Screen\n                name='Tutorial'\n                component={OnBoarding}\n                options={{ headerShown: false }}\n              />\n              <Stack.Screen\n                name='Drawer'\n                component={Drawer}\n                options={{\n                  headerShown: false,\n                }}\n              />\n            </Stack.Navigator>\n          </NavigationContainer>\n        )}\n      </View>\n    </TranslationsContext.Provider>\n  );\n};\n\nexport interface RootProps {\n  loading: boolean;\n  onBoardingViewed: boolean;\n}\n\nexport default Root;\n","import React, { Dispatch, useEffect, useState } from 'react';\nimport * as Localization from 'expo-localization';\nimport { logger } from 'react-native-logs';\nimport { getOnBoardingViewed } from 'utils/localStorageFuncs';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectRequest, setIsRequest, setLocale } from 'reduxStore/slices/applicationStatusSlice';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport Root, { RootProps as RenderProps } from './root';\n\nconst RootContainer = ({ children }: { children: typeof Root }) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const isRequest = useSelector(selectRequest);\n  const [onBoardingViewed, setOnBoardingViewed] = useState<boolean>(false);\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n  const log = logger.createLogger();\n\n  useEffect(() => {\n    dispatch(setIsRequest());\n    dispatch(setLocale({ locale: Localization.locale }));\n\n    getOnBoardingViewed()\n      .then((value) => {\n        if (value === 'false' || value === undefined) {\n          setOnBoardingViewed(false);\n        } else {\n          setOnBoardingViewed(true);\n        }\n      })\n      .catch((err) => {\n        log.error('Error checking is first launch: ', { err });\n      })\n      .finally(() => {\n        setLoading(isRequest);\n      });\n  }, []);\n\n  return children({ loading, onBoardingViewed });\n};\n\nexport default () => (\n  <RootContainer>{(renderProps: RenderProps) => <Root {...renderProps} />}</RootContainer>\n);\n","import 'react-native-gesture-handler';\nimport { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","module.exports = __webpack_public_path__ + \"static/media/amazon.4c033704.png\";","module.exports = __webpack_public_path__ + \"static/media/discord.17c0e41c.png\";","module.exports = __webpack_public_path__ + \"static/media/google.647ac848.png\";","module.exports = __webpack_public_path__ + \"static/media/slack.d9f7a674.png\";","module.exports = __webpack_public_path__ + \"static/media/okta.c20fa4f6.png\";","module.exports = __webpack_public_path__ + \"static/media/outlook.217ab4b3.png\";","module.exports = __webpack_public_path__ + \"static/media/twitch.8e8dc9e1.png\";","module.exports = __webpack_public_path__ + \"static/media/sidebar-banner.9f688acf.png\";","import { createSlice } from '@reduxjs/toolkit';\n\nexport const initialState = {\n  id: '',\n  email: '',\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setUserData: (state, { payload }) => ({\n      ...state,\n      id: payload.id,\n      email: payload.email,\n    }),\n    unsetUserData: () => ({\n      ...initialState,\n    }),\n  },\n});\n\nexport const { setUserData, unsetUserData } = userSlice.actions;\n\nexport const selectUserId = (state: { user: { id: string } }) => state.user.id;\nexport const selectUserEmail = (state: { user: { email: string } }) => state.user.email;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { resetPasswordGeneratorState } from 'reduxStore/slices/passwordSlice';\n\nexport const initialState: {\n  isEasy2Read: boolean;\n  isAllChar: boolean;\n  isUpperCase: boolean;\n  isLowerCase: boolean;\n  isNumbers: boolean;\n  isSymbols: boolean;\n} = {\n  isEasy2Read: true,\n  isAllChar: false,\n  isUpperCase: true,\n  isLowerCase: true,\n  isNumbers: false,\n  isSymbols: false,\n};\n\nconst resetPasswordConfiguratorState = (state: any) => ({\n  ...state,\n  ...initialState,\n});\n\nexport const configuratorSlice = createSlice({\n  name: 'configurator',\n  initialState,\n  reducers: {\n    setIsEasy2Read: (state, { payload }) => ({\n      ...state,\n      isEasy2Read: payload.isEasy2Read,\n    }),\n    setIsAllChar: (state, { payload }) => ({\n      ...state,\n      isAllChar: payload.isAllChar,\n    }),\n    setIsUpperCase: (state, { payload }) => ({\n      ...state,\n      isUpperCase: payload.isUpperCase,\n    }),\n    setIsLowerCase: (state, { payload }) => ({\n      ...state,\n      isLowerCase: payload.isLowerCase,\n    }),\n    setIsNumbers: (state, { payload }) => ({\n      ...state,\n      isNumbers: payload.isNumbers,\n    }),\n    setIsSymbols: (state, { payload }) => ({\n      ...state,\n      isSymbols: payload.isSymbols,\n    }),\n    setIsUpperCaseAndIsLowerCase: (state, { payload }) => ({\n      ...state,\n      isUpperCase: payload.isUpperCase,\n      isLowerCase: payload.isLowerCase,\n    }),\n    setIsNumbersAndIsSymbols: (state, { payload }) => ({\n      ...state,\n      isNumbers: payload.isNumbers,\n      isSymbols: payload.isSymbols,\n    }),\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetPasswordGeneratorState, (state) => resetPasswordConfiguratorState(state));\n  },\n});\n\nexport const {\n  setIsEasy2Read,\n  setIsAllChar,\n  setIsUpperCase,\n  setIsLowerCase,\n  setIsNumbers,\n  setIsSymbols,\n  setIsUpperCaseAndIsLowerCase,\n  setIsNumbersAndIsSymbols,\n} = configuratorSlice.actions;\n\nexport const selectIsEasy2Read = (state: { configurator: { isEasy2Read: boolean } }) =>\n  state.configurator.isEasy2Read;\nexport const selectIsAllChar = (state: { configurator: { isAllChar: boolean } }) =>\n  state.configurator.isAllChar;\nexport const selectIsUpperCase = (state: { configurator: { isUpperCase: boolean } }) =>\n  state.configurator.isUpperCase;\nexport const selectIsLowerCase = (state: { configurator: { isLowerCase: boolean } }) =>\n  state.configurator.isLowerCase;\nexport const selectIsNumbers = (state: { configurator: { isNumbers: boolean } }) =>\n  state.configurator.isNumbers;\nexport const selectIsSymbols = (state: { configurator: { isSymbols: boolean } }) =>\n  state.configurator.isSymbols;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { getPasswordsFromFirebase, setPasswords } from 'reduxStore/slices/passwordSlice';\nimport { setUserData, unsetUserData } from 'reduxStore/slices/userSlice';\nimport { getSocialMediaListFromFirebase } from 'reduxStore/slices/socialMediaSlice';\n\nexport const initialState = {\n  isRequest: false,\n  locale: 'en-US',\n};\n\nexport const applicationStatusSlice = createSlice({\n  name: 'applicationStatus',\n  initialState,\n  reducers: {\n    setIsRequest: (state) => ({\n      ...state,\n      isRequest: true,\n    }),\n    unsetIsRequest: (state) => ({\n      ...state,\n      isRequest: false,\n    }),\n    setLocale: (state, { payload }) => ({\n      ...state,\n      locale: payload.locale,\n    }),\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getPasswordsFromFirebase, (state) => ({\n        ...state,\n        isRequest: true,\n      }))\n      .addCase(setPasswords, (state) => ({\n        ...state,\n        isRequest: false,\n      }))\n      .addCase(getSocialMediaListFromFirebase, (state) => ({\n        ...state,\n        isRequest: true,\n      }))\n      .addCase(setUserData, (state) => ({\n        ...state,\n        isRequest: true,\n      }))\n      .addCase(unsetUserData, (state) => ({\n        ...state,\n        isRequest: false,\n      }));\n  },\n});\n\nexport const { setIsRequest, unsetIsRequest, setLocale } = applicationStatusSlice.actions;\n\nexport const selectRequest = (state: { applicationStatus: { isRequest: boolean } }) =>\n  state.applicationStatus.isRequest;\nexport const selectLocale = (state: { applicationStatus: { locale: string } }) =>\n  state.applicationStatus.locale;\n","import { createSlice } from '@reduxjs/toolkit';\n\ninterface socialMediaI {\n  id: string;\n  name: string;\n}\n\nexport const initialState: {\n  socialMediaPicked: string;\n  socialMediaList: Array<socialMediaI>;\n} = {\n  socialMediaPicked: '',\n  socialMediaList: [],\n};\n\nexport const socialMediaSlice = createSlice({\n  name: 'socialMedia',\n  initialState,\n  reducers: {\n    setSocialMediaPicked: (state, { payload }) => ({\n      ...state,\n      socialMediaPicked: payload.socialMediaPicked,\n    }),\n    unsetSocialMediaPicked: (state) => ({\n      ...state,\n      socialMediaPicked: '',\n    }),\n    setSocialMediaList: (state, { payload }) => ({\n      ...state,\n      socialMediaList: payload.socialMediaList,\n    }),\n    getSocialMediaListFromFirebase: () => {},\n  },\n});\n\nexport const {\n  setSocialMediaPicked,\n  unsetSocialMediaPicked,\n  setSocialMediaList,\n  getSocialMediaListFromFirebase,\n} = socialMediaSlice.actions;\n\nexport const selectSocialMediaPicked = (state: { socialMedia: { socialMediaPicked: string } }) =>\n  state.socialMedia.socialMediaPicked;\nexport const selectSocialMediaList = (state: {\n  socialMedia: { socialMediaList: Array<socialMediaI> };\n}) => state.socialMedia.socialMediaList;\n","/* eslint-disable no-undef */\n// Import the functions you need from the SDKs you need\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport { getAuth } from 'firebase/auth';\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.FIREBASE_DATABASE_URL,\n  projectId: process.env.FIREBASE_PROJECT_ID,\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.FIREBASE_APP_ID,\n};\n\nconst appLength: number = firebase.apps.length;\n\nconst app = appLength === 0 ? firebase.initializeApp(firebaseConfig) : firebase.app();\nconst database = app.firestore();\n\nexport const auth = getAuth(app);\nexport const passwordsCollection = database.collection('passwords');\nexport const socialMediaCollection = database.collection('social_media');\n"],"sourceRoot":""}