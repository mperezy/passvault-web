{"version":3,"sources":["src/services/database.ts","src/utils/localStorageFuncs.ts","src/redux/slices/passwordSlice.ts","src/utils/constants.ts","src/redux/sagas/passwordGeneratorSaga.ts","src/redux/sagas/getPasswordsSaga.ts","src/redux/sagas/getSocialMediaSaga.ts","src/redux/sagas/savePasswordSaga.ts","src/redux/sagas/deletePasswordSaga.ts","src/redux/sagas/updatePasswordSaga.ts","src/redux/slices/rootReducer.ts","src/redux/store/index.ts","src/redux/sagas/index.ts","App.tsx","src/components/LoadingIndicator/loadingIndicator.tsx","src/components/OnBoarding/OnBoardingItem/styles.ts","src/components/OnBoarding/OnBoardingItem/onBoardingItem.tsx","src/components/OnBoarding/Paginator/styles.ts","src/components/OnBoarding/Paginator/paginator.tsx","src/components/OnBoarding/NextButton/styles.ts","src/components/OnBoarding/NextButton/nextButton.tsx","src/components/OnBoarding/NextButton/nextButtonContainer.tsx","src/screens/OnBoarding/slides.tsx","src/screens/OnBoarding/onBoarding.tsx","src/screens/OnBoarding/onBoardingContainer.tsx","src/utils/infoMessages.ts","src/components/Popover/popover.tsx","src/components/CustomSnackbar/customSnackbar.tsx","src/screens/PasswordGenerator/styles.ts","src/components/SVGs/SVGProps.ts","src/components/SVGs/Icons.ts","src/components/SVGs/components/PassvaultLogoIcon.tsx","src/components/SVGs/Icon.tsx","src/screens/Login/styles.ts","src/screens/Login/login.tsx","src/hooks/useLogin.tsx","src/screens/Login/loginContainer.tsx","src/screens/SignUp/signup.tsx","src/screens/SignUp/signupContainer.tsx","src/hooks/usePasswordDescription.tsx","src/hooks/useSocialMediaPicked.tsx","src/utils/handleCreateEditPassword.ts","src/components/CreateEditPasswordConfigurator/styles.ts","src/components/CreateEditPasswordConfigurator/createEditPasswordConfigurator.tsx","src/components/PasswordConfigurator/CustomCheckBox/customCheckBox.tsx","src/utils/configuratorUtils.ts","src/components/PasswordConfigurator/passwordConfigurator.tsx","src/components/SliderContainer/styles.ts","src/components/SliderContainer/sliderContainer.tsx","src/screens/PasswordGenerator/passwordGenerator.tsx","src/hooks/useGeneratorMessage.tsx","src/hooks/useGeneratorPageTitle.tsx","src/screens/PasswordGenerator/passwordGeneratorContainer.tsx","src/components/SocialMediaIcon/socialMediaIcon.tsx","src/utils/imageDataRetriever.ts","src/components/PasswordItem/styles.ts","src/components/PasswordIcons/passwordIcon.tsx","src/components/PasswordItem/passwordItem.tsx","src/components/CustomModal/styles.ts","src/components/CustomModal/customModal.tsx","src/screens/PasswordList/styles.ts","src/screens/PasswordList/passwordList.tsx","src/hooks/useSocialMediaFromFirebase.tsx","src/hooks/usePasswordsFromFirebase.tsx","src/screens/PasswordList/passwordListContainer.tsx","src/components/CustomSidebar/styles.ts","src/components/CustomSidebar/customSidebar.tsx","src/languages/sidebarTranslations.ts","src/components/CustomSidebar/customSidebarContainer.tsx","src/screens/Drawer/drawer.tsx","src/languages/drawerTranslations.ts","src/components/CustomStatusbar/customStatusbar.tsx","src/root/root.tsx","src/root/rootContainer.tsx","index.js","src/redux/slices/uiElementsSlice.ts","assets/amazon.png","assets/discord.png","assets/google.png","assets/slack.png","assets/okta.png","assets/outlook.png","assets/twitch.png","assets/img/sidebar-banner.png","src/redux/slices/configuratorSlice.ts","src/redux/slices/socialMediaSlice.ts","src/redux/slices/userSlice.ts","src/redux/slices/applicationStatusSlice.ts","src/services/firebase.ts"],"names":["log","logger","createLogger","getPasswordsByUserId","userId","passwordsCollection","where","get","then","querySnapshot","docs","map","doc","id","passwordGenerated","data","password_generated","socialMedia","social_media","description","defaultEmptyPasswordDescription","createdAt","sort","x","y","obj1","obj2","field","kind","Platform","OS","sortBy","catch","error","sendPassword2Firebase","password","add","Date","getTime","uid","info","deletePasswordById","passwordId","delete","updatePasswordByIdFromFirebase","update","getSocialMedia","socialMediaCollection","name","appName","isObject","value","storeData","key","finalValue","JSON","stringify","toString","AsyncStorage","setItem","e","asyncStorageException","getData","getItem","parse","removeItem","setUserData2LS","email","setPasswordGenerated","getPasswordGenerated","empty","err","getUserDataFromLS","clearUserDataFromLS","res","setOnBoardingViewed","getOnBoardingViewed","firstLaunchFlag","initialState","passwordIdPicked","passwordPicked","passwordDescriptionPicked","length","isCreateMode","isEditMode","isDeleteMode","passwords","passwordSlice","createSlice","reducers","setPassword","state","payload","setPasswordPicked","setPasswordIdPicked","resetPasswordPicked","setPasswordDescriptionPicked","setLength","setIsCreateMode","setIsEditMode","setIsDeleteMode","setPasswords","resetPasswordGeneratorState","resetPasswordState","unsetPasswords","generatePassword","getPasswordsFromFirebase","savePassword2Firebase","deletePasswordFromFirebase","editPasswordFromFirebase","actions","selectPassword","selectPasswordIdPicked","selectPasswordPicked","selectPasswordDescriptionPicked","selectIsCreateMode","selectIsEditMode","selectIsDeleteMode","selectPasswordLength","selectPasswords","lower","upper","number","symbols","devWarnings","popoverMessage","infoMessages","copied2Clipboard","newPassword","about2CreatePassword","FIREBASE_STORAGE_URL","FIREBASE_STORAGE_BUCKET","imagesTokens","FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_EASY_SIGNUP_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_INITIAL_PASSWORD_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN","appColors","textTint","maximumTintColorSlider","disabledColorSlider","activeTint","primary","primaryDark","red","passwordGeneratorSaga","takeLeading","type","select","isUpperCase","selectIsUpperCase","isLowerCase","selectIsLowerCase","isNumbers","selectIsNumbers","isSymbols","selectIsSymbols","all","i","charAt","Math","floor","random","put","exception","message","getPasswordsSaga","selectUserId","call","getSocialMediaSaga","getSocialMediaListFromFirebase","socialMediaList","setSocialMediaList","savePasswordSaga","deletePasswordSaga","setIsRequest","unsetIsRequest","updatePasswordSaga","selectSocialMediaPicked","createRootReducer","combineReducers","user","userSlice","reducer","configurator","configuratorSlice","applicationStatus","applicationStatusSlice","socialMediaSlice","uiElements","uiElementsSlice","sagaMiddleware","createSagaMiddleware","middleware","store","configureStore","run","process","LogBox","ignoreLogs","window","App","styles","StyleSheet","create","container","flex","justifyContent","horizontal","flexDirection","padding","LoadingIndicator","View","style","ActivityIndicator","size","color","alignItems","marginTop","image","borderRadius","title","fontWeight","fontSize","marginBottom","textAlign","paddingHorizontal","OnBoardingItem","item","width","useWindowDimensions","Image","source","uri","resizeMode","paddingTop","Text","height","marginVertical","dot","backgroundColor","marginHorizontal","Paginator","scrollX","_","inputRange","dotWidth","interpolate","outputRange","extrapolate","opacity","Animated","button","position","NextButton","strokeWidth","center","radius","circumference","progressRef","scrollTo","rotation","origin","stroke","cx","cy","r","ref","strokeDasharray","TouchableOpacity","activeOpacity","onPress","AntDesign","NextButtonContainer","percentage","children","PI","progressAnimation","useRef","Value","current","useEffect","toValue","timing","duration","useNativeDriver","start","addListener","strokeDashoffset","setNativeProps","removeAllListeners","NextButtonContainerWrapper","renderProps","FIREBASE_STORAGE_FINAL_URL","slides","paddingVertical","OnBoarding","currentIndex","slidesRef","viewableItemsChanged","viewConfig","FlatList","renderItem","showsHorizontalScrollIndicator","pagingEnabled","bounces","keyExtractor","onScroll","event","nativeEvent","contentOffset","onViewableItemsChanged","viewabilityConfig","OnBoardingContainer","useState","setCurrentIndex","viewAreaCoveragePercentThreshold","navigation","useNavigation","dispatch","useDispatch","viewableItems","index","scrollToIndex","replace","OnBoardingContainerWrapper","showInfoMessage","ToastAndroid","show","SHORT","CustomPopover","touchableRef","useCallback","setSnackbarMessage","snackbarMessage","setSnackbarVisible","snackbarVisible","Feather","CustomSnackbar","isSnackbarVisible","onDismiss","Snackbar","visible","screen","shadow","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","cardView","passwordStyle","inputContainer","margin","input","borderWidth","borderColor","fontFamily","icons","marginLeft","configuration","textContainer","textHeader","passwordLengthContainer","inputLength","marginRight","lengthSliderContainer","switchToggle","checkBox","section","paragraph","checkbox","Variant","byDefault","fillColor","bgFillColor","Icons","PassvaultLogoIcon","variant","viewBox","fill","d","Icon","rest","IconComponent","rowGap","buttonContainer","buttonText","buttonOutLine","buttonOutLineText","loginImage","tooltipImage","linkContainer","link","linkText","webStyles","Login","username","isRequesting","handleOnChangeText","handleLogin","handleOnKeyPress","handleOnDismiss","className","TextInput","placeholder","onChangeText","onKeyPress","navigate","useLogin","handleBackAction","canGoBack","goBack","BackHandler","exitApp","subscription","addEventListener","auth","onAuthStateChanged","setUserData","unsetUserData","remove","LoginContainer","setUsername","useSelector","selectRequest","selectSnackbarVisible","signIn","text","resetSnackbar","LoginContainerWrapper","SignUp","handleSignUp","SignupContainer","signUp","SignupContainerWrapper","usePasswordDescription","setDescription","useSocialMediaPicked","selectSocialMediaList","socialMediaPicked","setSocialMediaPicked","handleCreateEditPassword","setModalTitle","modalTitle","setModalMessage","modalMessage","setModalVisible","modalVisible","createEditPassword","userInputContainer","textInput","dropdown","textLabel","descriptionLengthIndicator","alignSelf","CreateEditPasswordConfigurator","createEditButtonLabel","selectedValue","onValueChange","itemValue","label","toUpperCase","slice","Item","maxLength","Entypo","Button","CustomCheckBox","isChecked","disabled","Checkbox","undefined","defaultProps","handleLeftCheckboxes","setCheck1","setCheck2","selector1","selector2","handleOtherCheckboxes","payloadString1","payloadString2","payload1","payload2","handleRightCheckboxes","checkbox1","checkbox2","checkbox3","configuratorAction","PasswordConfigurator","switchEnabled","isEasy2Read","selectIsEasy2Read","isAllChar","selectIsAllChar","handleRightCheckboxesGivenLeftCheckboxes","setIsUpperCaseAndIsLowerCase","setIsNumbersAndIsSymbols","leftCheckboxes","setIsEasy2Read","setIsAllChar","rightCheckboxes","setIsUpperCase","setIsLowerCase","setIsNumbers","setIsSymbols","updateConfiguratorStateAndGeneratePassword","sliderContainer","paddingLeft","SliderContainer","activeMark","left","inactiveMark","defaultValue","setValue","Number","isNaN","step","minimumValue","maximumValue","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","PasswordGenerator","scrollViewRef","mPassword","passwordFromState","handleCopyButton","handleRefreshButton","handleOnDismissSnackbar","handleOnChangePassword","handleOnBlurPassword","handleSwitch","ScrollView","showSoftInputOnFocus","caretHidden","onBlur","MaterialCommunityIcons","Ionicons","Divider","Switch","keyboardType","useGeneratorMessage","isCreatedMode","showAuthenticatedMessage","unsetSocialMediaPicked","resetConfigurationState","useGeneratorPageTitle","screenTitle","useLayoutEffect","setOptions","PasswordGeneratorContainer","setSwitchEnabled","mSetPassword","selectSnackbarMessage","Clipboard","setString","PasswordGeneratorContainerWrapper","SocialMediaIcon","includes","imageSource","amazon","require","discord","google","slack","okta","outlook","twitch","imageSourceRetriever","facebook","linkedin","other","socialMediaIcon","socialMediaColor","twitter","socialMediaIconColor","socialIconAndPasswordInfo","passwordAndDescription","descriptionTextLabel","passwordInput","singleIcon","PasswordIcons","passwordVisible","setPasswordVisible","mSocialMedia","FontAwesome","PasswordItem","secureTextEntry","content","CustomModal","props","toggle","onSubmit","isVisible","onBackdropPress","onBackButtonPress","MaterialIcons","sectionTitle","paddingBottom","items","writeTaskWrapper","bottom","addWrapper","addText","navWrapper","navButtonContainer","navButton","fab","right","PasswordList","scrollIsClose2Bottom","handleScrollIsClose2Bottom","handleOnPressFAB","handleModalToggle","handleModalOnSubmit","scrollEventThrottle","contentContainerStyle","flexGrow","keyboardShouldPersistTaps","FAB","icon","useSocialMediaFromFirebase","unsubscribeSocialMediaCollection","onSnapshot","usePasswordsFromFirebase","unsubscribePasswordsCollection","PasswordListContainer","setScrollIsClose2Bottom","selectModalTitle","selectModalMessage","selectModalVisible","layoutMeasurement","contentSize","paddingToBottom","result","resetModal","PasswordListWrapper","imageBackground","textShadowColor","textShadowOffset","textShadowRadius","divider","CustomSidebar","sidebarProps","userName","translations","handleSignOut","onPressInPasswordGenerator","onPressInCheckTutorial","ImageBackground","t","Section","DrawerItemList","DrawerItem","en","welcome","pages","passwordGenerator","checkTutorial","signOut","es","CustomSidebarContainer","userEmail","selectUserEmail","substring","indexOf","stackNavigation","i18n","I18n","sidebarTranslations","locale","selectLocale","enableFallback","closeDrawer","alert","CustomSidebarContainerWrapper","CustomDrawer","createDrawerNavigator","Drawer","Navigator","initialRouteName","screenOptions","drawerStyle","Dimensions","drawerActiveBackgroundColor","drawerActiveTintColor","drawerItemStyle","drawerContent","Screen","component","options","headerStyle","headerTintColor","drawerIcon","CustomStatusbar","StatusBar","animated","barStyle","Stack","createNativeStackNavigator","Root","loading","onBoardingViewed","NavigationContainer","headerShown","RootContainer","setLoading","setLocale","Localization","finally","RootContainerWrapper","registerRootComponent","initialSnackbarState","initialModalState","module","exports","extraReducers","builder","addCase","resetPasswordConfiguratorState","isRequest","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","app","firebase","apps","initializeApp","database","firestore","getAuth","collection","signInWithEmailAndPassword","toLowerCase","userCredentials","firebaseSignOut","createUserWithEmailAndPassword"],"mappings":"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","file":"static/js/app.6ef2fbdc.chunk.js","sourcesContent":["import { Platform } from 'react-native';\nimport { logger } from 'react-native-logs';\n\nimport { passwordsCollection, socialMediaCollection } from 'services/firebase';\nimport { defaultEmptyPasswordDescription } from 'utils/constants';\n\nconst log = logger.createLogger();\n\nconst sortBy = (obj1: any, obj2: any, field: string, kind: string = 'asc') => {\n  const x = kind === 'asc' && Platform.OS !== 'ios' ? 1 : -1;\n  return obj1[field] < obj2[field] ? -1 * x : obj1[field] > obj2[field] ? 1 * x : 0;\n};\n\nexport const getPasswordsByUserId = (userId: any) =>\n  passwordsCollection\n    .where('uid', '==', userId)\n    .get()\n    .then((querySnapshot) =>\n      querySnapshot.docs\n        .map((doc) => ({\n          id: doc.id,\n          passwordGenerated: doc.data().password_generated,\n          socialMedia: doc.data().social_media,\n          description: doc.data().description || defaultEmptyPasswordDescription,\n          createdAt: doc.data().createdAt,\n        }))\n        .sort((x, y) => sortBy(x, y, 'createdAt', process.env.PASSWORD_LIST_ORDER_TYPE))\n    )\n    .catch((error) => {\n      log.error('Error getting documents: ', error);\n    });\n\nexport const sendPassword2Firebase = async (\n  userId: string,\n  password: string,\n  description: string,\n  socialMedia: string\n) => {\n  await passwordsCollection\n    .add({\n      createdAt: new Date().getTime(),\n      password_generated: password,\n      social_media: socialMedia,\n      description,\n      uid: userId,\n    })\n    .then(() => {\n      log.info('A new password was added in database.');\n    })\n    .catch((error) => {\n      log.error('Something went wrong trying to add a new password in database: ', error);\n    });\n};\n\nexport const deletePasswordById = async (passwordId: string) => {\n  await passwordsCollection\n    .doc(passwordId)\n    .delete()\n    .then(() => {\n      log.info('A password was deleted from database.');\n    })\n    .catch((error) => {\n      log.error('Something went wrong trying to delete a password from database: ', error);\n    });\n};\n\nexport const updatePasswordByIdFromFirebase = async (\n  passwordId: string,\n  passwordGenerated: string,\n  description: string,\n  socialMedia: string\n) => {\n  await passwordsCollection\n    .doc(passwordId)\n    .update({\n      password_generated: passwordGenerated,\n      description,\n      social_media: socialMedia,\n    })\n    .then(() => {\n      log.info('A password was updated from database.');\n    })\n    .catch((error) => {\n      log.error('Something went wrong trying to update a password from database: ', error);\n    });\n};\n\nexport const getSocialMedia = () =>\n  socialMediaCollection\n    .get()\n    .then((querySnapshot) =>\n      querySnapshot.docs.map((doc) => ({\n        id: doc.id,\n        name: doc.data().name,\n      }))\n    )\n    .catch((error) => {\n      log.error('Something went wrong trying to get social media list: ', error);\n    });\n","import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { logger } from 'react-native-logs';\n\nconst appName = 'passvault';\nconst isObject = (value: string) => typeof value === 'object';\nconst log = logger.createLogger();\n\nconst storeData = async (key: string, value: any) => {\n  try {\n    const finalValue = isObject(value) ? JSON.stringify(value) : value.toString();\n    await AsyncStorage.setItem(key, finalValue);\n  } catch (e) {\n    log.error('From storeData: ', { asyncStorageException: e });\n  }\n};\n\n// eslint-disable-next-line consistent-return\nconst getData = async (key: string) => {\n  try {\n    const value = await AsyncStorage.getItem(key);\n    if (value !== null) {\n      return isObject(value) ? JSON.parse(value) : value;\n    }\n  } catch (e) {\n    log.error('From getData: ', { asyncStorageException: e });\n  }\n};\n\nconst removeItem = async (key: string) => {\n  try {\n    await AsyncStorage.removeItem(key);\n  } catch (e) {\n    log.error('From removeItem: ', { asyncStorageException: e });\n  }\n};\n\nconst setUserData2LS = (userId: string | undefined, email: string | null | undefined) => {\n  storeData(`${appName}.userId`, userId || '').then((data) => data);\n  storeData(`${appName}.email`, email || '').then((data) => data);\n};\n\nconst setPasswordGenerated = (password: string) => {\n  storeData(`${appName}.password`, password).then((data: void) => data);\n};\n\nconst getPasswordGenerated = () => {\n  const empty = { password: '' };\n\n  return getData(`${appName}.password`)\n    .then((password: string) => ({ password }))\n    .catch((err) => {\n      log.error('From getPasswordGenerated: ', { err });\n      return empty;\n    });\n};\n\nconst getUserDataFromLS = () => {\n  const empty = { userId: '', email: '' };\n\n  return getData(`${appName}.userId`)\n    .then((userId: string) => {\n      getData(`${appName}.email`)\n        .then((email: string) => ({\n          userId,\n          email,\n        }))\n        .catch((err: any) => {\n          log.error('From getData -> email: ', { err });\n          return empty;\n        });\n    })\n    .catch((err) => {\n      log.error('From getData -> userId: ', { err });\n      return empty;\n    });\n};\n\nconst clearUserDataFromLS = () => {\n  removeItem(`${appName}.userId`).then((res: void) => res);\n  removeItem(`${appName}.email`).then((res: void) => res);\n};\n\nconst setOnBoardingViewed = (value: any) => {\n  storeData(`${appName}.alreadyLaunched`, value).then((data: void) => data);\n};\n\nconst getOnBoardingViewed = () =>\n  getData(`${appName}.alreadyLaunched`)\n    .then((firstLaunchFlag) => firstLaunchFlag)\n    .catch((err) => {\n      log.error('From getOnBoardingViewed: ', { err });\n      return null;\n    });\n\nexport {\n  setUserData2LS,\n  getUserDataFromLS,\n  clearUserDataFromLS,\n  setPasswordGenerated,\n  getPasswordGenerated,\n  setOnBoardingViewed,\n  getOnBoardingViewed,\n};\n","import { createSlice } from '@reduxjs/toolkit';\n\ninterface PasswordI {\n  id: string;\n  passwordGenerated: string;\n  socialMedia: string;\n  description: string;\n  createdAt: number;\n}\n\nexport const initialState: {\n  password: string;\n  passwordIdPicked: string;\n  passwordPicked: string;\n  passwordDescriptionPicked: string;\n  length: number;\n  isCreateMode: boolean;\n  isEditMode: boolean;\n  isDeleteMode: boolean;\n  passwords: Array<PasswordI>;\n} = {\n  password: '',\n  passwordIdPicked: '',\n  passwordPicked: '',\n  passwordDescriptionPicked: '',\n  length: 6,\n  isCreateMode: false,\n  isEditMode: false,\n  isDeleteMode: false,\n  passwords: [],\n};\n\nconst resetPasswordState = (state: any) => ({\n  ...state,\n  password: '',\n  passwordIdPicked: '',\n  passwordPicked: '',\n  passwordDescriptionPicked: '',\n  length: 6,\n  isCreateMode: false,\n  isEditMode: false,\n  isDeleteMode: false,\n});\n\nexport const passwordSlice = createSlice({\n  name: 'password',\n  initialState,\n  reducers: {\n    setPassword: (state, { payload }) => ({\n      ...state,\n      password: payload.password,\n    }),\n    setPasswordPicked: (state, { payload }) => ({\n      ...state,\n      passwordPicked: payload.passwordPicked,\n    }),\n    setPasswordIdPicked: (state, { payload }) => ({\n      ...state,\n      passwordIdPicked: payload.passwordIdPicked,\n    }),\n    resetPasswordPicked: (state) => ({\n      ...state,\n      passwordPicked: '',\n    }),\n    setPasswordDescriptionPicked: (state, { payload }) => ({\n      ...state,\n      passwordDescriptionPicked: payload.passwordDescriptionPicked,\n    }),\n    setLength: (state, { payload }) => ({\n      ...state,\n      length: payload.length,\n    }),\n    setIsCreateMode: (state, { payload }) => ({\n      ...state,\n      isCreateMode: payload.isCreateMode,\n    }),\n    setIsEditMode: (state, { payload }) => ({\n      ...state,\n      isEditMode: payload.isEditMode,\n    }),\n    setIsDeleteMode: (state, { payload }) => ({\n      ...state,\n      isDeleteMode: payload.isDeleteMode,\n    }),\n    setPasswords: (state, { payload }) => ({\n      ...state,\n      passwords: payload.passwords,\n    }),\n    resetPasswordGeneratorState: (state) => resetPasswordState(state),\n    unsetPasswords: () => ({ ...initialState }),\n    generatePassword: () => {},\n    getPasswordsFromFirebase: () => {},\n    savePassword2Firebase: (state, { payload }) => {},\n    deletePasswordFromFirebase: () => {},\n    editPasswordFromFirebase: () => {},\n  },\n});\n\nexport const {\n  setPassword,\n  setPasswordPicked,\n  setPasswordIdPicked,\n  resetPasswordPicked,\n  setPasswordDescriptionPicked,\n  setLength,\n  setIsCreateMode,\n  setIsEditMode,\n  setIsDeleteMode,\n  setPasswords,\n  resetPasswordGeneratorState,\n  unsetPasswords,\n  generatePassword,\n  getPasswordsFromFirebase,\n  savePassword2Firebase,\n  deletePasswordFromFirebase,\n  editPasswordFromFirebase,\n} = passwordSlice.actions;\n\nexport const selectPassword = (state: { password: { password: string } }) =>\n  state.password.password;\nexport const selectPasswordIdPicked = (state: { password: { passwordIdPicked: string } }) =>\n  state.password.passwordIdPicked;\nexport const selectPasswordPicked = (state: { password: { passwordPicked: string } }) =>\n  state.password.passwordPicked;\nexport const selectPasswordDescriptionPicked = (state: {\n  password: { passwordDescriptionPicked: string };\n}) => state.password.passwordDescriptionPicked;\nexport const selectIsCreateMode = (state: { password: { isCreateMode: boolean } }) =>\n  state.password.isCreateMode;\nexport const selectIsEditMode = (state: { password: { isEditMode: boolean } }) =>\n  state.password.isEditMode;\nexport const selectIsDeleteMode = (state: { password: { isDeleteMode: boolean } }) =>\n  state.password.isDeleteMode;\nexport const selectPasswordLength = (state: { password: { length: number } }) =>\n  state.password.length;\nexport const selectPasswords = (state: { password: { passwords: Array<PasswordI> } }) =>\n  state.password.passwords;\n","const lower = 'abcdefghijklmñopqrstuvwxyz';\nconst upper = 'ABCDEFGHIJKLMNÑOPQRSTUVWXYZ';\nconst number = '0123456789';\nconst symbols = '[]{}<>\":|!@#$%^&*()_+`~/';\n\nconst devWarnings = [\n  'Clipboard has been extracted from react-native core',\n  'AsyncStorage has been extracted from react-native core',\n  'Setting a timer for a long period of time, i.e. multiple minutes',\n  'Picker has been extracted from react-native core and will be removed',\n];\n\nconst popoverMessage = 'You can generate passwords without store them.';\n\nconst defaultEmptyPasswordDescription = 'This password has no description. Please update it.';\n\nconst infoMessages = {\n  copied2Clipboard: 'The password was copied to clipboard',\n  newPassword: 'New password generated',\n  about2CreatePassword: \"You're about to create a new password\",\n};\n\nconst FIREBASE_STORAGE_URL = 'https://firebasestorage.googleapis.com';\nconst { FIREBASE_STORAGE_BUCKET } = process.env;\n\nconst imagesTokens = {\n  FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN: '9a72b084-fbf7-4ec0-bfc7-4c0c4fe923c7',\n  FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN: '48ac40a8-14ac-4b31-8246-1b9a64efc19e',\n  FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN: '9a4c9252-2f1e-4580-868c-e5d6fd383cd9',\n  FIREBASE_FIRESTORAGE_EASY_SIGNUP_IMAGE_TOKEN: '65edc2f3-657d-43f9-89b1-a2e1be19e41f',\n  FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN: '287fce56-7f18-4d06-a85b-24b6fbc42171',\n  FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN: '79295f0a-cf45-4ed2-aa1d-0e7c29cafea3',\n  FIREBASE_FIRESTORAGE_INITIAL_PASSWORD_IMAGE_TOKEN: 'daa4acf7-8be3-4210-aae0-e9de589b846d',\n  FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN: '5f6da2b8-26cc-48ca-8352-30afd0cb3dd3',\n  FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN: '5cf416cc-0f22-4ca6-be38-fc816742a76e',\n};\n\nconst appColors = {\n  textTint: '#FFF',\n  maximumTintColorSlider: '#d3d3d3',\n  disabledColorSlider: '#D3D3D3',\n  activeTint: '#9ac8fc',\n  primary: '#3091e0',\n  primaryDark: '#236daa',\n  red: '#DB4437',\n};\n\nexport interface PasswordI {\n  id: string;\n  description: string;\n  passwordGenerated: string;\n  socialMedia: string;\n}\n\nexport {\n  devWarnings,\n  lower,\n  upper,\n  number,\n  symbols,\n  popoverMessage,\n  defaultEmptyPasswordDescription,\n  appColors,\n  infoMessages,\n  FIREBASE_STORAGE_URL,\n  FIREBASE_STORAGE_BUCKET,\n  imagesTokens,\n};\n","import { select, put, takeLeading } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport {\n  generatePassword,\n  selectIsEditMode,\n  selectPasswordLength,\n  selectPasswordPicked,\n  setPassword,\n} from 'reduxStore/slices/passwordSlice';\nimport { lower, upper, number, symbols } from 'utils/constants';\nimport { setPasswordGenerated } from 'utils/localStorageFuncs';\n\nimport {\n  selectIsLowerCase,\n  selectIsNumbers,\n  selectIsSymbols,\n  selectIsUpperCase,\n} from 'reduxStore/slices/configuratorSlice';\n\nconst log = logger.createLogger();\n\nfunction* getPasswordGeneratorFlow(): Generator {\n  try {\n    const length = yield select(selectPasswordLength);\n    const isUpperCase = yield select(selectIsUpperCase);\n    const isLowerCase = yield select(selectIsLowerCase);\n    const isNumbers = yield select(selectIsNumbers);\n    const isSymbols = yield select(selectIsSymbols);\n\n    const isEditMode = yield select(selectIsEditMode);\n    const passwordPicked = yield select(selectPasswordPicked);\n\n    const isUpper: string = isUpperCase ? upper : '';\n    const isLower: string = isLowerCase ? lower : '';\n    const isNumber: string = isNumbers ? number : '';\n    const isSymbol: string = isSymbols ? symbols : '';\n\n    const all = isUpper + isLower + isNumber + isSymbol;\n    let password = '';\n\n    // @ts-ignore\n    for (let i = 0; i < length; i++) {\n      password += all.charAt(Math.floor(Math.random() * all.length));\n    }\n\n    setPasswordGenerated(password);\n\n    if (isEditMode) {\n      if (passwordPicked) {\n        // TODO: This flow needs to be updated in future\n        /* This condition will only be applied at the first time the user\n         * click in edit password, the password picked will be set as\n         * a generated password, and then will be deleted from the state.\n         * */\n        // @ts-ignore\n        password = passwordPicked;\n      }\n    }\n    yield put(setPassword({ password }));\n  } catch (exception) {\n    log.error('PasswordGeneratorSaga: ', { exception: exception.message });\n  }\n}\n\nexport const passwordGeneratorSaga = [takeLeading(generatePassword.type, getPasswordGeneratorFlow)];\n","import { put, select, call, takeLeading } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport { getPasswordsFromFirebase, setPasswords } from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { getPasswordsByUserId } from 'services/database';\n\nconst log = logger.createLogger();\n\nfunction* getPasswordsFlow(): Generator {\n  try {\n    const userId = yield select(selectUserId);\n    const passwords = yield call(getPasswordsByUserId, userId);\n\n    yield put(setPasswords({ passwords }));\n  } catch (exception) {\n    // @ts-ignore\n    log.error('GetPasswordSaga: ', { exception: exception.message });\n  }\n}\n\nexport const getPasswordsSaga = [takeLeading(getPasswordsFromFirebase.type, getPasswordsFlow)];\n","import { call, put, takeLeading } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport {\n  getSocialMediaListFromFirebase,\n  setSocialMediaList,\n} from 'reduxStore/slices/socialMediaSlice';\nimport { getSocialMedia } from 'services/database';\n\nconst log = logger.createLogger();\n\nfunction* getSocialMediaFlow(): Generator {\n  try {\n    const socialMediaList = yield call(getSocialMedia);\n\n    yield put(setSocialMediaList({ socialMediaList }));\n  } catch (exception) {\n    log.error('GetSocialMediaSaga: ', { exception: exception.message });\n  }\n}\n\nexport const getSocialMediaSaga = [\n  takeLeading(getSocialMediaListFromFirebase.type, getSocialMediaFlow),\n];\n","import { select, call, takeLeading } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport { savePassword2Firebase } from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { sendPassword2Firebase } from 'services/database';\n\nconst log = logger.createLogger();\n\nfunction* savePasswordFlow({ payload }: Params): Generator {\n  try {\n    const userId = yield select(selectUserId);\n    const { socialMedia, password, description } = payload;\n\n    // @ts-ignore\n    yield call(sendPassword2Firebase, userId, password, description, socialMedia);\n  } catch (exception) {\n    // @ts-ignore\n    log.error('SavePasswordSaga: ', { exception: exception.message });\n  }\n}\n\n// @ts-ignore\nexport const savePasswordSaga = [takeLeading(savePassword2Firebase.type, savePasswordFlow)];\n\ninterface Params {\n  payload: {\n    socialMedia: string;\n    password: string;\n    description: string;\n  };\n}\n","import { put, select, call, takeLeading } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport {\n  deletePasswordFromFirebase,\n  selectPasswordIdPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { deletePasswordById } from 'services/database';\nimport { setIsRequest, unsetIsRequest } from 'reduxStore/slices/applicationStatusSlice';\n\nconst log = logger.createLogger();\n\nfunction* deletePasswordFlow(): Generator {\n  try {\n    const passwordId = yield select(selectPasswordIdPicked);\n\n    yield put(setIsRequest());\n\n    // @ts-ignore\n    yield call(deletePasswordById, passwordId);\n\n    yield put(unsetIsRequest());\n  } catch (exception) {\n    log.error('DeletePasswordSaga: ', { exception: exception.message });\n  }\n}\n\nexport const deletePasswordSaga = [\n  // @ts-ignore\n  takeLeading(deletePasswordFromFirebase.type, deletePasswordFlow),\n];\n","import { select, call, takeLeading, put } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport {\n  editPasswordFromFirebase,\n  selectPassword,\n  selectPasswordDescriptionPicked,\n  selectPasswordIdPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { updatePasswordByIdFromFirebase } from 'services/database';\nimport { selectSocialMediaPicked } from 'reduxStore/slices/socialMediaSlice';\nimport { setIsRequest, unsetIsRequest } from 'reduxStore/slices/applicationStatusSlice';\n\nconst log = logger.createLogger();\n\nfunction* updatePasswordFlow(): Generator {\n  try {\n    const passwordId = yield select(selectPasswordIdPicked);\n    const socialMedia = yield select(selectSocialMediaPicked);\n    const password = yield select(selectPassword);\n    const description = yield select(selectPasswordDescriptionPicked);\n\n    yield put(setIsRequest());\n    yield call(\n      // @ts-ignore\n      updatePasswordByIdFromFirebase,\n      passwordId,\n      password,\n      description,\n      socialMedia\n    );\n    yield put(unsetIsRequest());\n  } catch (exception) {\n    log.error('UpdatePasswordSaga: ', { exception: exception.message });\n  }\n}\n\nexport const updatePasswordSaga = [takeLeading(editPasswordFromFirebase.type, updatePasswordFlow)];\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport { userSlice } from './userSlice';\nimport { passwordSlice } from './passwordSlice';\nimport { configuratorSlice } from 'reduxStore/slices/configuratorSlice';\nimport { applicationStatusSlice } from 'reduxStore/slices/applicationStatusSlice';\nimport { socialMediaSlice } from 'reduxStore/slices/socialMediaSlice';\nimport { uiElementsSlice } from 'reduxStore/slices/uiElementsSlice';\n\nconst createRootReducer = () =>\n  combineReducers({\n    user: userSlice.reducer,\n    password: passwordSlice.reducer,\n    configurator: configuratorSlice.reducer,\n    applicationStatus: applicationStatusSlice.reducer,\n    socialMedia: socialMediaSlice.reducer,\n    uiElements: uiElementsSlice.reducer,\n  });\n\nexport default createRootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport IndexSagas from 'reduxStore/sagas/index';\nimport createSagaMiddleware from 'redux-saga';\nimport createRootReducer from 'reduxStore/slices/rootReducer';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [sagaMiddleware];\n\nconst store = configureStore({\n  reducer: createRootReducer(),\n  middleware,\n});\n\nsagaMiddleware.run(IndexSagas);\n\nexport default store;\n","import { all } from 'redux-saga/effects';\nimport { passwordGeneratorSaga } from 'reduxStore/sagas/passwordGeneratorSaga';\nimport { getPasswordsSaga } from 'reduxStore/sagas/getPasswordsSaga';\nimport { getSocialMediaSaga } from 'reduxStore/sagas/getSocialMediaSaga';\nimport { savePasswordSaga } from 'reduxStore/sagas/savePasswordSaga';\nimport { deletePasswordSaga } from 'reduxStore/sagas/deletePasswordSaga';\nimport { updatePasswordSaga } from 'reduxStore/sagas/updatePasswordSaga';\n\nexport default function* IndexSagas() {\n  yield all([\n    ...passwordGeneratorSaga,\n    ...getPasswordsSaga,\n    ...getSocialMediaSaga,\n    ...savePasswordSaga,\n    ...deletePasswordSaga,\n    ...updatePasswordSaga,\n  ]);\n}\n","import React from 'react';\n\nimport { LogBox } from 'react-native';\nimport { Provider } from 'react-redux';\nimport { TailwindProvider } from 'tailwindcss-react-native';\n\nimport store from 'reduxStore/store';\nimport { devWarnings } from 'utils/constants';\nimport Root from './src/root/rootContainer';\n\nif (process.env.ENV === 'dev') {\n  LogBox.ignoreLogs(devWarnings);\n}\n\ndeclare global {\n  // eslint-disable-next-line no-unused-vars\n  interface Window {\n    store: any;\n  }\n}\n\nwindow.store = store;\n\nconst App = () => (\n  <Provider store={store}>\n    <TailwindProvider>\n      <Root />\n    </TailwindProvider>\n  </Provider>\n);\n\nexport default App;\n","import React from 'react';\n\nimport { StyleSheet, View, ActivityIndicator } from 'react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  horizontal: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    padding: 10,\n  },\n});\n\nexport const LoadingIndicator = () => (\n  <View style={[styles.container, styles.horizontal]}>\n    <ActivityIndicator size='large' color='#3091e0' />\n  </View>\n);\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nexport const styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 10,\n  },\n\n  image: {\n    flex: 0.7,\n    borderRadius: 3,\n    justifyContent: 'center',\n  },\n\n  title: {\n    fontWeight: 'bold',\n    fontSize: 25,\n    marginBottom: 5,\n    color: appColors.primaryDark,\n    textAlign: 'center',\n  },\n\n  description: {\n    fontSize: 14,\n    color: 'grey',\n    textAlign: 'center',\n    paddingHorizontal: 64,\n  },\n});\n","import { Image, Text, useWindowDimensions, View } from 'react-native';\nimport React from 'react';\n\nimport { styles } from './styles';\n\nexport const OnBoardingItem = ({ item }: Props) => {\n  const { title, description, image } = item;\n  const { width } = useWindowDimensions();\n\n  return (\n    <View style={[styles.container, { width }]}>\n      <Image\n        source={{\n          uri: image,\n        }}\n        style={[styles.image, { width, resizeMode: 'contain' }]}\n      />\n\n      <View style={{ flex: 0.3, marginTop: 15, paddingTop: 5, paddingHorizontal: 8 }}>\n        <Text style={styles.title}>{title}</Text>\n        <Text style={styles.description}>{description}</Text>\n      </View>\n    </View>\n  );\n};\n\ninterface Props {\n  item: { id: number; title: string; description: string; image: string };\n}\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nexport const styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    height: 15,\n    marginVertical: 5,\n    marginBottom: 10,\n  },\n\n  dot: {\n    height: 10,\n    borderRadius: 10,\n    backgroundColor: appColors.primaryDark,\n    marginHorizontal: 8,\n  },\n});\n","import React from 'react';\nimport { View, Animated, useWindowDimensions } from 'react-native';\n\nimport { styles } from './styles';\n\nexport function Paginator({ data, scrollX }: Props) {\n  const { width } = useWindowDimensions();\n\n  return (\n    <View style={styles.container}>\n      {data.map((_: any, i: number) => {\n        const inputRange = [(i - 1) * width, i * width, (i + 1) * width];\n        const dotWidth = scrollX.interpolate({\n          inputRange,\n          outputRange: [10, 20, 10],\n          extrapolate: 'clamp',\n        });\n        const opacity = scrollX.interpolate({\n          inputRange,\n          outputRange: [0.3, 1, 0.3],\n          extrapolate: 'clamp',\n        });\n\n        return <Animated.View key={i} style={[styles.dot, { width: dotWidth, opacity }]} />;\n      })}\n    </View>\n  );\n}\n\ninterface Props {\n  data: any;\n  scrollX: any;\n}\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nexport const styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 10,\n  },\n\n  button: {\n    position: 'absolute',\n    backgroundColor: appColors.primary,\n    borderRadius: 100,\n    padding: 15,\n  },\n});\n","import React from 'react';\nimport { View, TouchableOpacity } from 'react-native';\nimport Svg, { G, Circle } from 'react-native-svg';\nimport { AntDesign } from '@expo/vector-icons';\nimport { appColors } from 'utils/constants';\nimport { styles } from './styles';\n\nexport const NextButton = ({\n  size,\n  strokeWidth,\n  center,\n  radius,\n  circumference,\n  progressRef,\n  scrollTo,\n}: Props) => (\n  <View style={styles.container}>\n    <Svg width={size} height={size}>\n      {/* @ts-ignore */}\n      <G rotation='-90' origin={center}>\n        <Circle\n          stroke={appColors.maximumTintColorSlider}\n          cx={center}\n          cy={center}\n          r={radius}\n          strokeWidth={strokeWidth}\n        />\n        <Circle\n          ref={progressRef}\n          stroke={appColors.primaryDark}\n          cx={center}\n          cy={center}\n          r={radius}\n          strokeWidth={strokeWidth}\n          strokeDasharray={circumference}\n          // strokeDashoffset={circumference - (circumference * 100) / 100}\n        />\n      </G>\n    </Svg>\n    <TouchableOpacity style={styles.button} activeOpacity={0.6} onPress={scrollTo}>\n      <AntDesign name='arrowright' size={20} color='#FFF' />\n    </TouchableOpacity>\n  </View>\n);\n\ninterface Props {\n  size: number;\n  strokeWidth: number;\n  center: number;\n  radius: number;\n  circumference: number;\n  progressRef: React.RefObject<View>;\n  scrollTo: () => void;\n}\n","import React, { useEffect, useRef } from 'react';\nimport { Animated, View } from 'react-native';\nimport { NextButton } from 'components/OnBoarding/NextButton/nextButton';\n\nconst NextButtonContainer = ({\n  scrollTo,\n  percentage,\n  children,\n}: {\n  scrollTo: () => void;\n  percentage: number;\n  children: React.FunctionComponent;\n}) => {\n  const size: number = 80;\n  const strokeWidth: number = 2;\n  const center: number = size / 2;\n  const radius: number = size / 2 - strokeWidth / 2;\n  const circumference: number = 2 * Math.PI * radius;\n\n  const progressAnimation = useRef(new Animated.Value(0)).current;\n  const progressRef = useRef<View>(null);\n\n  const animation = (toValue: any) =>\n    Animated.timing(progressAnimation, {\n      toValue,\n      duration: 250,\n      useNativeDriver: true,\n    }).start();\n\n  useEffect(() => {\n    animation(percentage);\n  }, [percentage]);\n\n  useEffect(() => {\n    progressAnimation.addListener(\n      (value) => {\n        const strokeDashoffset = circumference - (circumference * value.value) / 100;\n\n        if (progressRef?.current) {\n          progressRef.current.setNativeProps({\n            strokeDashoffset,\n          });\n        }\n      },\n      // @ts-ignore\n      [percentage]\n    );\n\n    return () => {\n      progressAnimation.removeAllListeners();\n    };\n  }, []);\n\n  return children({\n    size,\n    strokeWidth,\n    center,\n    radius,\n    circumference,\n    progressRef,\n    scrollTo,\n  });\n};\n\nconst NextButtonContainerWrapper = ({\n  scrollTo,\n  percentage,\n}: {\n  scrollTo: () => void;\n  percentage: number;\n}) => (\n  <NextButtonContainer scrollTo={scrollTo} percentage={percentage}>\n    {(renderProps: any) => <NextButton {...renderProps} />}\n  </NextButtonContainer>\n);\n\nexport default NextButtonContainerWrapper;\n","import { FIREBASE_STORAGE_BUCKET, FIREBASE_STORAGE_URL, imagesTokens } from 'utils/constants';\n\nconst {\n  FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_EASY_SIGNUP_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_INITIAL_PASSWORD_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN,\n} = imagesTokens;\nconst FIREBASE_STORAGE_FINAL_URL = `${FIREBASE_STORAGE_URL}/v0/b/${FIREBASE_STORAGE_BUCKET}/o`;\n\nexport const slides = [\n  {\n    id: 1,\n    title: 'Welcome to Passvault!',\n    description: 'The main goal of this app is to generate secure and configurable passwords',\n    image: `${FIREBASE_STORAGE_FINAL_URL}/welcome.png?alt=media&token=${FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN}`,\n  },\n  {\n    id: 2,\n    title: 'Password Generator',\n    description: 'Configure and generate a password is very simple!',\n    image: `${FIREBASE_STORAGE_FINAL_URL}/password_generator.gif?alt=media&token=${FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN}`,\n  },\n  {\n    id: 3,\n    title: 'Storing Generated Passwords',\n    description: 'Optionally you can enroll up and store many generated passwords',\n    image: `${FIREBASE_STORAGE_FINAL_URL}/sign-up.png?alt=media&token=${FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN}`,\n  },\n  {\n    id: 4,\n    title: 'Signup is very easy!',\n    description:\n      \"No passwords required, duh! you only need a username with more than 6 characters for signup and login. That's it!\",\n    image: `${FIREBASE_STORAGE_FINAL_URL}/easy-signup.gif?alt=media&token=${FIREBASE_FIRESTORAGE_EASY_SIGNUP_IMAGE_TOKEN}`,\n  },\n  {\n    id: 5,\n    title: 'Free to use',\n    description:\n      \"If you don't feel comfortable creating an account, you can still generate passwords but those wont't be stored\",\n    image: `${FIREBASE_STORAGE_FINAL_URL}/free-to-use.png?alt=media&token=${FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN}`,\n  },\n  {\n    id: 6,\n    title: 'Check your Generated Passwords listed',\n    description:\n      \"If you're an authenticated user all your passwords will be listed (latest listed first), and navigate with a sidebar menu\",\n    image: `${FIREBASE_STORAGE_FINAL_URL}/passwords-listed.png?alt=media&token=${FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN}`,\n  },\n  {\n    id: 7,\n    title: 'Place your initial password',\n    description:\n      \"If you prefer, you can place an initial password when you're creating a new entry, otherwise generate a password\",\n    image: `${FIREBASE_STORAGE_FINAL_URL}/initial-password.gif?alt=media&token=${FIREBASE_FIRESTORAGE_INITIAL_PASSWORD_IMAGE_TOKEN}`,\n  },\n  {\n    id: 8,\n    title: 'Update your existing passwords',\n    description:\n      'In order to avoid to create more entries, you can update an existing password and save the changes',\n    image: `${FIREBASE_STORAGE_FINAL_URL}/password-edit.gif?alt=media&token=${FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN}`,\n  },\n  {\n    id: 9,\n    title: \"Let's go with it!\",\n    description: \"Now we're ready to start to use Passvault!\",\n    image: `${FIREBASE_STORAGE_FINAL_URL}/onboarding-completed.png?alt=media&token=${FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN}`,\n  },\n];\n","import React from 'react';\nimport { View, StyleSheet, FlatList, Animated, Platform } from 'react-native';\nimport { OnBoardingItem } from 'components/OnBoarding/OnBoardingItem/onBoardingItem';\nimport { Paginator } from 'components/OnBoarding/Paginator/paginator';\nimport NextButton from 'components/OnBoarding/NextButton/nextButtonContainer';\nimport { slides } from './slides';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingVertical: Platform.OS === 'ios' ? 30 : 15,\n  },\n});\n\nexport const OnBoarding = ({\n  currentIndex,\n  scrollX,\n  slidesRef,\n  viewableItemsChanged,\n  viewConfig,\n  scrollTo,\n}: Props) => (\n  <View style={styles.container}>\n    <View style={{ flex: 1 }}>\n      <FlatList\n        ref={slidesRef}\n        data={slides}\n        renderItem={({ item }) => <OnBoardingItem item={item} />}\n        horizontal\n        showsHorizontalScrollIndicator={false}\n        pagingEnabled\n        bounces={false}\n        keyExtractor={(item) => `${item.id}`}\n        onScroll={Animated.event([{ nativeEvent: { contentOffset: { x: scrollX } } }], {\n          useNativeDriver: false,\n        })}\n        onViewableItemsChanged={viewableItemsChanged}\n        viewabilityConfig={viewConfig}\n      />\n    </View>\n    <Paginator data={slides} scrollX={scrollX} />\n    <NextButton scrollTo={scrollTo} percentage={(currentIndex + 1) * (100 / slides.length)} />\n  </View>\n);\n\ninterface Props {\n  currentIndex: number;\n  scrollX: Animated.Value;\n  slidesRef: React.RefObject<FlatList>;\n  viewableItemsChanged: () => void;\n  viewConfig: any;\n  scrollTo: () => void;\n}\n","import React, { Dispatch, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { Animated, FlatList } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { setIsRequest } from 'reduxStore/slices/applicationStatusSlice';\nimport { OnBoarding } from 'screens/OnBoarding/onBoarding';\nimport { slides } from 'screens/OnBoarding/slides';\nimport { setOnBoardingViewed } from 'utils/localStorageFuncs';\n\nconst OnBoardingContainer = ({ children }: { children: React.FunctionComponent }) => {\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\n  const scrollX = useRef<Animated.Value>(new Animated.Value(0)).current;\n  const slidesRef = useRef<FlatList>(null);\n  const viewConfig = useRef({ viewAreaCoveragePercentThreshold: 50 }).current;\n  const navigation: NativeStackNavigationProp<any> = useNavigation();\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n\n  const viewableItemsChanged = useRef((item: { viewableItems: any }) => {\n    const { viewableItems } = item;\n    setCurrentIndex(viewableItems[0].index);\n  }).current;\n\n  const scrollTo = () => {\n    if (currentIndex < slides.length - 1) {\n      slidesRef.current?.scrollToIndex({ index: currentIndex + 1 });\n    } else {\n      setOnBoardingViewed('true');\n      dispatch(setIsRequest());\n      navigation.replace('Login');\n    }\n  };\n\n  return children({\n    currentIndex,\n    scrollX,\n    slidesRef,\n    viewableItemsChanged,\n    viewConfig,\n    scrollTo,\n  });\n};\n\nconst OnBoardingContainerWrapper = () => (\n  <OnBoardingContainer>{(renderProps: any) => <OnBoarding {...renderProps} />}</OnBoardingContainer>\n);\n\nexport default OnBoardingContainerWrapper;\n","import { ToastAndroid } from 'react-native';\n\nexport const showInfoMessage = (message: string) => {\n  ToastAndroid.show(message, ToastAndroid.SHORT);\n};\n","import React, { useCallback } from 'react';\nimport { Platform, TouchableOpacity } from 'react-native';\nimport { Feather } from '@expo/vector-icons';\n\nimport { popoverMessage } from 'utils/constants';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport { useDispatch } from 'react-redux';\nimport { setSnackbarMessage, setSnackbarVisible } from 'reduxStore/slices/uiElementsSlice';\n\nexport const CustomPopover = ({ touchableRef }: Props) => {\n  const dispatch = useDispatch();\n\n  const onPress = useCallback(() => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(popoverMessage);\n    } else {\n      dispatch(setSnackbarMessage({ snackbarMessage: popoverMessage }));\n      dispatch(setSnackbarVisible({ snackbarVisible: true }));\n    }\n  }, []);\n\n  return (\n    <TouchableOpacity ref={touchableRef} onPress={onPress}>\n      <Feather name='info' size={20} color='black' />\n    </TouchableOpacity>\n  );\n};\n\ninterface Props {\n  touchableRef: any;\n}\n","import React from 'react';\nimport { Snackbar } from 'react-native-paper';\n\n// Reference for Icons usage: https://icons.expo.fyi/\n\nexport const CustomSnackbar = ({ message, isSnackbarVisible, onDismiss }: Props) => (\n  <Snackbar visible={isSnackbarVisible} onDismiss={onDismiss} duration={1500}>\n    {message}\n  </Snackbar>\n);\n\ninterface Props {\n  message: string;\n  isSnackbarVisible: boolean;\n  onDismiss: any;\n}\n","import { Platform, StyleSheet } from 'react-native';\n\nexport const screen = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n    marginBottom: 5,\n  },\n});\n\nexport const shadow = StyleSheet.create({\n  container: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n\n    elevation: 5,\n  },\n});\n\nexport const cardView = StyleSheet.create({\n  container: {\n    width: '90%',\n    padding: 10,\n    backgroundColor: '#FFF',\n    borderRadius: 5,\n    marginBottom: 15,\n    justifyContent: 'center',\n  },\n});\n\nexport const passwordStyle = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n  },\n  inputContainer: {\n    margin: 10,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  input: {\n    width: Platform.OS === 'web' ? '85%' : '75%',\n    borderWidth: 1,\n    borderColor: '#000',\n    backgroundColor: 'white',\n    paddingHorizontal: 15,\n    paddingVertical: 7,\n    borderRadius: 10,\n    textAlign: 'left',\n    fontFamily: Platform.OS === 'ios' ? 'Courier New' : 'monospace',\n    fontWeight: 'bold',\n    fontSize: Platform.OS === 'web' ? 16 : 20,\n  },\n  icons: {\n    marginLeft: 15,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n});\n\nexport const configuration = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n  },\n  textContainer: {\n    margin: 10,\n    justifyContent: 'flex-start',\n  },\n  textHeader: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  passwordLengthContainer: {\n    padding: 10,\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n  },\n  inputLength: {\n    width: Platform.OS === 'web' ? '15%' : '20%',\n    borderWidth: 1,\n    borderColor: '#000',\n    backgroundColor: 'white',\n    paddingHorizontal: 7,\n    paddingVertical: 10,\n    marginRight: 5,\n    borderRadius: 10,\n    textAlign: 'center',\n    fontWeight: 'bold',\n  },\n  lengthSliderContainer: {\n    padding: 10,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n  },\n  switchToggle: { flexDirection: 'row', padding: 10, alignItems: 'center' },\n});\n\nexport const checkBox = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    marginTop: 15,\n    justifyContent: 'space-around',\n  },\n  section: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  paragraph: {\n    fontSize: 15,\n  },\n  checkbox: {\n    margin: 8,\n  },\n});\n","export type SVGProps = Readonly<{\n  width?: number;\n  height?: number;\n  fillOpacity?: number;\n  variant?: SVGVariant;\n}>;\n\nexport type SVGVariant = Readonly<{\n  fillColor: string;\n  bgFillColor?: string;\n}>;\n\nconst byDefault: SVGVariant = {\n  fillColor: '#000',\n  bgFillColor: '#FFF',\n};\n\nexport const Variant = {\n  byDefault,\n};\n","import React from 'react';\nimport PassvaultLogoIcon from './components/PassvaultLogoIcon';\n\nconst Icons: { [key: string]: React.ElementType } = {\n  PassvaultLogoIcon,\n};\n\nexport default Icons;\n","import React from 'react';\nimport { SVGProps, Variant } from 'components/SVGs/SVGProps';\nimport Svg, { Path } from 'react-native-svg';\n\nconst PassvaultLogoIcon = ({\n  width = 1024,\n  height = 1024,\n  variant = Variant.byDefault,\n}: SVGProps) => (\n  <Svg viewBox='0 0 261.48 261.49' width={width} height={height} fill='none'>\n    <Path\n      fill={variant?.fillColor}\n      d='M204,0H57.46A57.46,57.46,0,0,0,0,57.46V204a57.45,57.45,0,0,0,57.46,57.46H204A57.45,57.45,0,0,0,261.48,204V57.46A57.46,57.46,0,0,0,204,0ZM188.34,118.45a38.86,38.86,0,0,1-15.79,15.69q-10.23,5.56-24.2,5.57h-33v71.57H88V196H67.57v-17H88v-17H67.57v-17H88V50.22h61.14q15.39,0,25.21,5.87a36.9,36.9,0,0,1,14.68,16,52.73,52.73,0,0,1,4.86,23.09A47.54,47.54,0,0,1,188.34,118.45Z'\n    />\n    <Path\n      fill={variant?.fillColor}\n      d='M166.37,95.17q0,10.53-6,16.7t-17.72,6.18H115.35V71.88H143.7q11.33,0,17,6T166.37,95.17Z'\n    />\n  </Svg>\n);\n\nexport default PassvaultLogoIcon;\n","import React from 'react';\nimport { IDENTS } from 'components/SVGs/Idents';\nimport { SVGVariant } from 'components/SVGs/SVGProps';\nimport Icons from 'components/SVGs/Icons';\n\nexport type IdentValue = typeof IDENTS[number];\n\ntype Props = Readonly<{\n  name: IdentValue;\n  width?: number;\n  height?: number;\n  fillOpacity?: number;\n  variant?: SVGVariant;\n}>;\n\nconst Icon = ({ name, ...rest }: Props) => {\n  const IconComponent = Icons[name];\n\n  return <IconComponent {...rest} />;\n};\n\nexport default Icon;\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    rowGap: 5,\n    padding: 40,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  inputContainer: {\n    marginTop: 30,\n    width: '100%',\n  },\n  input: {\n    backgroundColor: 'white',\n    paddingHorizontal: 15,\n    paddingVertical: 10,\n    borderRadius: 40,\n    marginTop: 10,\n  },\n  buttonContainer: {\n    width: '80%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  button: {\n    backgroundColor: appColors.primary,\n    width: '70%',\n    padding: 10,\n    borderRadius: 40,\n    alignItems: 'center',\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: '700',\n    fontSize: 16,\n  },\n  buttonOutLine: {\n    backgroundColor: 'white',\n    marginTop: 5,\n    borderColor: appColors.primary,\n    borderWidth: 2,\n  },\n  buttonOutLineText: {\n    color: '#4F4F4F',\n    fontWeight: '700',\n    fontSize: 16,\n  },\n  loginImage: {\n    width: 200,\n    height: 200,\n    marginBottom: 20,\n  },\n  tooltipImage: {},\n  linkContainer: {\n    width: '70%',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  link: {\n    marginRight: 3,\n  },\n  linkText: {\n    fontSize: 15,\n  },\n});\n\nexport default styles;\n","import React from 'react';\nimport { Text, TextInput, View, TouchableOpacity, Platform } from 'react-native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport { CustomPopover } from 'components/Popover/popover';\nimport { CustomSnackbar } from 'components/CustomSnackbar/customSnackbar';\nimport { appColors, popoverMessage } from 'utils/constants';\nimport { shadow } from 'screens/PasswordGenerator/styles';\nimport Icon from 'components/SVGs/Icon';\nimport styles from './styles';\n\nconst webStyles: string =\n  Platform.OS === 'web'\n    ? `\n    self-center\n    w-full\n    sm:w-11/12\n    md:w-1/2\n    lg:w-5/12\n    xl:w-[28%]`\n    : '';\n\nexport const Login = ({\n  navigation,\n  username,\n  isRequesting,\n  snackbarVisible,\n  touchableRef,\n  handleOnChangeText,\n  handleLogin,\n  handleOnKeyPress,\n  handleOnDismiss,\n}: Props) => {\n  if (isRequesting) return <LoadingIndicator />;\n\n  return (\n    <View className={webStyles} style={styles.container}>\n      <Icon\n        name='PassvaultLogoIcon'\n        width={130}\n        height={130}\n        variant={{ fillColor: appColors.primary }}\n      />\n      <View style={styles.inputContainer}>\n        <TextInput\n          placeholder='Username'\n          value={username}\n          style={[styles.input, shadow.container]}\n          onChangeText={handleOnChangeText}\n          onKeyPress={handleOnKeyPress}\n        />\n      </View>\n\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={handleLogin} style={styles.button}>\n          <Text style={styles.buttonText}>Login</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          onPress={() => {\n            navigation.navigate('SignUp');\n          }}\n          style={[styles.button, styles.buttonOutLine]}\n        >\n          <Text style={styles.buttonOutLineText}>Sign up</Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.linkContainer}>\n        <TouchableOpacity\n          onPress={() => {\n            navigation.navigate('PasswordGenerator');\n          }}\n          style={styles.link}\n        >\n          <Text style={styles.linkText}>Use it without an account </Text>\n        </TouchableOpacity>\n\n        <CustomPopover touchableRef={touchableRef} />\n      </View>\n\n      <CustomSnackbar\n        message={popoverMessage}\n        isSnackbarVisible={snackbarVisible}\n        onDismiss={handleOnDismiss}\n      />\n    </View>\n  );\n};\n\ninterface Props {\n  navigation: DrawerNavigationProp<any>;\n  username: string;\n  isRequesting: boolean;\n  snackbarVisible: boolean;\n  touchableRef: any;\n  handleOnChangeText: () => void;\n  handleLogin: () => void;\n  handleOnKeyPress: () => void;\n  handleOnDismiss: () => void;\n}\n","import React, { useEffect } from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport { BackHandler } from 'react-native';\nimport { auth } from 'services/firebase';\nimport { setUserData, unsetUserData } from 'reduxStore/slices/userSlice';\nimport { useDispatch } from 'react-redux';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\n\nconst useLogin = () => {\n  const dispatch = useDispatch();\n  const navigation = useNavigation<NativeStackNavigationProp<any>>();\n\n  const handleBackAction = () => {\n    if (navigation.canGoBack()) {\n      navigation.goBack();\n    } else {\n      BackHandler.exitApp();\n    }\n    return true;\n  };\n\n  useEffect(() => {\n    const subscription = BackHandler.addEventListener('hardwareBackPress', handleBackAction);\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        dispatch(setUserData({ id: user.uid, email: user.email }));\n        navigation.replace('Drawer');\n      } else {\n        dispatch(unsetUserData());\n      }\n    });\n\n    return () => {\n      subscription.remove();\n    };\n  }, [navigation]);\n};\n\nexport default useLogin;\n","import React, { Dispatch, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { TextInputKeyPressEventData } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { selectRequest, setIsRequest } from 'reduxStore/slices/applicationStatusSlice';\nimport { resetSnackbar, selectSnackbarVisible } from 'reduxStore/slices/uiElementsSlice';\nimport { signIn } from 'services/firebase';\nimport { Login } from 'screens/Login/login';\nimport useLogin from 'hooks/useLogin';\n\nconst LoginContainer = ({ children }: { children: React.FunctionComponent }) => {\n  const [username, setUsername] = useState<string>('');\n  const navigation: DrawerNavigationProp<any> = useNavigation();\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n\n  const isRequesting: boolean = useSelector(selectRequest);\n  const snackbarVisible: boolean = useSelector(selectSnackbarVisible);\n  const touchableRef = useRef(null);\n\n  useEffect(() => {\n    dispatch(setIsRequest());\n  }, []);\n\n  useLogin();\n\n  const handleLogin = () => signIn(username);\n\n  const handleOnKeyPress = ({ nativeEvent }: { nativeEvent: TextInputKeyPressEventData }) => {\n    if (nativeEvent.key === 'Enter') handleLogin();\n  };\n\n  const handleOnChangeText = (text: string) => setUsername(text);\n  const handleOnDismiss = () => dispatch(resetSnackbar());\n\n  return children({\n    navigation,\n    username,\n    isRequesting,\n    snackbarVisible,\n    touchableRef,\n    handleOnChangeText,\n    handleLogin,\n    handleOnKeyPress,\n    handleOnDismiss,\n  });\n};\n\nconst LoginContainerWrapper = () => (\n  <LoginContainer>{(renderProps: any) => <Login {...renderProps} />}</LoginContainer>\n);\n\nexport default LoginContainerWrapper;\n","import React from 'react';\nimport { View, Text, TextInput, TouchableOpacity, Platform } from 'react-native';\nimport { NavigationProp } from '@react-navigation/native';\nimport { shadow } from 'screens/PasswordGenerator/styles';\nimport Icon from 'components/SVGs/Icon';\nimport styles from 'screens/Login/styles';\nimport { appColors } from 'utils/constants';\n\nconst webStyles: string =\n  Platform.OS === 'web'\n    ? `\n    self-center\n    w-full\n    sm:w-11/12\n    md:w-1/2\n    lg:w-5/12\n    xl:w-[28%]`\n    : '';\n\nexport const SignUp = ({\n  navigation,\n  username,\n  handleSignUp,\n  handleOnChangeText,\n  handleOnKeyPress,\n}: Props) => (\n  <View className={webStyles} style={styles.container}>\n    <Icon\n      name='PassvaultLogoIcon'\n      width={130}\n      height={130}\n      variant={{ fillColor: appColors.primary }}\n    />\n    <View style={styles.inputContainer}>\n      <TextInput\n        placeholder='Username'\n        value={username}\n        style={[styles.input, shadow.container]}\n        onChangeText={handleOnChangeText}\n        onKeyPress={handleOnKeyPress}\n      />\n    </View>\n\n    <View style={styles.buttonContainer}>\n      <TouchableOpacity onPress={handleSignUp} style={styles.button}>\n        <Text style={styles.buttonText}>Sign up</Text>\n      </TouchableOpacity>\n    </View>\n\n    <View style={styles.linkContainer}>\n      <TouchableOpacity onPress={() => navigation.navigate('Login')} style={styles.link}>\n        <Text style={styles.linkText}>Go to Login if you have an account</Text>\n      </TouchableOpacity>\n    </View>\n  </View>\n);\n\ninterface Props {\n  navigation: NavigationProp<any>;\n  username: string;\n  handleSignUp: () => void;\n  handleOnChangeText: () => void;\n  handleOnKeyPress: () => void;\n}\n","import React, { Dispatch, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { TextInputKeyPressEventData } from 'react-native';\nimport { NavigationProp, useNavigation } from '@react-navigation/native';\nimport { setUserData, unsetUserData } from 'reduxStore/slices/userSlice';\nimport { auth, signUp } from 'services/firebase';\nimport { SignUp } from 'screens/SignUp/signup';\nimport { AnyAction } from '@reduxjs/toolkit';\n\nconst SignupContainer = ({ children }: { children: React.FunctionComponent }) => {\n  const [username, setUsername] = useState<string>('');\n  const navigation = useNavigation<NavigationProp<any>>();\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n\n  useEffect(\n    () =>\n      auth.onAuthStateChanged((user) => {\n        if (user) {\n          dispatch(setUserData({ id: user.uid, email: user.email }));\n          navigation.navigate('Drawer');\n        } else {\n          dispatch(unsetUserData());\n        }\n      }),\n    [navigation]\n  );\n\n  const handleSignUp = () => signUp(username);\n  const handleOnChangeText = (text: string) => setUsername(text);\n  const handleOnKeyPress = ({ nativeEvent }: { nativeEvent: TextInputKeyPressEventData }) => {\n    if (nativeEvent.key === 'Enter') handleSignUp();\n  };\n\n  return children({ navigation, username, handleSignUp, handleOnChangeText, handleOnKeyPress });\n};\n\nconst SignupContainerWrapper = () => (\n  <SignupContainer>{(renderProps: any) => <SignUp {...renderProps} />}</SignupContainer>\n);\n\nexport default SignupContainerWrapper;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectIsEditMode, selectPasswordDescriptionPicked } from 'reduxStore/slices/passwordSlice';\nimport { defaultEmptyPasswordDescription } from 'utils/constants';\n\nconst usePasswordDescription = () => {\n  const [description, setDescription] = useState<string>('');\n  const isEditMode = useSelector(selectIsEditMode);\n  const passwordDescriptionPicked = useSelector(selectPasswordDescriptionPicked);\n\n  useEffect(() => {\n    if (isEditMode) {\n      setDescription(\n        passwordDescriptionPicked !== defaultEmptyPasswordDescription\n          ? passwordDescriptionPicked\n          : ''\n      );\n    }\n  }, []);\n\n  return description;\n};\n\nexport default usePasswordDescription;\n","import React, { useEffect } from 'react';\nimport {\n  selectSocialMediaList,\n  selectSocialMediaPicked,\n  setSocialMediaPicked,\n} from 'reduxStore/slices/socialMediaSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsCreateMode } from 'reduxStore/slices/passwordSlice';\n\nconst useSocialMediaPicked = () => {\n  const dispatch = useDispatch();\n  const isCreateMode = useSelector(selectIsCreateMode);\n  const socialMediaList = useSelector(selectSocialMediaList);\n  const socialMediaPicked = useSelector(selectSocialMediaPicked);\n\n  useEffect(() => {\n    if (isCreateMode) {\n      dispatch(setSocialMediaPicked({ socialMediaPicked: socialMediaList[0].name || '' }));\n    }\n  }, []);\n\n  return socialMediaPicked;\n};\n\nexport default useSocialMediaPicked;\n","import {\n  savePassword2Firebase,\n  setPasswordDescriptionPicked,\n  setPasswordIdPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { setModalMessage, setModalTitle, setModalVisible } from 'reduxStore/slices/uiElementsSlice';\n\nconst handleCreateEditPassword = ({ dispatch, navigation, data }: Params) => {\n  const { isEditMode, isCreateMode, password, passwordIdPicked, description, socialMedia } = data;\n\n  const payload = {\n    password,\n    description,\n    socialMedia,\n  };\n\n  if (isEditMode) {\n    dispatch(setPasswordDescriptionPicked({ passwordDescriptionPicked: description }));\n    dispatch(setPasswordIdPicked({ passwordIdPicked }));\n    dispatch(setModalTitle({ modalTitle: 'Edit password warning !' }));\n    dispatch(\n      setModalMessage({\n        modalMessage: \"If you update this password, you won't be able to recover it.\",\n      })\n    );\n    dispatch(setModalVisible({ modalVisible: true }));\n  } else if (isCreateMode) {\n    dispatch(savePassword2Firebase(payload));\n    navigation.navigate('PasswordList');\n  }\n\n  return true;\n};\n\ninterface Params {\n  // eslint-disable-next-line no-unused-vars\n  dispatch: (arg0: { payload: any; type: string }) => void;\n  // eslint-disable-next-line no-unused-vars\n  navigation: { navigate: (arg0: string) => void };\n  data: {\n    isEditMode: boolean;\n    isCreateMode: boolean;\n    password: string;\n    passwordIdPicked: any;\n    description: string;\n    socialMedia: string;\n  };\n}\n\nexport default handleCreateEditPassword;\n","import { Platform, StyleSheet } from 'react-native';\n\nexport const createEditPassword = StyleSheet.create({\n  container: {\n    padding: 10,\n  },\n\n  userInputContainer: {\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    padding: 10,\n    marginBottom: 5,\n  },\n\n  textInput: {\n    borderWidth: 1,\n    borderRadius: 10,\n    paddingHorizontal: Platform.OS === 'web' ? 7 : 8,\n    paddingVertical: Platform.OS === 'web' ? 6 : 3,\n    marginBottom: 5,\n  },\n\n  dropdown: {\n    borderRadius: 10,\n    backgroundColor: 'white',\n    paddingHorizontal: Platform.OS === 'web' ? 7 : 8,\n    paddingVertical: Platform.OS === 'web' ? 6 : 3,\n  },\n\n  textLabel: { fontSize: 17, marginRight: 5, marginBottom: 5 },\n\n  descriptionLengthIndicator: {\n    fontSize: 12,\n    alignSelf: 'flex-end',\n  },\n\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontWeight: 'bold',\n  },\n});\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Text, TextInput, View } from 'react-native';\nimport { Picker } from '@react-native-picker/picker';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { Entypo } from '@expo/vector-icons';\n\nimport {\n  selectIsCreateMode,\n  selectIsEditMode,\n  selectPassword,\n  selectPasswordIdPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { selectSocialMediaList, setSocialMediaPicked } from 'reduxStore/slices/socialMediaSlice';\n\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport { cardView, shadow } from 'screens/PasswordGenerator/styles';\nimport usePasswordDescription from 'hooks/usePasswordDescription';\nimport useSocialMediaPicked from 'hooks/useSocialMediaPicked';\nimport { appColors } from 'utils/constants';\nimport handleCreateEditPassword from 'utils/handleCreateEditPassword';\nimport { createEditPassword } from './styles';\n\nexport const CreateEditPasswordConfigurator = ({ navigation }: Props) => {\n  const [description, setDescription] = useState<string>('');\n  const dispatch = useDispatch();\n  const passwordDescriptionMaxLen = 60;\n\n  const socialMediaPicked = useSocialMediaPicked();\n  const passwordDescriptionPicked = usePasswordDescription();\n\n  const socialMediaList = useSelector(selectSocialMediaList);\n  const isCreateMode = useSelector(selectIsCreateMode);\n  const isEditMode = useSelector(selectIsEditMode);\n  const passwordIdPicked = useSelector(selectPasswordIdPicked);\n  const password = useSelector(selectPassword);\n\n  const createEditButtonLabel = isCreateMode ? 'Save' : 'Edit';\n\n  const handleOnPress = () => {\n    handleCreateEditPassword({\n      dispatch,\n      navigation,\n      data: {\n        isEditMode,\n        isCreateMode,\n        password,\n        passwordIdPicked,\n        description,\n        socialMedia: socialMediaPicked,\n      },\n    });\n  };\n\n  if (socialMediaList.length < 1) return <LoadingIndicator />;\n\n  return (\n    <View style={[cardView.container, shadow.container, createEditPassword.container]}>\n      <View style={createEditPassword.userInputContainer}>\n        <Text style={createEditPassword.textLabel}>Social media:</Text>\n        <Picker\n          // ref={pickerRef}\n          style={createEditPassword.dropdown}\n          selectedValue={socialMediaPicked}\n          onValueChange={(itemValue) => {\n            dispatch(setSocialMediaPicked({ socialMediaPicked: itemValue }));\n          }}\n        >\n          {socialMediaList.map((item: { id: string; name: string }) => {\n            const label = item.name.charAt(0).toUpperCase() + item.name.slice(1);\n            return <Picker.Item key={item.id} label={label} value={item.name} />;\n          })}\n        </Picker>\n      </View>\n\n      <View style={createEditPassword.userInputContainer}>\n        <Text style={createEditPassword.textLabel}>Description:</Text>\n        <TextInput\n          style={createEditPassword.textInput}\n          placeholder='Type in here...'\n          maxLength={passwordDescriptionMaxLen}\n          value={description || passwordDescriptionPicked}\n          onChangeText={(text: string) => setDescription(text)}\n        />\n        <Text style={createEditPassword.descriptionLengthIndicator}>\n          {description ? description.length : passwordDescriptionPicked.length}/\n          {passwordDescriptionMaxLen}\n        </Text>\n      </View>\n\n      <Entypo.Button\n        style={createEditPassword.button}\n        name={isCreateMode ? 'save' : 'edit'}\n        size={24}\n        color={appColors.textTint}\n        backgroundColor={appColors.primary}\n        onPress={handleOnPress}\n      >\n        {createEditButtonLabel}\n      </Entypo.Button>\n    </View>\n  );\n};\n\ninterface Props {\n  navigation: DrawerNavigationProp<any> | NativeStackNavigationProp<any>;\n}\n","import React from 'react';\n\nimport { Text, TouchableOpacity } from 'react-native';\nimport Checkbox from 'expo-checkbox';\n\nexport const CustomCheckBox = ({ label, isChecked, disabled, color, onPress }: Props) => (\n  <TouchableOpacity\n    disabled={disabled}\n    style={{ flexDirection: 'row', alignItems: 'center' }}\n    onPress={onPress}\n  >\n    <Checkbox\n      style={{ margin: 8 }}\n      value={isChecked}\n      disabled={disabled}\n      color={isChecked ? color : undefined}\n      onValueChange={onPress}\n    />\n    <Text style={{ fontSize: 14, opacity: !disabled ? 1 : 0.3 }}>{label}</Text>\n  </TouchableOpacity>\n);\n\nconst defaultProps = {\n  disabled: false,\n};\n\ninterface Props {\n  label: string;\n  isChecked: boolean;\n  disabled?: boolean;\n  color: string;\n  onPress: any;\n}\n\nCustomCheckBox.defaultProps = defaultProps;\n","import { generatePassword, resetPasswordGeneratorState } from 'reduxStore/slices/passwordSlice';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport { infoMessages } from 'utils/constants';\nimport { unsetSocialMediaPicked } from 'reduxStore/slices/socialMediaSlice';\n\n/* Password Generator utils */\nexport const resetConfigurationState = (dispatch: any) => {\n  dispatch(resetPasswordGeneratorState());\n  dispatch(unsetSocialMediaPicked());\n};\n\nexport const handleGeneratePassword = (passwordFromState: string, dispatch: any) => {\n  if (!passwordFromState) {\n    dispatch(generatePassword());\n  }\n};\n\nexport const showAuthenticatedMessage = (userId: string, isCreatedMode: boolean) => {\n  if (userId && isCreatedMode) {\n    showInfoMessage(infoMessages.about2CreatePassword);\n  }\n};\n\n/* Password Generator Configurator utils */\nexport const handleLeftCheckboxes = (\n  dispatch: any,\n  setCheck1: any,\n  setCheck2: any,\n  selector1: string,\n  selector2: string,\n  value: boolean,\n  handleOtherCheckboxes: any\n) => {\n  const payloadString1 = `{ \"${selector1}\": ${value} }`;\n  const payloadString2 = `{ \"${selector2}\": ${!value} }`;\n  const payload1 = JSON.parse(payloadString1);\n  const payload2 = JSON.parse(payloadString2);\n\n  dispatch(setCheck1(payload1));\n  dispatch(setCheck2(payload2));\n\n  handleOtherCheckboxes();\n};\n\nexport const handleRightCheckboxes = (\n  value: boolean,\n  checkbox1: boolean,\n  checkbox2: boolean,\n  checkbox3: boolean,\n  dispatch: any,\n  configuratorAction: any,\n  payload: object\n) => {\n  if (checkbox1 || checkbox2 || checkbox3) {\n    dispatch(configuratorAction(payload));\n  }\n};\n\nexport const updateConfiguratorStateAndGeneratePassword = (dispatch: any) => {\n  dispatch(generatePassword());\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { View } from 'react-native';\n\nimport { CustomCheckBox } from 'components/PasswordConfigurator/CustomCheckBox/customCheckBox';\nimport { checkBox } from 'screens/PasswordGenerator/styles';\nimport {\n  setIsEasy2Read,\n  setIsAllChar,\n  setIsUpperCase,\n  setIsLowerCase,\n  setIsNumbers,\n  setIsSymbols,\n  setIsUpperCaseAndIsLowerCase,\n  setIsNumbersAndIsSymbols,\n  selectIsEasy2Read,\n  selectIsAllChar,\n  selectIsUpperCase,\n  selectIsLowerCase,\n  selectIsNumbers,\n  selectIsSymbols,\n} from 'reduxStore/slices/configuratorSlice';\nimport { generatePassword } from 'reduxStore/slices/passwordSlice';\n\nimport {\n  handleLeftCheckboxes,\n  handleRightCheckboxes,\n  updateConfiguratorStateAndGeneratePassword,\n} from 'utils/configuratorUtils';\nimport { appColors } from 'utils/constants';\n\n/* Reference for checkbox usage: [\n  https://docs.expo.dev/versions/latest/sdk/checkbox/,\n  https://snack.expo.dev/\n]\n */\n\ninterface Props {\n  switchEnabled: boolean;\n}\n\ninterface Checkbox {\n  label: string;\n  isChecked: boolean;\n  disabled?: boolean;\n  onPress: () => void;\n}\n\nexport const PasswordConfigurator = ({ switchEnabled }: Props) => {\n  const dispatch = useDispatch();\n\n  const isEasy2Read = useSelector(selectIsEasy2Read);\n  const isAllChar = useSelector(selectIsAllChar);\n\n  const isUpperCase = useSelector(selectIsUpperCase);\n  const isLowerCase = useSelector(selectIsLowerCase);\n  const isNumbers = useSelector(selectIsNumbers);\n  const isSymbols = useSelector(selectIsSymbols);\n\n  const handleRightCheckboxesGivenLeftCheckboxes = () => {\n    dispatch(setIsUpperCaseAndIsLowerCase({ isUpperCase: true, isLowerCase: true }));\n\n    if (!isEasy2Read || isAllChar) {\n      dispatch(setIsNumbersAndIsSymbols({ isNumbers: false, isSymbols: false }));\n    } else {\n      dispatch(setIsNumbersAndIsSymbols({ isNumbers: true, isSymbols: true }));\n    }\n\n    dispatch(generatePassword());\n  };\n\n  const leftCheckboxes: Array<Checkbox> = [\n    {\n      label: 'Eeasy to read',\n      isChecked: isEasy2Read,\n      onPress: () => {\n        handleLeftCheckboxes(\n          dispatch,\n          setIsEasy2Read,\n          setIsAllChar,\n          'isEasy2Read',\n          'isAllChar',\n          !isEasy2Read,\n          handleRightCheckboxesGivenLeftCheckboxes\n        );\n      },\n    },\n    {\n      label: 'All characters',\n      isChecked: isAllChar,\n      onPress: () => {\n        handleLeftCheckboxes(\n          dispatch,\n          setIsAllChar,\n          setIsEasy2Read,\n          'isAllChar',\n          'isEasy2Read',\n          !isAllChar,\n          handleRightCheckboxesGivenLeftCheckboxes\n        );\n      },\n    },\n  ];\n\n  const rightCheckboxes: Array<Checkbox> = [\n    {\n      label: 'Uppercase',\n      isChecked: isUpperCase,\n      onPress: () => {\n        handleRightCheckboxes(\n          !isUpperCase,\n          isLowerCase,\n          isNumbers,\n          isSymbols,\n          dispatch,\n          setIsUpperCase,\n          { isUpperCase: !isUpperCase }\n        );\n      },\n    },\n    {\n      label: 'Lowercase',\n      isChecked: isLowerCase,\n      onPress: () => {\n        handleRightCheckboxes(\n          !isLowerCase,\n          isUpperCase,\n          isNumbers,\n          isSymbols,\n          dispatch,\n          setIsLowerCase,\n          { isLowerCase: !isLowerCase }\n        );\n      },\n    },\n    {\n      label: 'Numbers',\n      isChecked: isNumbers,\n      disabled: !isAllChar || switchEnabled,\n      onPress: () => {\n        handleRightCheckboxes(\n          !isNumbers,\n          isUpperCase,\n          isLowerCase,\n          isSymbols,\n          dispatch,\n          setIsNumbers,\n          {\n            isNumbers: !isNumbers,\n          }\n        );\n      },\n    },\n    {\n      label: 'Symbols',\n      isChecked: isSymbols,\n      disabled: !isAllChar || switchEnabled,\n      onPress: () => {\n        handleRightCheckboxes(\n          !isSymbols,\n          isUpperCase,\n          isLowerCase,\n          isNumbers,\n          dispatch,\n          setIsSymbols,\n          {\n            isSymbols: !isSymbols,\n          }\n        );\n      },\n    },\n  ];\n\n  return (\n    <View style={checkBox.container}>\n      {/* Left checkboxes */}\n      <View style={{ flexDirection: 'column', marginLeft: -20 }}>\n        {leftCheckboxes.map(({ label, isChecked, onPress }, index) => (\n          <View key={index} style={checkBox.section}>\n            <CustomCheckBox\n              label={label}\n              isChecked={isChecked}\n              disabled={switchEnabled}\n              color={appColors.primary}\n              onPress={onPress}\n            />\n          </View>\n        ))}\n      </View>\n\n      {/* Right checkboxes */}\n      <View style={{ flexDirection: 'column' }}>\n        {rightCheckboxes.map(({ label, isChecked, disabled, onPress }, index) => (\n          <View key={index} style={checkBox.section}>\n            <CustomCheckBox\n              label={label}\n              isChecked={isChecked}\n              disabled={disabled || switchEnabled}\n              color={appColors.primary}\n              onPress={() => {\n                onPress();\n                updateConfiguratorStateAndGeneratePassword(dispatch);\n              }}\n            />\n          </View>\n        ))}\n      </View>\n    </View>\n  );\n};\n","import { Platform, StyleSheet } from 'react-native';\n\nconst borderWidth = 4;\n\nexport const styles = StyleSheet.create({\n  sliderContainer: {\n    width: Platform.OS === 'web' ? '85%' : '80%',\n    paddingVertical: 10,\n    paddingLeft: 10,\n    flexDirection: 'column',\n  },\n});\n\nexport const trackMarkStyles = StyleSheet.create({\n  activeMark: {\n    borderColor: 'red',\n    borderWidth,\n    left: -borderWidth / 2,\n  },\n  inactiveMark: {\n    borderColor: 'grey',\n    borderWidth,\n    left: -borderWidth / 2,\n  },\n});\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { generatePassword, selectPasswordPicked, setLength } from 'reduxStore/slices/passwordSlice';\n\nimport { View } from 'react-native';\nimport Slider from '@react-native-community/slider';\n\nimport { appColors } from 'utils/constants';\nimport { styles } from './styles';\n\n// Reference: https://youtu.be/MwSudWtT7ps?t=271\n\nconst SliderContainer = ({ switchEnabled, defaultValue }: Props) => {\n  const [value, setValue] = useState(defaultValue);\n  const passwordPicked = useSelector(selectPasswordPicked);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!Number.isNaN(value) && !passwordPicked && !switchEnabled) {\n      // TODO: This flow needs to be updated in future\n      /* If there was a password picked for the edit flow\n       * a new password won't be generated.\n       * */\n      dispatch(setLength({ length: value }));\n      dispatch(generatePassword());\n    }\n  }, [value]);\n\n  return (\n    <View style={styles.sliderContainer}>\n      <Slider\n        disabled={switchEnabled}\n        step={1}\n        value={switchEnabled ? 0 : defaultValue}\n        minimumValue={switchEnabled ? 0 : 6}\n        maximumValue={switchEnabled ? 1 : 50}\n        minimumTrackTintColor={switchEnabled ? appColors.disabledColorSlider : appColors.primary}\n        maximumTrackTintColor={\n          switchEnabled ? appColors.disabledColorSlider : appColors.maximumTintColorSlider\n        }\n        thumbTintColor={switchEnabled ? appColors.disabledColorSlider : appColors.primary}\n        onValueChange={setValue}\n      />\n    </View>\n  );\n};\n\nexport default SliderContainer;\n\ninterface Props {\n  switchEnabled: boolean;\n  defaultValue: number;\n}\n","import React from 'react';\nimport { View, Text, TextInput, TouchableOpacity, Platform, ScrollView } from 'react-native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { Divider, Switch } from 'react-native-paper';\nimport { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\nimport { CreateEditPasswordConfigurator } from 'components/CreateEditPasswordConfigurator/createEditPasswordConfigurator';\nimport { PasswordConfigurator } from 'components/PasswordConfigurator/passwordConfigurator';\nimport { CustomSnackbar } from 'components/CustomSnackbar/customSnackbar';\nimport SliderContainer from 'components/SliderContainer/sliderContainer';\nimport { appColors } from 'utils/constants';\nimport { cardView, shadow, screen, passwordStyle, configuration } from './styles';\n\nconst webStyles: string =\n  Platform.OS === 'web'\n    ? `\n    self-center\n    h-full\n    w-full\n    sm:border-l-2\n    sm:border-r-2\n    sm:border-[#3091e0]\n    sm:w-11/12\n    md:w-1/2\n    lg:w-5/12\n    xl:w-[28%]`\n    : '';\n\nexport const PasswordGenerator = ({\n  navigation,\n  scrollViewRef,\n  switchEnabled,\n  mPassword,\n  snackbarMessage,\n  snackbarVisible,\n  passwordFromState,\n  isCreateMode,\n  isEditMode,\n  handleCopyButton,\n  handleRefreshButton,\n  handleOnDismissSnackbar,\n  handleOnChangePassword,\n  handleOnBlurPassword,\n  handleSwitch,\n}: Props) => (\n  <View className={webStyles}>\n    <ScrollView ref={scrollViewRef}>\n      <View style={screen.container}>\n        <View style={[cardView.container, passwordStyle.container, shadow.container]}>\n          <View style={passwordStyle.inputContainer}>\n            <TextInput\n              showSoftInputOnFocus={switchEnabled}\n              caretHidden={!switchEnabled}\n              style={passwordStyle.input}\n              value={switchEnabled ? mPassword : passwordFromState}\n              onChangeText={handleOnChangePassword}\n              onBlur={handleOnBlurPassword}\n            />\n            <View style={passwordStyle.icons}>\n              <TouchableOpacity onPress={handleCopyButton}>\n                <MaterialCommunityIcons\n                  style={{ marginRight: 10 }}\n                  name='content-copy'\n                  size={24}\n                  color='grey'\n                />\n              </TouchableOpacity>\n              <TouchableOpacity onPress={handleRefreshButton}>\n                <Ionicons name='reload' size={24} color='grey' />\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n\n        <View style={[cardView.container, configuration.container, shadow.container]}>\n          <View style={configuration.textContainer}>\n            <Text style={configuration.textHeader}>Configure your password</Text>\n          </View>\n\n          <Divider style={{ backgroundColor: 'grey' }} />\n\n          {isCreateMode && (\n            <>\n              <View style={configuration.switchToggle}>\n                <Text style={{ fontSize: 17 }}>Place your own password:</Text>\n                <Switch\n                  style={{ marginLeft: 10 }}\n                  value={switchEnabled}\n                  onValueChange={handleSwitch}\n                  color={appColors.primary}\n                />\n              </View>\n\n              <Divider style={{ backgroundColor: 'grey' }} />\n            </>\n          )}\n\n          <View style={configuration.passwordLengthContainer}>\n            <Text style={{ fontSize: 17 }}>Password length</Text>\n            <View style={configuration.lengthSliderContainer}>\n              <TextInput\n                showSoftInputOnFocus={false}\n                caretHidden\n                style={configuration.inputLength}\n                keyboardType='numeric'\n                value={passwordFromState.length.toString()}\n              />\n              <SliderContainer\n                switchEnabled={switchEnabled}\n                defaultValue={isEditMode ? passwordFromState.length : 10}\n              />\n            </View>\n          </View>\n\n          <Divider style={{ backgroundColor: 'grey' }} />\n\n          <PasswordConfigurator switchEnabled={switchEnabled} />\n        </View>\n\n        {(isCreateMode || isEditMode) && <CreateEditPasswordConfigurator navigation={navigation} />}\n      </View>\n    </ScrollView>\n\n    <CustomSnackbar\n      message={snackbarMessage}\n      isSnackbarVisible={snackbarVisible}\n      onDismiss={handleOnDismissSnackbar}\n    />\n  </View>\n);\n\ninterface Props {\n  navigation: DrawerNavigationProp<any> | NativeStackNavigationProp<any>;\n  scrollViewRef: React.RefObject<ScrollView>;\n  switchEnabled: boolean;\n  mPassword: string;\n  snackbarMessage: string;\n  snackbarVisible: boolean;\n  passwordFromState: string;\n  isCreateMode: boolean;\n  isEditMode: boolean;\n  handleCopyButton: () => void;\n  handleRefreshButton: () => void;\n  handleOnDismissSnackbar: () => void;\n  handleOnChangePassword: () => void;\n  handleOnBlurPassword: () => void;\n  handleSwitch: () => void;\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Platform } from 'react-native';\nimport { resetConfigurationState, showAuthenticatedMessage } from 'utils/configuratorUtils';\nimport { setSnackbarMessage, setSnackbarVisible } from 'reduxStore/slices/uiElementsSlice';\nimport { infoMessages } from 'utils/constants';\nimport {\n  resetPasswordPicked,\n  selectIsCreateMode,\n  selectIsEditMode,\n} from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\n\nconst useGeneratorMessage = () => {\n  const dispatch = useDispatch();\n  const userId = useSelector(selectUserId);\n  const isCreateMode = useSelector(selectIsCreateMode);\n  const isEditMode = useSelector(selectIsEditMode);\n\n  useEffect(() => {\n    if (Platform.OS === 'android') {\n      showAuthenticatedMessage(userId, isCreateMode);\n    } else {\n      dispatch(setSnackbarMessage({ snackbarMessage: infoMessages.about2CreatePassword }));\n      dispatch(setSnackbarVisible({ snackbarVisible: true }));\n    }\n\n    (() => isEditMode && dispatch(resetPasswordPicked()))();\n\n    return () => {\n      resetConfigurationState(dispatch);\n    };\n  }, []);\n\n  return true;\n};\n\nexport default useGeneratorMessage;\n","import React, { useLayoutEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectIsEditMode } from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { useNavigation } from '@react-navigation/native';\n\nconst useGeneratorPageTitle = () => {\n  const navigation = useNavigation();\n  const userId = useSelector(selectUserId);\n  const isEditMode = useSelector(selectIsEditMode);\n  const screenTitle = isEditMode\n    ? 'Password Edit'\n    : `Password Generator ${!userId ? '(Only)' : ''}`;\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      title: screenTitle,\n    });\n  });\n\n  return true;\n};\n\nexport default useGeneratorPageTitle;\n","import React, { Dispatch, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { Clipboard, Platform, ScrollView } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport {\n  resetSnackbar,\n  selectSnackbarMessage,\n  selectSnackbarVisible,\n  setSnackbarMessage,\n  setSnackbarVisible,\n} from 'reduxStore/slices/uiElementsSlice';\nimport {\n  generatePassword,\n  selectIsCreateMode,\n  selectIsEditMode,\n  selectPassword,\n  setPassword,\n} from 'reduxStore/slices/passwordSlice';\nimport { PasswordGenerator } from 'screens/PasswordGenerator/passwordGenerator';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport { infoMessages } from 'utils/constants';\nimport useGeneratorMessage from 'hooks/useGeneratorMessage';\nimport useGeneratorPageTitle from 'hooks/useGeneratorPageTitle';\n\nconst PasswordGeneratorContainer = ({ children }: { children: React.FunctionComponent }) => {\n  const scrollViewRef = useRef<ScrollView>(null);\n  const [switchEnabled, setSwitchEnabled] = useState<boolean>(false);\n  const [mPassword, mSetPassword] = useState<string>('');\n  const navigation: DrawerNavigationProp<any> | NativeStackNavigationProp<any> = useNavigation();\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n\n  const snackbarMessage: string = useSelector(selectSnackbarMessage);\n  const snackbarVisible: boolean = useSelector(selectSnackbarVisible);\n  const passwordFromState: string = useSelector(selectPassword);\n  const isCreateMode: boolean = useSelector(selectIsCreateMode);\n  const isEditMode: boolean = useSelector(selectIsEditMode);\n\n  const handleCopyButton = () => {\n    Clipboard.setString(passwordFromState);\n  };\n\n  const handleRefreshButton = () => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(infoMessages.newPassword);\n    } else {\n      dispatch(setSnackbarMessage({ snackbarMessage: infoMessages.newPassword }));\n      dispatch(setSnackbarVisible({ snackbarVisible: true }));\n    }\n\n    dispatch(generatePassword());\n  };\n\n  const handleOnDismissSnackbar = () => {\n    dispatch(resetSnackbar());\n  };\n\n  const handleOnChangePassword = (text: string) => {\n    if (switchEnabled) {\n      mSetPassword(text);\n    }\n  };\n\n  const handleOnBlurPassword = () => {\n    if (switchEnabled) {\n      dispatch(setPassword({ password: mPassword }));\n    }\n  };\n\n  const handleSwitch = () => {\n    setSwitchEnabled(!switchEnabled);\n    if (switchEnabled) {\n      mSetPassword('');\n      dispatch(generatePassword());\n    }\n  };\n\n  useGeneratorMessage();\n  useGeneratorPageTitle();\n\n  return children({\n    navigation,\n    scrollViewRef,\n    switchEnabled,\n    mPassword,\n    snackbarMessage,\n    snackbarVisible,\n    passwordFromState,\n    isCreateMode,\n    isEditMode,\n    handleCopyButton,\n    handleRefreshButton,\n    handleOnDismissSnackbar,\n    handleOnChangePassword,\n    handleOnBlurPassword,\n    handleSwitch,\n  });\n};\n\nconst PasswordGeneratorContainerWrapper = () => (\n  <PasswordGeneratorContainer>\n    {(renderProps: any) => <PasswordGenerator {...renderProps} />}\n  </PasswordGeneratorContainer>\n);\n\nexport default PasswordGeneratorContainerWrapper;\n","import React from 'react';\nimport { Image } from 'react-native';\n\nimport { AntDesign } from '@expo/vector-icons';\n\nimport {\n  imageSourceRetriever,\n  socialMediaIcon,\n  socialMediaIconColor,\n} from 'utils/imageDataRetriever';\n\nexport const SocialMediaIcon = ({ style, socialMedia }: Props) => {\n  if (['amazon', 'discord', 'google', 'slack', 'okta', 'outlook', 'twitch'].includes(socialMedia)) {\n    const imageSource = imageSourceRetriever(socialMedia);\n\n    // @ts-ignore\n    return <Image style={style} source={imageSource} />;\n  }\n  const getSocialMedia: any = socialMediaIcon(socialMedia);\n  const socialMediaColor = socialMediaIconColor(socialMedia);\n\n  return <AntDesign style={style} name={getSocialMedia} size={24} color={socialMediaColor} />;\n};\n\ninterface Props {\n  style: any;\n  socialMedia: string;\n}\n","interface ObjectCondition {\n  [key: string]: string;\n}\n\nexport const imageSourceRetriever = (socialMedia: string) => {\n  const images: ObjectCondition = {\n    amazon: require('assets/amazon.png'),\n    discord: require('assets/discord.png'),\n    google: require('assets/google.png'),\n    slack: require('assets/slack.png'),\n    okta: require('assets/okta.png'),\n    outlook: require('assets/outlook.png'),\n    twitch: require('assets/twitch.png'),\n    '': '',\n  };\n\n  return images[socialMedia];\n};\n\nexport const socialMediaIcon = (socialMedia: string) => {\n  const images: ObjectCondition = {\n    facebook: 'facebook-square',\n    linkedin: 'linkedin-square',\n    other: 'questioncircle',\n    '': socialMedia,\n  };\n\n  return images[socialMedia] || socialMedia;\n};\n\nexport const socialMediaIconColor = (socialMedia: string) => {\n  const colors: ObjectCondition = {\n    facebook: '#4267B2',\n    twitter: '#00ACEE',\n    linkedin: '#2867B2',\n  };\n\n  return colors[socialMedia] || 'black';\n};\n","import { Platform, StyleSheet } from 'react-native';\n\nexport const item = StyleSheet.create({\n  container: {\n    backgroundColor: '#FFF',\n    padding: 10,\n    borderRadius: 5,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginLeft: 3,\n    marginRight: 3,\n    marginBottom: 10,\n\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n\n    elevation: 5,\n  },\n\n  socialIconAndPasswordInfo: { flex: 1, width: '50%', flexDirection: 'row', alignItems: 'center' },\n\n  passwordAndDescription: {\n    width: '81%',\n    paddingHorizontal: 5,\n    flexDirection: 'column',\n  },\n\n  descriptionTextLabel: { fontSize: 13, marginBottom: 5 },\n\n  passwordInput: {\n    fontFamily: Platform.OS === 'ios' ? 'Courier New' : 'monospace',\n    fontWeight: 'bold',\n    fontSize: Platform.OS === 'web' ? 15 : 14,\n  },\n});\n\nexport const icons = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n  },\n\n  socialMedia: { width: 24, height: 24, marginRight: 10 },\n\n  singleIcon: {\n    marginRight: 10,\n  },\n});\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  setIsDeleteMode,\n  setIsEditMode,\n  setPassword,\n  setPasswordDescriptionPicked,\n  setPasswordIdPicked,\n  setPasswordPicked,\n} from 'reduxStore/slices/passwordSlice';\n\nimport { Clipboard, Platform, TouchableOpacity, View } from 'react-native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { Entypo, FontAwesome, Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\n\nimport { icons } from 'components/PasswordItem/styles';\n\nimport { appColors, infoMessages } from 'utils/constants';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport { setSocialMediaPicked } from 'reduxStore/slices/socialMediaSlice';\nimport {\n  setModalMessage,\n  setModalTitle,\n  setModalVisible,\n  setSnackbarMessage,\n  setSnackbarVisible,\n} from 'reduxStore/slices/uiElementsSlice';\n\nexport const PasswordIcons = ({\n  passwordId,\n  socialMedia,\n  description,\n  passwordGenerated,\n  passwordVisible,\n  setPasswordVisible,\n  navigation,\n}: Props) => {\n  const dispatch = useDispatch();\n\n  const mSocialMedia = socialMedia.charAt(0).toUpperCase() + socialMedia.slice(1);\n\n  const handleShowHidePassword = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  const handleCopyButton = () => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(infoMessages.copied2Clipboard);\n    } else {\n      dispatch(setSnackbarMessage({ snackbarMessage: infoMessages.copied2Clipboard }));\n      dispatch(setSnackbarVisible({ snackbarVisible: true }));\n    }\n\n    Clipboard.setString(passwordGenerated);\n  };\n\n  const handleEditButton = () => {\n    dispatch(setIsEditMode({ isEditMode: true }));\n    dispatch(setPasswordIdPicked({ passwordIdPicked: passwordId }));\n    dispatch(setPasswordPicked({ passwordPicked: passwordGenerated }));\n    dispatch(setPassword({ password: passwordGenerated }));\n    dispatch(setPasswordDescriptionPicked({ passwordDescriptionPicked: description }));\n    dispatch(setSocialMediaPicked({ socialMediaPicked: socialMedia }));\n    navigation.navigate('PasswordGenerator');\n  };\n\n  const handleDeleteButton = () => {\n    dispatch(setIsDeleteMode({ isDeleteMode: true }));\n    dispatch(setPasswordIdPicked({ passwordIdPicked: passwordId }));\n    dispatch(setModalTitle({ modalTitle: 'Delete password warning' }));\n    dispatch(\n      setModalMessage({\n        modalMessage: `Are you sure you want to delete this ${mSocialMedia}'s password?`,\n      })\n    );\n    dispatch(setModalVisible({ modalVisible: true }));\n  };\n\n  return (\n    <View style={icons.container}>\n      <TouchableOpacity onPress={handleShowHidePassword}>\n        <Entypo\n          style={icons.singleIcon}\n          name={passwordVisible ? 'eye' : 'eye-with-line'}\n          size={18}\n          color='grey'\n        />\n      </TouchableOpacity>\n      <TouchableOpacity onPress={handleCopyButton}>\n        <MaterialCommunityIcons\n          style={icons.singleIcon}\n          name='content-copy'\n          size={18}\n          color='grey'\n        />\n      </TouchableOpacity>\n      <TouchableOpacity onPress={handleEditButton}>\n        <FontAwesome style={{ marginRight: 5 }} name='edit' size={18} color='grey' />\n      </TouchableOpacity>\n      <TouchableOpacity onPress={handleDeleteButton}>\n        <Ionicons name='trash' size={18} color={appColors.red} />\n      </TouchableOpacity>\n    </View>\n  );\n};\n\ninterface Props {\n  passwordId: string;\n  socialMedia: string;\n  description: string;\n  passwordGenerated: string;\n  passwordVisible: boolean;\n  setPasswordVisible: any;\n  navigation: DrawerNavigationProp<any>;\n}\n","import React, { useState } from 'react';\nimport { View, Text, TextInput } from 'react-native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\n\nimport { SocialMediaIcon } from 'components/SocialMediaIcon/socialMediaIcon';\nimport { PasswordIcons } from 'components/PasswordIcons/passwordIcon';\n\nimport { icons, item } from './styles';\n\nexport const PasswordItem = ({\n  passwordId,\n  passwordGenerated,\n  socialMedia,\n  description,\n  navigation,\n}: Props) => {\n  const [passwordVisible, setPasswordVisible] = useState(false);\n\n  return (\n    <View style={item.container}>\n      <View style={item.socialIconAndPasswordInfo}>\n        <SocialMediaIcon style={icons.socialMedia} socialMedia={socialMedia} />\n        <View style={item.passwordAndDescription}>\n          <Text style={item.descriptionTextLabel}>{description}</Text>\n          <TextInput\n            style={item.passwordInput}\n            showSoftInputOnFocus={false}\n            caretHidden\n            value={passwordGenerated}\n            secureTextEntry={!passwordVisible}\n          />\n        </View>\n      </View>\n      <PasswordIcons\n        passwordId={passwordId}\n        socialMedia={socialMedia}\n        description={description}\n        passwordGenerated={passwordGenerated}\n        passwordVisible={passwordVisible}\n        setPasswordVisible={setPasswordVisible}\n        navigation={navigation}\n      />\n    </View>\n  );\n};\n\ninterface Props {\n  passwordId: string;\n  passwordGenerated: string;\n  socialMedia: string;\n  description: string;\n  navigation: DrawerNavigationProp<any>;\n}\n","import { StyleSheet } from 'react-native';\n\nexport const styles = StyleSheet.create({\n  content: {\n    flexDirection: 'column',\n    backgroundColor: 'white',\n    padding: 25,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 4,\n    borderColor: 'rgba(0, 0, 0, 0.1)',\n  },\n\n  title: {\n    alignSelf: 'flex-start',\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 12,\n  },\n\n  message: {\n    alignSelf: 'flex-start',\n    marginBottom: 10,\n  },\n\n  input: {\n    width: '90%',\n    alignSelf: 'flex-start',\n    borderWidth: 1,\n    borderRadius: 10,\n    marginTop: 15,\n    marginBottom: 20,\n    paddingVertical: 3,\n    paddingHorizontal: 15,\n  },\n\n  buttonContainer: {\n    flexDirection: 'row',\n    alignSelf: 'flex-end',\n  },\n\n  button: {\n    paddingHorizontal: 5,\n  },\n});\n","import React from 'react';\nimport { Text, View } from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport Modal from 'react-native-modal';\nimport { appColors } from 'utils/constants';\n\nimport { styles } from './styles';\n\nexport const CustomModal = (props: {\n  visible: boolean;\n  toggle: any;\n  onSubmit: any;\n  title: string;\n  message: string;\n}) => {\n  const { visible, toggle, onSubmit, title, message } = props;\n\n  return (\n    <Modal isVisible={visible} onBackdropPress={toggle} onBackButtonPress={toggle}>\n      <View style={styles.content}>\n        <Text style={styles.title}>{title}</Text>\n        <Text style={styles.message}>{message}</Text>\n        <View style={styles.buttonContainer}>\n          <View style={styles.button}>\n            <MaterialIcons.Button name='close' onPress={toggle} backgroundColor={appColors.red}>\n              No\n            </MaterialIcons.Button>\n          </View>\n          <View style={styles.button}>\n            <MaterialIcons.Button\n              name='check'\n              onPress={onSubmit}\n              backgroundColor={appColors.primary}\n            >\n              Yes\n            </MaterialIcons.Button>\n          </View>\n        </View>\n      </View>\n    </Modal>\n  );\n};\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#EBEAED',\n  },\n  sectionTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    paddingBottom: 20,\n  },\n  items: {\n    margin: 20,\n  },\n  writeTaskWrapper: {\n    position: 'absolute',\n    bottom: 20,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n  },\n  input: {\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    width: 250,\n    backgroundColor: '#FFF',\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n    borderRadius: 60,\n  },\n  addWrapper: {\n    width: 60,\n    height: 60,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    alignItems: 'center',\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n  },\n  addText: {\n    position: 'absolute',\n    alignItems: 'center',\n    fontSize: 45,\n    color: '#C0C0C0',\n  },\n  navWrapper: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  navButtonContainer: {\n    justifyContent: 'center',\n    backgroundColor: '#E13333',\n    width: '78%',\n    padding: 6,\n    marginTop: 2,\n    marginHorizontal: 10,\n    borderRadius: 10,\n  },\n  navButton: {\n    alignItems: 'center',\n    fontSize: 13,\n    fontWeight: '700',\n    color: 'white',\n  },\n\n  fab: {\n    position: 'absolute',\n    margin: 26,\n    right: 0,\n    backgroundColor: appColors.primary,\n  },\n});\n\nexport default styles;\n","import React from 'react';\nimport { View, ScrollView, Platform } from 'react-native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { FAB } from 'react-native-paper';\nimport { PasswordItem } from 'components/PasswordItem/passwordItem';\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport { CustomSnackbar } from 'components/CustomSnackbar/customSnackbar';\nimport { CustomModal as Modal } from 'components/CustomModal/customModal';\nimport { appColors, PasswordI } from 'utils/constants';\nimport styles from './styles';\n\nconst webStyles: string =\n  Platform.OS === 'web'\n    ? `\n    self-center\n    w-full\n    sm:border-l-2\n    sm:border-r-2\n    sm:border-[#3091e0]\n    sm:w-11/12\n    md:w-1/2\n    lg:w-5/12\n    xl:w-[28%]`\n    : '';\n\nexport const PasswordList = ({\n  navigation,\n  snackbarVisible,\n  snackbarMessage,\n  modalTitle,\n  modalMessage,\n  modalVisible,\n  scrollIsClose2Bottom,\n  passwords,\n  isRequesting,\n  handleScrollIsClose2Bottom,\n  handleOnDismissSnackbar,\n  handleOnPressFAB,\n  handleModalToggle,\n  handleModalOnSubmit,\n}: Props) => {\n  if (isRequesting) return <LoadingIndicator />;\n\n  return (\n    <View className={webStyles} style={styles.container}>\n      <ScrollView\n        scrollEventThrottle={16}\n        onScroll={handleScrollIsClose2Bottom}\n        contentContainerStyle={{ flexGrow: 1 }}\n        keyboardShouldPersistTaps='handled'\n      >\n        <View style={styles.items}>\n          {passwords.map(({ id, description, passwordGenerated, socialMedia }: PasswordI) => (\n            <PasswordItem\n              key={id}\n              passwordId={id}\n              passwordGenerated={passwordGenerated}\n              socialMedia={socialMedia}\n              description={description}\n              navigation={navigation}\n            />\n          ))}\n        </View>\n      </ScrollView>\n      <FAB\n        style={[styles.fab, { bottom: snackbarVisible ? 40 : 0 }]}\n        color={appColors.textTint}\n        visible={!scrollIsClose2Bottom}\n        icon='plus'\n        onPress={handleOnPressFAB}\n      />\n      <CustomSnackbar\n        message={snackbarMessage}\n        isSnackbarVisible={snackbarVisible}\n        onDismiss={handleOnDismissSnackbar}\n      />\n      <Modal\n        visible={modalVisible}\n        toggle={handleModalToggle}\n        onSubmit={handleModalOnSubmit}\n        title={modalTitle}\n        message={modalMessage}\n      />\n    </View>\n  );\n};\n\ninterface Props {\n  navigation: DrawerNavigationProp<any>;\n  snackbarVisible: boolean;\n  snackbarMessage: string;\n  modalTitle: string;\n  modalMessage: string;\n  modalVisible: boolean;\n  scrollIsClose2Bottom: boolean;\n  passwords: Array<PasswordI>;\n  isRequesting: boolean;\n  handleScrollIsClose2Bottom: () => void;\n  handleOnDismissSnackbar: () => void;\n  handleOnPressFAB: () => void;\n  handleModalToggle: () => void;\n  handleModalOnSubmit: () => void;\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getSocialMediaListFromFirebase,\n  selectSocialMediaList,\n} from 'reduxStore/slices/socialMediaSlice';\nimport { socialMediaCollection } from 'services/firebase';\n\nconst useSocialMediaFromFirebase = () => {\n  const dispatch = useDispatch();\n  const socialMediaList = useSelector(selectSocialMediaList);\n\n  useEffect(() => {\n    const unsubscribeSocialMediaCollection = socialMediaCollection.onSnapshot(() => {\n      dispatch(getSocialMediaListFromFirebase());\n    });\n\n    // remove those next once the component got unmounted\n    return () => {\n      unsubscribeSocialMediaCollection();\n    };\n  }, []);\n\n  return socialMediaList;\n};\n\nexport default useSocialMediaFromFirebase;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { passwordsCollection } from 'services/firebase';\nimport { getPasswordsFromFirebase, selectPasswords } from 'reduxStore/slices/passwordSlice';\nimport useSocialMediaPicked from 'hooks/useSocialMediaFromFirebase';\n\nconst usePasswordsFromFirebase = () => {\n  const dispatch = useDispatch();\n  useSocialMediaPicked();\n  const passwords = useSelector(selectPasswords);\n\n  useEffect(() => {\n    const unsubscribePasswordsCollection = passwordsCollection.onSnapshot(() => {\n      dispatch(getPasswordsFromFirebase());\n    });\n\n    // remove those next once the component got unmounted\n    return () => {\n      unsubscribePasswordsCollection();\n    };\n  }, []);\n\n  return passwords;\n};\n\nexport default usePasswordsFromFirebase;\n","import React, { Dispatch, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { NativeScrollEvent, NativeSyntheticEvent, Platform } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { PasswordList } from 'screens/PasswordList/passwordList';\nimport {\n  resetModal,\n  resetSnackbar,\n  selectModalMessage,\n  selectModalTitle,\n  selectModalVisible,\n  selectSnackbarMessage,\n  selectSnackbarVisible,\n} from 'reduxStore/slices/uiElementsSlice';\nimport {\n  deletePasswordFromFirebase,\n  editPasswordFromFirebase,\n  selectIsDeleteMode,\n  selectIsEditMode,\n  setIsCreateMode,\n} from 'reduxStore/slices/passwordSlice';\nimport usePasswordsFromFirebase from 'hooks/usePasswordsFromFirebase';\nimport { selectRequest } from 'reduxStore/slices/applicationStatusSlice';\nimport { PasswordI } from 'utils/constants';\n\nconst PasswordListContainer = ({ children }: { children: React.FunctionComponent }) => {\n  const [scrollIsClose2Bottom, setScrollIsClose2Bottom] = useState<boolean>(false);\n  const navigation: DrawerNavigationProp<any> = useNavigation();\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n\n  const snackbarVisible: boolean = useSelector(selectSnackbarVisible);\n  const snackbarMessage: string = useSelector(selectSnackbarMessage);\n  const modalTitle: string = useSelector(selectModalTitle);\n  const modalMessage: string = useSelector(selectModalMessage);\n  const modalVisible: boolean = useSelector(selectModalVisible);\n  const isEditMode: boolean = useSelector(selectIsEditMode);\n  const isDeleteMode: boolean = useSelector(selectIsDeleteMode);\n  const passwords: Array<PasswordI> = usePasswordsFromFirebase();\n  const isRequesting: boolean = useSelector(selectRequest);\n\n  const handleScrollIsClose2Bottom = (event: NativeSyntheticEvent<NativeScrollEvent>) => {\n    const { layoutMeasurement, contentOffset, contentSize } = event.nativeEvent;\n    const paddingToBottom = Platform.OS === 'web' ? 7 : 10;\n    const result =\n      layoutMeasurement.height + contentOffset.y >= contentSize.height - paddingToBottom;\n\n    setScrollIsClose2Bottom(result);\n  };\n\n  const handleOnDismissSnackbar = () => {\n    dispatch(resetSnackbar());\n  };\n\n  const handleOnPressFAB = () => {\n    dispatch(setIsCreateMode({ isCreateMode: true }));\n    navigation.navigate('PasswordGenerator');\n  };\n\n  const handleModalToggle = () => {\n    dispatch(resetModal());\n  };\n\n  const handleModalOnSubmit = () => {\n    if (isDeleteMode) {\n      dispatch(deletePasswordFromFirebase());\n    } else if (isEditMode) {\n      dispatch(editPasswordFromFirebase());\n      navigation.navigate('PasswordList');\n    }\n    dispatch(resetModal());\n  };\n\n  return children({\n    navigation,\n    snackbarVisible,\n    snackbarMessage,\n    modalTitle,\n    modalMessage,\n    modalVisible,\n    scrollIsClose2Bottom,\n    passwords,\n    isRequesting,\n    handleScrollIsClose2Bottom,\n    handleOnDismissSnackbar,\n    handleOnPressFAB,\n    handleModalToggle,\n    handleModalOnSubmit,\n  });\n};\n\nconst PasswordListWrapper = () => (\n  <PasswordListContainer>\n    {(renderProps: any) => <PasswordList {...renderProps} />}\n  </PasswordListContainer>\n);\n\nexport default PasswordListWrapper;\n","import { StyleSheet, Platform } from 'react-native';\n\nexport const imageBackground = StyleSheet.create({\n  container: {\n    width: undefined,\n    padding: 16,\n    paddingTop: 48,\n  },\n  name: {\n    marginTop: 60,\n    paddingHorizontal: 5,\n    color: '#F0F0F0',\n    backgroundColor: 'rgba(48, 145, 224, 0.6)',\n    borderRadius: 5,\n    fontSize: 20,\n    fontWeight: 'bold',\n    textShadowColor: '#000',\n    textShadowOffset: { width: 5, height: 5 },\n    textShadowRadius: 10,\n  },\n});\n\nexport const divider = StyleSheet.create({\n  divider: {\n    marginHorizontal: 20,\n    marginTop: 40,\n    marginBottom: 20,\n    backgroundColor: '#464646',\n  },\n});\n\nexport const signout = StyleSheet.create({\n  container: {\n    backgroundColor: '#F3BBBB',\n    borderRadius: 5,\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    marginHorizontal: 10,\n    paddingVertical: 15,\n    paddingLeft: Platform.OS === 'web' ? 19 : 17,\n  },\n  icon: {\n    marginRight: 32,\n  },\n  text: {\n    color: '#F11D1D',\n  },\n});\n","import React from 'react';\nimport { Text, ScrollView, ImageBackground, View } from 'react-native';\nimport { DrawerItemList, DrawerItem } from '@react-navigation/drawer';\nimport {\n  DrawerDescriptorMap,\n  DrawerNavigationHelpers,\n  // eslint-disable-next-line import/no-unresolved\n} from '@react-navigation/drawer/lib/typescript/src/types';\nimport { DrawerNavigationState, ParamListBase } from '@react-navigation/routers';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { MaterialCommunityIcons, MaterialIcons, FontAwesome } from '@expo/vector-icons';\nimport { Drawer } from 'react-native-paper';\nimport { I18n } from 'i18n-js';\nimport { imageBackground } from './styles';\n\nexport const CustomSidebar = ({\n  sidebarProps,\n  userName,\n  translations,\n  handleSignOut,\n  onPressInPasswordGenerator,\n  onPressInCheckTutorial,\n}: Props) => (\n  <SafeAreaProvider>\n    <ImageBackground\n      source={require('assets/img/sidebar-banner.png')}\n      style={imageBackground.container}\n    >\n      <Text style={imageBackground.name}>{`${translations.t('welcome')}, ${userName} !`}</Text>\n    </ImageBackground>\n    <View className='flex flex-grow justify-between'>\n      <Drawer.Section title={translations.t('pages')}>\n        <ScrollView style={{ paddingTop: 10 }}>\n          <DrawerItemList {...sidebarProps} />\n          <DrawerItem\n            label={translations.t('passwordGenerator')}\n            icon={({ color, size }) => (\n              <MaterialCommunityIcons name='engine-outline' size={size * 0.75} color={color} />\n            )}\n            onPress={() => onPressInPasswordGenerator(sidebarProps.navigation)}\n          />\n          <DrawerItem\n            label={translations.t('checkTutorial')}\n            icon={({ color, size }) => (\n              <FontAwesome name='graduation-cap' size={size * 0.6} color={color} />\n            )}\n            onPress={() => onPressInCheckTutorial(sidebarProps.navigation)}\n          />\n        </ScrollView>\n      </Drawer.Section>\n      <DrawerItem\n        icon={({ color, size }) => <MaterialIcons name='logout' size={size * 0.75} color={color} />}\n        label={translations.t('signOut')}\n        onPress={handleSignOut}\n      />\n    </View>\n  </SafeAreaProvider>\n);\n\ninterface Props {\n  sidebarProps: {\n    state: DrawerNavigationState<ParamListBase>;\n    navigation: DrawerNavigationHelpers;\n    descriptors: DrawerDescriptorMap;\n  };\n  userName: string;\n  translations: I18n;\n  handleSignOut: () => void;\n  // eslint-disable-next-line no-unused-vars\n  onPressInPasswordGenerator: (navigation: DrawerNavigationHelpers) => void;\n  // eslint-disable-next-line no-unused-vars\n  onPressInCheckTutorial: (navigation: DrawerNavigationHelpers) => void;\n}\n","export default {\n  en: {\n    welcome: 'Hey there',\n    pages: 'Pages',\n    passwordGenerator: 'Password generator',\n    checkTutorial: 'Check tutorial',\n    signOut: 'Sign out',\n  },\n  es: {\n    welcome: 'Hola',\n    pages: 'Páginas',\n    passwordGenerator: 'Generador de contraseñas',\n    checkTutorial: 'Revisar tutorial',\n    signOut: 'Cerrar sesión',\n  },\n};\n","import React, { Dispatch } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport { Platform } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { DrawerContentComponentProps } from '@react-navigation/drawer';\n// eslint-disable-next-line import/no-unresolved\nimport { DrawerNavigationHelpers } from '@react-navigation/drawer/lib/typescript/src/types';\nimport { selectUserEmail } from 'reduxStore/slices/userSlice';\nimport { setIsCreateMode, unsetPasswords } from 'reduxStore/slices/passwordSlice';\nimport { CustomSidebar } from 'components/CustomSidebar/customSidebar';\nimport { signOut } from 'services/firebase';\nimport { I18n } from 'i18n-js';\nimport { selectLocale } from 'reduxStore/slices/applicationStatusSlice';\nimport sidebarTranslations from '../../languages/sidebarTranslations';\n\nconst CustomSidebarContainer = ({ children }: { children: React.FunctionComponent }) => {\n  const userEmail = useSelector(selectUserEmail);\n  const name: string = userEmail ? userEmail.substring(0, userEmail.indexOf('@')) : '';\n  const userName: string = name.charAt(0).toUpperCase() + name.slice(1);\n  const stackNavigation = useNavigation<NativeStackNavigationProp<any>>();\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n  const i18n = new I18n(sidebarTranslations);\n  i18n.locale = useSelector(selectLocale);\n  i18n.enableFallback = true;\n\n  const handleSignOut = () => {\n    signOut().then(() => {\n      dispatch(unsetPasswords());\n      stackNavigation.replace('Login');\n    });\n  };\n\n  const onPressInPasswordGenerator = (navigation: DrawerNavigationHelpers) => {\n    navigation.closeDrawer();\n    dispatch(setIsCreateMode({ isCreateMode: true }));\n    navigation.navigate('PasswordGenerator');\n  };\n\n  const onPressInCheckTutorial = (navigation: DrawerNavigationHelpers) => {\n    if (Platform.OS === 'web') {\n      alert('This is not available in web. Please, stay tuned.');\n    } else {\n      navigation.navigate('Tutorial');\n    }\n    navigation.closeDrawer();\n  };\n\n  return children({\n    userName,\n    translations: i18n,\n    handleSignOut,\n    onPressInPasswordGenerator,\n    onPressInCheckTutorial,\n  });\n};\n\nconst CustomSidebarContainerWrapper = (sidebarProps: DrawerContentComponentProps) => (\n  <CustomSidebarContainer>\n    {(renderProps: any) => <CustomSidebar {...renderProps} sidebarProps={sidebarProps} />}\n  </CustomSidebarContainer>\n);\n\nexport default CustomSidebarContainerWrapper;\n","import React from 'react';\nimport { Dimensions, Platform } from 'react-native';\nimport { createDrawerNavigator, DrawerContentComponentProps } from '@react-navigation/drawer';\nimport { Feather } from '@expo/vector-icons';\nimport PasswordList from 'screens/PasswordList/passwordListContainer';\nimport CustomSidebar from 'components/CustomSidebar/customSidebarContainer';\nimport { useSelector } from 'react-redux';\nimport { selectLocale } from 'reduxStore/slices/applicationStatusSlice';\nimport { I18n } from 'i18n-js';\nimport drawerTranslations from '../../languages/drawerTranslations';\n\nconst CustomDrawer = createDrawerNavigator();\nconst i18n = new I18n(drawerTranslations);\n\nexport const Drawer = () => {\n  i18n.locale = useSelector(selectLocale);\n  i18n.enableFallback = true;\n\n  return (\n    <CustomDrawer.Navigator\n      initialRouteName='PasswordList'\n      screenOptions={{\n        drawerStyle: {\n          width: Platform.OS === 'web' ? 300 : Dimensions.get('window').width * 0.7,\n        },\n        drawerActiveBackgroundColor: '#9ac8fc',\n        drawerActiveTintColor: '#3091e0',\n        drawerItemStyle: {\n          borderRadius: 5,\n        },\n      }}\n      drawerContent={(sidebarProps: DrawerContentComponentProps) => (\n        <CustomSidebar {...sidebarProps} />\n      )}\n    >\n      <CustomDrawer.Screen\n        name='PasswordList'\n        component={PasswordList}\n        options={{\n          title: i18n.t('title'),\n          headerStyle: {\n            backgroundColor: '#3091e0',\n          },\n          headerTintColor: '#FFF',\n          drawerIcon: ({ color, size }) => <Feather name='list' size={size * 0.75} color={color} />,\n        }}\n      />\n    </CustomDrawer.Navigator>\n  );\n};\n","export default {\n  es: { title: 'Lista de contraseñas' },\n  en: { title: 'Password list' },\n};\n","import React from 'react';\nimport { StatusBar } from 'react-native';\nimport { appColors } from 'utils/constants';\n\n/*\n * For more reference check this snack:\n *   https://snack.expo.dev/@ahmed_gaber/safe-area-context?platform=ios\n */\n\nexport const CustomStatusbar = () => (\n  <StatusBar animated barStyle='light-content' backgroundColor={appColors.primaryDark} />\n);\n\nexport default CustomStatusbar;\n","import React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport OnBoarding from 'screens/OnBoarding/onBoardingContainer';\nimport Login from 'screens/Login/loginContainer';\nimport SignUp from 'screens/SignUp/signupContainer';\nimport PasswordGenerator from 'screens/PasswordGenerator/passwordGeneratorContainer';\nimport { Drawer } from 'screens/Drawer/drawer';\nimport CustomStatusbar from 'components/CustomStatusbar/customStatusbar';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nconst Stack = createNativeStackNavigator();\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n\ninterface RootProps {\n  loading: boolean;\n  onBoardingViewed: boolean;\n}\n\nconst Root = ({ loading, onBoardingViewed }: RootProps) => {\n  if (onBoardingViewed === null) {\n    return null;\n  }\n\n  return (\n    <View style={[styles.container]}>\n      <CustomStatusbar />\n      <NavigationContainer>\n        <Stack.Navigator>\n          {loading && (\n            <Stack.Screen\n              name='Loading'\n              component={LoadingIndicator}\n              options={{ headerShown: false }}\n            />\n          )}\n          {!onBoardingViewed && Platform.OS !== 'web' && (\n            <Stack.Screen\n              name='OnBoarding'\n              component={OnBoarding}\n              options={{ headerShown: false }}\n            />\n          )}\n          <Stack.Screen name='Login' component={Login} options={{ headerShown: false }} />\n          <Stack.Screen name='SignUp' component={SignUp} options={{ headerShown: false }} />\n          <Stack.Screen\n            name='PasswordGenerator'\n            component={PasswordGenerator}\n            options={{\n              headerStyle: {\n                backgroundColor: '#3091e0',\n              },\n              headerTintColor: '#FFF',\n            }}\n          />\n          <Stack.Screen name='Tutorial' component={OnBoarding} options={{ headerShown: false }} />\n          <Stack.Screen\n            name='Drawer'\n            component={Drawer}\n            options={{\n              headerShown: false,\n            }}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </View>\n  );\n};\n\nexport default Root;\n","import React, { Dispatch, useEffect, useState } from 'react';\nimport * as Localization from 'expo-localization';\nimport { logger } from 'react-native-logs';\nimport { getOnBoardingViewed } from 'utils/localStorageFuncs';\nimport { useDispatch } from 'react-redux';\nimport { setLocale } from 'reduxStore/slices/applicationStatusSlice';\nimport { AnyAction } from '@reduxjs/toolkit';\nimport Root from './root';\n\nconst RootContainer = ({ children }: { children: React.FunctionComponent }) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [onBoardingViewed, setOnBoardingViewed] = useState<boolean>(false);\n  const dispatch: Dispatch<AnyAction> = useDispatch();\n  const log = logger.createLogger();\n\n  useEffect(() => {\n    dispatch(setLocale({ locale: Localization.locale }));\n\n    getOnBoardingViewed()\n      .then((value) => {\n        if (value === 'false' || value === undefined) {\n          setOnBoardingViewed(false);\n        } else {\n          setOnBoardingViewed(true);\n        }\n      })\n      .catch((err) => {\n        log.error('Error checking is first launch: ', { err });\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  return children({ loading, onBoardingViewed });\n};\n\nconst RootContainerWrapper = () => (\n  <RootContainer>{(renderProps: any) => <Root {...renderProps} />}</RootContainer>\n);\n\nexport default RootContainerWrapper;\n","import 'react-native-gesture-handler';\nimport { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  snackbarMessage: '',\n  snackbarVisible: false,\n  modalTitle: '',\n  modalMessage: '',\n  modalVisible: false,\n};\n\nconst initialSnackbarState = {\n  snackbarMessage: '',\n  snackbarVisible: false,\n};\n\nconst initialModalState = {\n  modalTitle: '',\n  modalMessage: '',\n  modalVisible: false,\n};\n\nexport const uiElementsSlice = createSlice({\n  name: 'uiElements',\n  initialState,\n  reducers: {\n    // snackbar actions\n    setSnackbarMessage: (state, { payload }) => ({\n      ...state,\n      snackbarMessage: payload.snackbarMessage,\n    }),\n    setSnackbarVisible: (state, { payload }) => ({\n      ...state,\n      snackbarVisible: payload.snackbarVisible,\n    }),\n    resetSnackbar: (state) => ({\n      ...state,\n      ...initialSnackbarState,\n    }),\n\n    // modal actions\n    setModalTitle: (state, { payload }) => ({\n      ...state,\n      modalTitle: payload.modalTitle,\n    }),\n    setModalMessage: (state, { payload }) => ({\n      ...state,\n      modalMessage: payload.modalMessage,\n    }),\n    setModalVisible: (state, { payload }) => ({\n      ...state,\n      modalVisible: payload.modalVisible,\n    }),\n    resetModal: (state) => ({\n      ...state,\n      ...initialModalState,\n    }),\n  },\n});\n\nexport const {\n  setSnackbarMessage,\n  setSnackbarVisible,\n  resetSnackbar,\n  setModalTitle,\n  setModalMessage,\n  setModalVisible,\n  resetModal,\n} = uiElementsSlice.actions;\n\n// snackbar select\nexport const selectSnackbarMessage = (state: { uiElements: { snackbarMessage: any } }) =>\n  state.uiElements.snackbarMessage;\nexport const selectSnackbarVisible = (state: { uiElements: { snackbarVisible: any } }) =>\n  state.uiElements.snackbarVisible;\n\n// modal select\nexport const selectModalTitle = (state: { uiElements: { modalTitle: any } }) =>\n  state.uiElements.modalTitle;\nexport const selectModalMessage = (state: { uiElements: { modalMessage: any } }) =>\n  state.uiElements.modalMessage;\nexport const selectModalVisible = (state: { uiElements: { modalVisible: any } }) =>\n  state.uiElements.modalVisible;\n","module.exports = __webpack_public_path__ + \"static/media/amazon.4c033704.png\";","module.exports = __webpack_public_path__ + \"static/media/discord.17c0e41c.png\";","module.exports = __webpack_public_path__ + \"static/media/google.647ac848.png\";","module.exports = __webpack_public_path__ + \"static/media/slack.d9f7a674.png\";","module.exports = __webpack_public_path__ + \"static/media/okta.c20fa4f6.png\";","module.exports = __webpack_public_path__ + \"static/media/outlook.217ab4b3.png\";","module.exports = __webpack_public_path__ + \"static/media/twitch.8e8dc9e1.png\";","module.exports = __webpack_public_path__ + \"static/media/sidebar-banner.9f688acf.png\";","import { createSlice } from '@reduxjs/toolkit';\nimport { resetPasswordGeneratorState } from 'reduxStore/slices/passwordSlice';\n\nexport const initialState: {\n  isEasy2Read: boolean;\n  isAllChar: boolean;\n  isUpperCase: boolean;\n  isLowerCase: boolean;\n  isNumbers: boolean;\n  isSymbols: boolean;\n} = {\n  isEasy2Read: true,\n  isAllChar: false,\n  isUpperCase: true,\n  isLowerCase: true,\n  isNumbers: false,\n  isSymbols: false,\n};\n\nconst resetPasswordConfiguratorState = (state: any) => ({\n  ...state,\n  ...initialState,\n});\n\nexport const configuratorSlice = createSlice({\n  name: 'configurator',\n  initialState,\n  reducers: {\n    setIsEasy2Read: (state, { payload }) => ({\n      ...state,\n      isEasy2Read: payload.isEasy2Read,\n    }),\n    setIsAllChar: (state, { payload }) => ({\n      ...state,\n      isAllChar: payload.isAllChar,\n    }),\n    setIsUpperCase: (state, { payload }) => ({\n      ...state,\n      isUpperCase: payload.isUpperCase,\n    }),\n    setIsLowerCase: (state, { payload }) => ({\n      ...state,\n      isLowerCase: payload.isLowerCase,\n    }),\n    setIsNumbers: (state, { payload }) => ({\n      ...state,\n      isNumbers: payload.isNumbers,\n    }),\n    setIsSymbols: (state, { payload }) => ({\n      ...state,\n      isSymbols: payload.isSymbols,\n    }),\n    setIsUpperCaseAndIsLowerCase: (state, { payload }) => ({\n      ...state,\n      isUpperCase: payload.isUpperCase,\n      isLowerCase: payload.isLowerCase,\n    }),\n    setIsNumbersAndIsSymbols: (state, { payload }) => ({\n      ...state,\n      isNumbers: payload.isNumbers,\n      isSymbols: payload.isSymbols,\n    }),\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetPasswordGeneratorState, (state) => resetPasswordConfiguratorState(state));\n  },\n});\n\nexport const {\n  setIsEasy2Read,\n  setIsAllChar,\n  setIsUpperCase,\n  setIsLowerCase,\n  setIsNumbers,\n  setIsSymbols,\n  setIsUpperCaseAndIsLowerCase,\n  setIsNumbersAndIsSymbols,\n} = configuratorSlice.actions;\n\nexport const selectIsEasy2Read = (state: { configurator: { isEasy2Read: boolean } }) =>\n  state.configurator.isEasy2Read;\nexport const selectIsAllChar = (state: { configurator: { isAllChar: boolean } }) =>\n  state.configurator.isAllChar;\nexport const selectIsUpperCase = (state: { configurator: { isUpperCase: boolean } }) =>\n  state.configurator.isUpperCase;\nexport const selectIsLowerCase = (state: { configurator: { isLowerCase: boolean } }) =>\n  state.configurator.isLowerCase;\nexport const selectIsNumbers = (state: { configurator: { isNumbers: boolean } }) =>\n  state.configurator.isNumbers;\nexport const selectIsSymbols = (state: { configurator: { isSymbols: boolean } }) =>\n  state.configurator.isSymbols;\n","import { createSlice } from '@reduxjs/toolkit';\n\ninterface socialMediaI {\n  id: string;\n  name: string;\n}\n\nexport const initialState: {\n  socialMediaPicked: string;\n  socialMediaList: Array<socialMediaI>;\n} = {\n  socialMediaPicked: '',\n  socialMediaList: [],\n};\n\nexport const socialMediaSlice = createSlice({\n  name: 'socialMedia',\n  initialState,\n  reducers: {\n    setSocialMediaPicked: (state, { payload }) => ({\n      ...state,\n      socialMediaPicked: payload.socialMediaPicked,\n    }),\n    unsetSocialMediaPicked: (state) => ({\n      ...state,\n      socialMediaPicked: '',\n    }),\n    setSocialMediaList: (state, { payload }) => ({\n      ...state,\n      socialMediaList: payload.socialMediaList,\n    }),\n    getSocialMediaListFromFirebase: () => {},\n  },\n});\n\nexport const {\n  setSocialMediaPicked,\n  unsetSocialMediaPicked,\n  setSocialMediaList,\n  getSocialMediaListFromFirebase,\n} = socialMediaSlice.actions;\n\nexport const selectSocialMediaPicked = (state: { socialMedia: { socialMediaPicked: string } }) =>\n  state.socialMedia.socialMediaPicked;\nexport const selectSocialMediaList = (state: {\n  socialMedia: { socialMediaList: Array<socialMediaI> };\n}) => state.socialMedia.socialMediaList;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const initialState = {\n  id: '',\n  email: '',\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setUserData: (state, { payload }) => ({\n      ...state,\n      id: payload.id,\n      email: payload.email,\n    }),\n    unsetUserData: () => ({\n      ...initialState,\n    }),\n  },\n});\n\nexport const { setUserData, unsetUserData } = userSlice.actions;\n\nexport const selectUserId = (state: { user: { id: string } }) => state.user.id;\nexport const selectUserEmail = (state: { user: { email: string } }) => state.user.email;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { getPasswordsFromFirebase, setPasswords } from 'reduxStore/slices/passwordSlice';\nimport { setUserData, unsetUserData } from 'reduxStore/slices/userSlice';\nimport { getSocialMediaListFromFirebase } from 'reduxStore/slices/socialMediaSlice';\n\nexport const initialState = {\n  isRequest: false,\n  locale: 'en-US',\n};\n\nexport const applicationStatusSlice = createSlice({\n  name: 'applicationStatus',\n  initialState,\n  reducers: {\n    setIsRequest: (state) => ({\n      ...state,\n      isRequest: true,\n    }),\n    unsetIsRequest: () => ({\n      ...initialState,\n    }),\n    setLocale: (state, { payload }) => ({\n      ...state,\n      locale: payload.locale,\n    }),\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getPasswordsFromFirebase, (state) => ({\n        ...state,\n        isRequest: true,\n      }))\n      .addCase(setPasswords, (state) => ({\n        ...state,\n        isRequest: false,\n      }))\n      .addCase(getSocialMediaListFromFirebase, (state) => ({\n        ...state,\n        isRequest: true,\n      }))\n      .addCase(setUserData, (state) => ({\n        ...state,\n        isRequest: true,\n      }))\n      .addCase(unsetUserData, (state) => ({\n        ...state,\n        isRequest: false,\n      }));\n  },\n});\n\nexport const { setIsRequest, unsetIsRequest, setLocale } = applicationStatusSlice.actions;\n\nexport const selectRequest = (state: { applicationStatus: { isRequest: boolean } }) =>\n  state.applicationStatus.isRequest;\nexport const selectLocale = (state: { applicationStatus: { locale: string } }) =>\n  state.applicationStatus.locale;\n","// Import the functions you need from the SDKs you need\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport {\n  getAuth,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signOut as firebaseSignOut,\n} from 'firebase/auth';\nimport { clearUserDataFromLS, setUserData2LS } from 'utils/localStorageFuncs';\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\nimport { logger } from 'react-native-logs';\n\nconst log = logger.createLogger();\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.FIREBASE_DATABASE_URL,\n  projectId: process.env.FIREBASE_PROJECT_ID,\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.FIREBASE_APP_ID,\n};\n\nconst appLength: number = firebase.apps.length;\n\nconst app = appLength === 0 ? firebase.initializeApp(firebaseConfig) : firebase.app();\nconst database = app.firestore();\n\nexport const auth = getAuth(app);\nexport const passwordsCollection = database.collection('passwords');\nexport const socialMediaCollection = database.collection('social_media');\n\nexport const signIn = (username: string) => {\n  signInWithEmailAndPassword(auth, `${username}@example.com`, username.toLowerCase())\n    .then((userCredentials) => {\n      const { user } = userCredentials;\n\n      setUserData2LS(user?.uid, user?.email);\n    })\n    .catch((error) => {\n      alert(error.message);\n      log.error({ exception: error.message });\n    });\n};\n\nexport const signOut = () =>\n  firebaseSignOut(auth)\n    .then(() => {\n      clearUserDataFromLS();\n    })\n    .catch((error) => {\n      log.error({ exception: error.message });\n    });\n\nexport const signUp = (username: string) => {\n  createUserWithEmailAndPassword(auth, `${username}@example.com`, username.toLowerCase())\n    .then((userCredentials) => {\n      const { user } = userCredentials;\n      log.info('User signed up: ', user?.uid);\n    })\n    .catch((error) => {\n      alert(error.message);\n      log.error({ exception: error.message });\n    });\n};\n"],"sourceRoot":""}